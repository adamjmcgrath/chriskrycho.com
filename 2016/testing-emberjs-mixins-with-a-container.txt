---
Title: Testing Ember.js Mixins With a Container
Date: 2016-06-08 23:15
Tags: emberjs, javascript, software development
Category: tech
---

Today I was working on an Ember.js [mixin] for the new mobile web application we're shipping at Olo, and I ran into an interesting problem when trying to test it.

[mixin]: http://emberjs.com/api/classes/Ember.Mixin.html#content
[\@rwjblue]: https://github.com/rwjblue
[Ember Community Slack]: https://ember-community-slackin.herokuapp.com

When you're testing mixins, you're generally not working with the normal Ember container.[^container] In fact, the default test setup for mixins doesn't have *any* container in play. It just looks like this (assuming you ran `ember generate mixin bar` in an app named `foo`):

```js
import Ember from 'ember';
import BarMixin from 'foo/mixins/bar';
import { module, test } from 'qunit';

module('Unit | Mixin | bar');

// Replace this with your real tests.
test('it works', function(assert) {
  let BarObject = Ember.Object.extend(BarMixin);
  let subject = BarObject.create();
  assert.ok(subject);
});
```

Note two things:

1. It uses the basic Qunit `module` setup, not the ember-qunit `moduleFor` setup.
2. It assumes you're generating a new object instance for every single test.

Both of those assumptions are fine, *if you don't need to interact with the container*. In many cases, that's perfectly reasonable---I'd go so far as to say that most mixins probably *shoudln't* have any dependency on the container.

In the specific case I was working on, however, the point of the mixin was to abstract some common behavior which included all the interactions with a [service]. This meant making sure the dependency injection worked in the unit test. This in turn meant dealing with the container. So let's see what was involved in that.

[service]: https://guides.emberjs.com/v2.6.0/applications/services/



[^container]: If you're not familiar with the "container", this is where all the various dependencies are registered, and where Ember looks them up to inject them when you use methods like `Ember.inject.service()`.

---

**Side note:** The documentation around testing mixins is relatively weak, and in general the testing docs are the weak bits in the Ember guides right now.[^docs] After a conversation with [\@rwjblue] on the [Ember Community Slack], though, I was able to get a handle on the issue, and here we are. Since it stumped me, I'm guessing I'm not the only one.

When this happens, *write it up*. I've been guilty of this too often in the past few months: learning something new that I couldn't find anywhere online, and then leaving it stored in my own head. It doesn't take a particularly long time to write a blog post like this, and if you're stuck, chances are *very* good someone else is too.

[^docs]: Something I intend to help address in the next week or two via a pull request, so if you're my Ember.js documentation team friend and you're reading this... it's coming. ðŸ˜‰
