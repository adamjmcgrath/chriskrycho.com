---
Title: Rust and Swift (xiv)
Subtitle: "Inheritance: a Swiftian specialty (for now)."
Tags: rust, swift, rust-and-swift, programming languages
Date: 2016-03-11 23:19
Series:
  Title: Rust and Swift
  Part: 14
...

<i class="editorial">I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I'd be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. [(See all parts in the series.)][series]</i>

[series]: http://www.chriskrycho.com/rust-and-swift.html

---

The next chapter in the Swift book focuses on *inheritance*, a concept which does not yet exist in Rust.

Swift embraces classical inheritance for `class` data types. As noted [previously][10], Rust's `struct` covers much of the ground covered by Swift's `struct` and `class` types together (value and reference types, etc.). However, what Swift's `class` types bring to the table is inheritance-based (and not just composition-based) extension of types.

[10]: http://www.chriskrycho.com/2015/rust-and-swift-x.html

This is a bit of an interesting point: it is an area where, *as of today*, Swift can do something that is flat impossible in Rust---a rarity.

However, the _status quo_ will be changing sometime in the next year or so, as there is a [Rust RFC for inheritance][rfc] which has been accepted.

---

- [**Previous:** Methods, instance and otherwise.][13]

[13]: http://www.chriskrycho.com/2016/rust-and-swift-xiii.html
