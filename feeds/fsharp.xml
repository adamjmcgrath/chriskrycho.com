<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - fsharp</title><link>http://www.chriskrycho.com/</link><description></description><lastBuildDate>Mon, 20 Feb 2017 12:00:00 -0500</lastBuildDate><item><title>Better Off Using Exceptions?</title><link>http://www.chriskrycho.com/2017/better-off-using-exceptions.html</link><description>&lt;p&gt;I saw this post on error-handling in F&lt;sup&gt;‚ôØ&lt;/sup&gt;, &lt;a href="https://eiriktsarpalis.wordpress.com/2017/02/19/youre-better-off-using-exceptions/" title="You‚Äôre better off using Exceptions"&gt;‚ÄúYou‚Äôre better off using Exceptions‚Äù&lt;/a&gt; making the rounds on Twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception handling is an error management paradigm that has often been met with criticism. Such criticisms typically revolve around scoping considerations, exceptions-as-control-flow abuse or even the assertion that exceptions are really just a type safe version of goto. To an extent, these seem like valid concerns but it is not within the scope of this article to address those per se.&lt;/p&gt;
&lt;p&gt;Such concerns resonate particularly well within FP communities, often taken to the extreme: we should reject exceptions Show more‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I get the argument, and in the specific context of F&lt;sup&gt;‚ôØ&lt;/sup&gt;‚Äîespecially given how much C&lt;sup&gt;‚ôØ&lt;/sup&gt;-interoperating and therefore exception-throwing-code-interoperating there is there‚Äîit‚Äôs reasonable.&lt;/p&gt;
&lt;p&gt;But it still makes me sad. (To be clear: exceptions were and are a big win over what you get in languages like C. I‚Äôll take them any day over &lt;code&gt;goto&lt;/code&gt; or &lt;code&gt;segfault&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;You need to embrace exceptions in F&lt;sup&gt;‚ôØ&lt;/sup&gt; &lt;em&gt;because F&lt;sup&gt;‚ôØ&lt;/sup&gt; has exceptions&lt;/em&gt; and because &lt;em&gt;many of its libraries rely on exceptions&lt;/em&gt;. But my experience with Rust and other non-exception-using languages is that you &lt;em&gt;don‚Äôt&lt;/em&gt; need exceptions in the general case.&lt;/p&gt;
&lt;p&gt;The questions are: whether your language has good support for things like flat-mapping, and whether you‚Äôre willing to commit to letting the compiler help you with these problems.&lt;/p&gt;
&lt;p&gt;To be sure: there‚Äôs more work involved up front to deal with that. But that‚Äôs a tradeoff I‚Äôm &lt;em&gt;always&lt;/em&gt; willing to make. I‚Äôd rather have the compiler tell me if I‚Äôm failing to account for something than learn because I saw a runtime error report come up in &lt;a href="https://raygun.com"&gt;Raygun&lt;/a&gt;, especially because that tends to mean an error that affects the user in some way.&lt;/p&gt;
&lt;p&gt;Rust‚Äôs model gives you something like exceptions for truly unrecoverable errors, ‚Äúpanics.‚Äù A panic gives you all the context you‚Äôd get from an exception (one of the virtues of exceptions highlighted in that post), but you can only ‚Äúcatch‚Äù it at thread boundaries, and it otherwise just kills the program. Because it‚Äôs catastrophic, you only use it where you don‚Äôt have any way to recover in your immediate context. But where you can recover in your immediate context‚Ä¶ using something like a highly descriptive enum (just as suggested at the end of &lt;a href="https://eiriktsarpalis.wordpress.com/2017/02/19/youre-better-off-using-exceptions/" title="You‚Äôre better off using Exceptions"&gt;that original post&lt;/a&gt;!) is a better option.&lt;/p&gt;
&lt;p&gt;It‚Äôs well-understood in my circles that you shouldn‚Äôt use exceptions for things you can recover from; you should use them for things you &lt;em&gt;can‚Äôt&lt;/em&gt; recover from. But in most languages which lean heavily on exceptions, you inevitably start using them for control flow. I say: if you can recover from an error‚Ä¶ just recover from it! Account for recoverable errors as possible conditions in your program and carry on! If you can‚Äôt recover‚Ä¶ don‚Äôt. Die and let some other part of your system kick things back off.&lt;/p&gt;
&lt;p&gt;In summary: yes, if you‚Äôre in F&lt;sup&gt;‚ôØ&lt;/sup&gt;, use exceptions. It &lt;em&gt;is&lt;/em&gt; the right thing to do in many cases (and you don‚Äôt have a choice in many others). But I‚Äôm hopeful for a future where we handle recoverable errors locally, and &lt;a href="http://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html"&gt;act like Erlang or Elixir otherwise&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 20 Feb 2017 12:00:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-02-20:/2017/better-off-using-exceptions.html</guid><category>fsharp</category><category>software development</category><category>rust</category><category>functional programming</category></item><item><title></title><link>http://www.chriskrycho.com/2017/02-15-0832.html</link><description>&lt;p&gt;One of the biggest changes in my JavaScript from learning Rust/Elm/F‚ôØ/etc. is that I now think &lt;em&gt;constantly&lt;/em&gt; about what can fail.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 15 Feb 2017 08:32:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-02-15:/2017/02-15-0832.html</guid><category>programming languages</category><category>javascript</category><category>functional programming</category><category>rust</category><category>elm</category><category>fsharp</category></item><item><title></title><link>http://www.chriskrycho.com/2016/07-26-0808.html</link><description>&lt;p&gt;The more time I spend looking at F&lt;sup&gt;‚ôØ&lt;/sup&gt;, the more I like almost everything about it. The only pain point‚Ä¶ is that Microsoft foolishly choose to PascalCaseAllTheThings. üôÑ&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 26 Jul 2016 08:08:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-07-26:/2016/07-26-0808.html</guid><category>programming languages</category><category>fsharp</category></item><item><title></title><link>http://www.chriskrycho.com/2015/2015-10-17-1521.html</link><description>&lt;p&gt;This is interesting: I‚Äôve read some F‚ôØ before, but it reads a &lt;em&gt;lot&lt;/em&gt; more obviously to me now that I‚Äôve read a lot of Rust recently. Why? Because for all that they‚Äôre very different languages, both are ML descendants. It shows.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 17 Oct 2015 15:21:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-10-17:/2015/2015-10-17-1521.html</guid><category>programming languages</category><category>rust</category><category>fsharp</category></item></channel></rss>