<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Chris Krycho</title><link href="http://www.chriskrycho.com/" rel="alternate"></link><link href="http://www.chriskrycho.com/feeds/tech.xml" rel="self"></link><id>http://www.chriskrycho.com/</id><updated>2016-03-26T00:00:00-04:00</updated><entry><title>Ulysses, Byword, and “Just Right”</title><link href="http://www.chriskrycho.com/2016/ulysses-byword-and-just-right.html" rel="alternate"></link><updated>2016-03-26T00:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-26:2016/ulysses-byword-and-just-right.html</id><summary type="html">&lt;p&gt;I’m trying out Ulysses again, as it’s been updated substantially since I last used it. I think the main thing to say about it is that it’s gorgeous and a really great editor, and that there is nonetheless something about it which makes it feel not quite as &lt;em&gt;fluid&lt;/em&gt; as Byword always has.&lt;/p&gt;
&lt;p&gt;Neither of them quite &lt;em&gt;nails&lt;/em&gt; it for my purposes, though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neither is quite there for text that includes a lot of code samples. (Basically: neither supports the GitHub variations on Markdown, which are incredibly important for &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;a lot of my writing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Neither has the ability to do things like autocompletion of citations from something like BibLatex. (No standalone app does, to my knowledge.)&lt;/li&gt;
&lt;li&gt;Ulysses’ most powerful features only work in its iCloud bucket. And they’re not standard: rather than embracing &lt;a href="http://criticmarkup.com"&gt;CriticMarkup&lt;/a&gt; for comments, they have their own. The same is true of e.g. their code blocks.&lt;/li&gt;
&lt;li&gt;Ulysses &lt;em&gt;converts&lt;/em&gt; any other Markdown documents to its own custom variant when you open them. Had those documents formatted a way you liked (e.g. with specific kinds of link or footnote formatting)? Don’t expect them to still be that way.&lt;/li&gt;
&lt;li&gt;Byword really does one thing well: opening and writing single documents. It does this extremely well, but it also has none of the library management that is useful for larger projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these apps are really wonderful in many ways, and I think it’s fair to say that they’re &lt;em&gt;perfect&lt;/em&gt; for many writers. &lt;a href="http://jaimiekrycho.com/"&gt;My wife&lt;/a&gt;, for example, does nearly all her fiction writing in Ulysses; it works wonderfully for her. But for the kinds of writing I do—usually technical in one way or another—it is limited in its utility. That’s not really a critique of the apps. It’s more the recognition that I have some pretty unusual requirements of my writing apps.&lt;/p&gt;
&lt;p&gt;That said, I don’t think I’m the only person out there who has these particular needs. I am, for example, hardly the only person working with citations and academic text, or writing Markup with lots of code samples in it. And as much as you can bend general-purpose text editors like &lt;a href="https://atom.io"&gt;Atom&lt;/a&gt; to your will,&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; it’s not the same as a dedicated writing app that focuses—in the ways that Ulysses and Byword both do—on just being a great tool for &lt;em&gt;writing&lt;/em&gt;. Writing and writing &lt;em&gt;code&lt;/em&gt; are not the same, after all. A tool that’s really well-optimized for the latter isn’t necessarily well-optimized for the former.&lt;/p&gt;
&lt;p&gt;Keep your ears open. You might just be hearing more about this in the future.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Trust me, I have: I have Zen mode installed, a custom Byword-like theme I use when I just want to write, and even a citation autocompletion package integrated with it. It’s not bad. But I still don’t love it as a first-choice &lt;em&gt;writing&lt;/em&gt; tool.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="design"></category><category term="software development"></category><category term="writing"></category></entry><entry><title>Rust and Swift (xv)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xv.html" rel="alternate"></link><updated>2016-03-12T14:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-12:2016/rust-and-swift-xv.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The next chapter in the Swift book focuses on &lt;em&gt;inheritance&lt;/em&gt;, a concept which does not yet exist in Rust.&lt;/p&gt;
&lt;p&gt;Swift embraces classical inheritance for &lt;code&gt;class&lt;/code&gt; data types. As noted &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;previously&lt;/a&gt;, Rust’s &lt;code&gt;struct&lt;/code&gt; covers much of the ground covered by Swift’s &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; types together (value and reference types, etc.). However, what Swift’s &lt;code&gt;class&lt;/code&gt; types bring to the table is inheritance-based (and not just composition-based) extension of types.&lt;/p&gt;
&lt;p&gt;This is a bit of an interesting point: it is an area where, &lt;em&gt;as of today&lt;/em&gt;, Swift can do something that is flat impossible in Rust—a rarity.&lt;/p&gt;
&lt;p&gt;However, the &lt;em&gt;status quo&lt;/em&gt; will be changing sometime in the next year or so, as there is a &lt;a href="https://github.com/rust-lang/rfcs/pull/1210"&gt;Rust RFC&lt;/a&gt; which has been accepted and is in the process of being implemented which paves the way for inheritance. (Discussions are &lt;a href="https://aturon.github.io/blog/2015/09/18/reuse/"&gt;ongoing&lt;/a&gt; as to the best way to implement it for Rust. Classical inheritance with vtables as in Swift is probably &lt;em&gt;not&lt;/em&gt; going to be the approach.)&lt;/p&gt;
&lt;p&gt;The reason Rust’s core team chose to proceed without inheritance for the 1.0 release of the language last May is simple: at a philosophical level, they prefer (as in general most developers increasingly acknowledge that we should all prefer) composition over inheritance. &lt;em&gt;Prefer&lt;/em&gt;, not &lt;em&gt;universally choose&lt;/em&gt;, because there are situations in which inheritance is the correct choice. But there is a reason that programming with interfaces rather than via sub-classing is a “best practice” for many scenarios in languages like Java or C#.&lt;/p&gt;
&lt;p&gt;Rust’s &lt;code&gt;trait&lt;/code&gt; system gives you &lt;em&gt;composition&lt;/em&gt; in some remarkably powerful ways, allowing you to do things that in C++, for example, have to be accomplished via a combination of inheritance and overloading. Swift, likewise, supplies a &lt;code&gt;protocol&lt;/code&gt; system and allows extensions to define further behavior on top of existing data structures. From what I’ve gathered, those approaches are preferred over inheritance in Swift for the same reason Rust shipped 1.0 without it!&lt;/p&gt;
&lt;p&gt;But Swift does have inheritance, so it’s worth seeing how it works.&lt;/p&gt;
&lt;p&gt;First, any &lt;code&gt;class&lt;/code&gt; which doesn’t declare a parent from which to inherit is a base class. This is an important difference from, say, Python, where all classes inherit from &lt;code&gt;Object&lt;/code&gt; (leaving aside custom metaclasses).&lt;/p&gt;
&lt;p&gt;The syntax choices Swift has made around sub-class declarations are sensible and readable: &lt;code&gt;class SubClass: ParentClass&lt;/code&gt; is eminently readable and doesn’t have any obvious points of overlap with other elements in the language.&lt;/p&gt;
&lt;p&gt;Indeed, &lt;em&gt;many&lt;/em&gt; of the choices made around classes are quite sensible. Overrides, for example, are made explicit via the &lt;code&gt;override&lt;/code&gt; keyword. While I’ve sometimes poked fun at Swift’s tendency to add keywords everywhere, this seems like a reasonable place to have one, and it’s nice that overrides are explicit rather than implicit. The same is true of the use of &lt;code&gt;super&lt;/code&gt; to refer to the superclass. I’m not sure of the implementation details, but &lt;code&gt;super&lt;/code&gt; &lt;em&gt;appears&lt;/em&gt; to act as just a special/reserved name for an object: all the syntax around it is normal object instance syntax, which is as it should be.&lt;/p&gt;
&lt;p&gt;The limitations around overriding properties all make sense. You can override a read- or write-only parent property as both readable and writable, but you can’t override a readable or writable property &lt;em&gt;not&lt;/em&gt; to be readable or writable respectively. Presumably this is because the method lookup for properties always checks up the inheritance chain for getters or setters, so if one is present, you can’t just get rid of it. (You could of course override with a no-op function that spews a warning or some such, but that would pretty clearly be an abuse of the parent API. There might be times you would do that with a third-party library parent class, but in your own code it should be avoided: it indicates a problem in your API design that you need to address instead.)&lt;/p&gt;
&lt;p&gt;Finally, we have Swift’s &lt;code&gt;final&lt;/code&gt; keyword—and yes, pun intended. It marks whatever block-level item it is attached to—whether class, method, or property—as non-overridable. Attempts to override an item marked final are compile-time failures. (The same kind of thing exists in Java and C#.) In and of itself, this isn’t especially interesting. It is interesting to ponder whether you should make classes subclass-able or not in your API design. There has been &lt;a href="http://mjtsai.com/blog/2015/12/21/swift-proposal-for-default-final/"&gt;an active debate&lt;/a&gt;, in fact, whether classes in Swift should become final &lt;em&gt;by default&lt;/em&gt; in Swift 3.0, rather than open by default. The debate centers on the danger of unintended consequences of overriding, which ultimately takes us back around to the preference for composition, of course.&lt;/p&gt;
&lt;p&gt;All of this, among other things, raises the very interesting question of what this will look like in Rust when, eventually, we get inheritance there. After all, we know it will be quite different in some ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It presumably won’t involve a distinct data type constructor, &lt;em&gt;a la&lt;/em&gt; Swift’s distinction between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;: there may be syntactic sugar involved, and there will definitely be new functionality present, but it will certainly be built on the existing language features as well. There’s a good chance it will basically &lt;em&gt;look&lt;/em&gt; like just a special case of &lt;code&gt;impl SomeTrait for SomeStruct&lt;/code&gt;, which would fit very well with the ways Rust solves so many other problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust doesn’t have many of the things which Swift takes care to special-case for overriding with &lt;code&gt;final&lt;/code&gt;, but it will need to address that case for inherited methods and data in some way. (The proposal linked above uses a distinction between &lt;code&gt;default&lt;/code&gt; and blanket implementations for trait specialization to pull this off; if those words don’t mean anything to you, don’t worry: I’ve read that post and RFC half a dozen times before I got a really solid handle on all the pieces involved.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will be a relative latecomer to the language, rather than baked in from the start, and therefore will likely seem a secondary way of solving problems, especially at first. (This is, I think, both intentional and good.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiv.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Indexing and subscripts, or: traits vs. keywords again.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>Rust and Swift (xiv)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xiv.html" rel="alternate"></link><updated>2016-03-10T21:25:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-10:2016/rust-and-swift-xiv.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Rust and Swift both support defining subscript access to a given data type, like &lt;code&gt;SomeType[accessedByIndex]&lt;/code&gt;. Unsurprisingly, given &lt;a href="/rust-and-swift.html"&gt;everything we’ve seen so far&lt;/a&gt;, Rust does this with traits, and Swift with a keyword.&lt;/p&gt;
&lt;p&gt;In Rust, you can define subscript-style access to a type by implementing the &lt;code&gt;Index&lt;/code&gt; and/or &lt;code&gt;IndexMut&lt;/code&gt; traits, which allow &lt;em&gt;indexing&lt;/em&gt; into a given location in a kind of type. The implementation simply requires one function, which is called when you use the &lt;code&gt;[]&lt;/code&gt; operator. That function, &lt;code&gt;index&lt;/code&gt; or &lt;code&gt;index_mut&lt;/code&gt;, implements how to do the lookup for the specific type. The &lt;code&gt;impl&lt;/code&gt; block indicates not only that &lt;code&gt;Index&lt;/code&gt; or &lt;code&gt;IndexMut&lt;/code&gt; is being implemented, but also the type of the &lt;em&gt;key&lt;/em&gt; used: &lt;code&gt;impl Index&amp;lt;Bar&amp;gt; for Foo { ... }&lt;/code&gt;, where access would look like &lt;code&gt;a_foo[some_bar]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The two kinds of traits and corresponding methods define the behavior for immutable and mutable data type, as their name suggest.&lt;/p&gt;
&lt;p&gt;Since the trait is defined generically, you can implement whatever kinds of accessors you like to the same underlying data structure, including generics accessors with trait bounds.&lt;/p&gt;
&lt;p&gt;It is perhaps telling that in Rust you just find these traits in the general &lt;code&gt;std::ops&lt;/code&gt; module, where all the core language operations and associated operators are defined. Rust doesn’t do “operator overloading” so much as it simply provides operators as one more class of trait potentially applicable to your type. (The family resemblance to Haskell’s type classes and similar in other languages is obvious.)&lt;/p&gt;
&lt;p&gt;In Swift, you define indexing behavior with the &lt;code&gt;subscript&lt;/code&gt; keyword. Subscripts act very similarly to Swift’s &lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html"&gt;computed properties&lt;/a&gt;. They can be made read- or write-only by including or excluding &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; function definitions, just like computed properties.&lt;/p&gt;
&lt;p&gt;The behavior is in fact so closely aligned with the computed property syntax and behavior that I initially wondered if it wasn’t just a special case. It is not (though I’m sure much of the parsing machinery can be shared). As the designation of &lt;code&gt;subscript&lt;/code&gt; as a keyword strongly implies, and unlike in Rust, this is a separate language construct, not building on existing language machinery.&lt;/p&gt;
&lt;p&gt;Swift, like Rust, allows you to define arbitrary accessors. However, since the behavior relies on the &lt;code&gt;subscript&lt;/code&gt; construct rather than generics and protocols (Swift’s equivalent to Rust’s traits), you define different kinds of accessors via multiple &lt;code&gt;subscript&lt;/code&gt; blocks. (Presumably these could take generic arguments, but I haven’t tested that to be sure.)&lt;/p&gt;
&lt;p&gt;Both languages proceed to use these as ways of accessing types as makes sense—e.g. for not only arrays or vectors, but also dictionaries in Swift and &lt;code&gt;HashMap&lt;/code&gt; types in Rust.&lt;/p&gt;
&lt;p&gt;Since you can define the behavior yourself, you can also use complex types as keys. The languages approach this a bit differently, though. In Rust, if you wanted a compound key, you would need to define either a simple container &lt;code&gt;struct&lt;/code&gt; or use a tuple as the argument. In Swift, because it uses the same basic syntax as computed properties, you can just define as many method arguments, of whatever type, as you want.&lt;/p&gt;
&lt;p&gt;Takeaway: Rust uses traits; Swift uses a keyword. We probably could have guessed that when we started, at this point!&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Methods, instance and otherwise.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xv.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Inheritance: a Swiftian specialty (for now).&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>The Future of JavaScript</title><link href="http://www.chriskrycho.com/2016/the-future-of-javascript.html" rel="alternate"></link><updated>2016-03-02T12:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-02:2016/the-future-of-javascript.html</id><summary type="html">&lt;p&gt;I gave a short tech talk at my new employer &lt;a href="http://www.olo.com"&gt;Olo&lt;/a&gt; today, covering a number of the changes current and forthcoming in ECMAScript 2015 and later. Alas, I ran out of time in preparation and didn’t get to cover everything I wanted—I would have liked very much to cover modules, and to cover fat-arrow-functions in more depth than I did. I’ll look forward to hopefully giving further tech talks at Olo in the future, and perhaps giving this one, expanded and finished out a bit, elsewhere. (If you’d like me to give a talk, including this one, just let me know!) In the meantime, you can take a look at the &lt;a href="//www.chriskrycho.com/talks/es-future-olo"&gt;slides&lt;/a&gt;, which I think will be helpful and interesting!&lt;/p&gt;
&lt;p&gt;And yes, there &lt;em&gt;were&lt;/em&gt; a lot of really delightful &lt;em&gt;Doctor Who&lt;/em&gt; references in this talk. Because &lt;em&gt;of course&lt;/em&gt; there were!&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="talks"></category><category term="software development"></category><category term="programming languages"></category><category term="javascript"></category></entry><entry><title>Static Site Generators and Podcasting</title><link href="http://www.chriskrycho.com/2016/static-site-generators-and-podcasting.html" rel="alternate"></link><updated>2016-02-28T12:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-02-28:2016/static-site-generators-and-podcasting.html</id><summary type="html">&lt;p&gt;Presently, I publish both &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt; and &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt;&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; using what is admittedly a bit of a quirky approach. It works well for me, and I think it’s worth documenting for other nerdy types out there, but if you’re just getting going with podcasting and you’re looking for the easy way to do it, let me warn you: &lt;em&gt;this isn’t it&lt;/em&gt;. Something like &lt;a href="https://soundcloud.com/for/podcasting"&gt;SoundCloud&lt;/a&gt; and a blog for show notes, or &lt;a href="https://wordpress.org"&gt;WordPress&lt;/a&gt; with &lt;a href="https://wordpress.org/plugins/powerpress/"&gt;Blubrry PowerPress&lt;/a&gt; is what you want instead. This approach works &lt;em&gt;extremely&lt;/em&gt; well for statically-generated sites, however, and I imagine a few people out there might find it useful.&lt;/p&gt;
&lt;section id="the-short-version" class="level2"&gt;
&lt;h2&gt;The short version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generate the feeds with &lt;a href="http://reinventedsoftware.com/feeder/"&gt;Feeder&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Generate the site statically with something else (and it &lt;em&gt;really&lt;/em&gt; doesn’t matter what).&lt;/li&gt;
&lt;li&gt;Copy the feed into the generated site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="the-long-version" class="level2"&gt;
&lt;h2&gt;The long version&lt;/h2&gt;
&lt;p&gt;I generate the sites themselves with &lt;a href="http://docs.getpelican.com/en/3.6.3/"&gt;Pelican&lt;/a&gt; and &lt;a href="http://www.newrustacean.com/show_notes/e001/index.html"&gt;&lt;code&gt;cargo doc&lt;/code&gt;&lt;/a&gt;, respectively. I was already comfortable with Pelican because it’s what I use to generate &lt;em&gt;this&lt;/em&gt; site (with a few &lt;a href="https://github.com/chriskrycho/chriskrycho.com/blob/master/pelicanconf.py"&gt;tweaks&lt;/a&gt; to the standard configuration, especially using &lt;a href="http://pandoc.org/"&gt;Pandoc&lt;/a&gt; rather than the Python Markdown implementation), so I ran with it for building the Winning Slowly site, and it has worked quite well for building the site itself. It just gets built locally and deployed via &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, it does not have built-in support for generating &lt;a href="https://en.wikipedia.org/wiki/RSS_enclosure"&gt;podcast feeds&lt;/a&gt;, even just the general case with enclosures. &lt;a href="https://itunespartner.apple.com/en/podcasts/overview"&gt;iTunes podcast support&lt;/a&gt; would have taken a lot of work to add.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Instead, I chose to build the RSS feed semi-manually. &lt;em&gt;Semi&lt;/em&gt;-manually, because doing it totally manually is a recipe for making mistakes. XML is many things, but “easy to write correctly by hand” is not one of them. I use &lt;a href="http://reinventedsoftware.com/feeder/"&gt;Feeder&lt;/a&gt; to manage the feeds, and &lt;em&gt;it&lt;/em&gt; makes sure that the enclosure and iTunes elements are set correctly.&lt;/p&gt;
&lt;p&gt;The biggest upside to this is that I can use Pelican without modification to how it generates feeds (apart from optionally turning them off entirely). It just &lt;a href="https://github.com/WinningSlowly/winningslowly.org/blob/master/pelicanconf.py#L99"&gt;copies&lt;/a&gt; the feed I generate to the output file during its normal build process. As suggested above, I also &lt;em&gt;don’t&lt;/em&gt; generate the other feeds which Pelican supports, as we have no need for them; we only care about the podcast feed.&lt;/p&gt;
&lt;p&gt;This process works equally well, with very little modification, for New Rustacean. In that case, I’m generating the content by running Rust’s documentation tool, &lt;code&gt;cargo doc&lt;/code&gt;&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; to render the “API docs” which serve as show notes. Notice the family resemblance between &lt;a href="http://www.newrustacean.com/show_notes/"&gt;my “show notes”&lt;/a&gt; and, say, the &lt;a href="http://sgrif.github.io/diesel/diesel/index.html"&gt;Diesel docs&lt;/a&gt;, which are both generated the same way. This is &lt;em&gt;not&lt;/em&gt; a normal way of building a podcast website; you can hear me explain why I did it this way in &lt;a href="http://www.newrustacean.com/show_notes/e001/index.html"&gt;New Rustacean e001: Document all the things!&lt;/a&gt; In any case, I just take the show note-relevant parts of the documentation and put it in Feeder, generate the feed, and &lt;a href="https://github.com/chriskrycho/newrustacean.com/blob/master/Makefile#L32"&gt;copy that as part of the build process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;And, incidentally, &lt;a href="http://www.sap-py.com"&gt;Sap.py&lt;/a&gt; and my &lt;a href="http://www.chriskrycho.com/sermons.xml"&gt;sermons&lt;/a&gt; feed.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;If I stick with Pelican long-term, I might look into adding it anyway, but honestly, I don’t love Pelican. The reasons have little to do with Pelican for itself, and a lot more to do with my particular and somewhat peculiar needs. That’s a post for another day. In any case, I’m likelier to use another generator—even one I write myself!—than to do the work to make Pelican do what I want.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Technically, Rust’s documentation tool is &lt;code&gt;rustdoc&lt;/code&gt;, which &lt;code&gt;cargo doc&lt;/code&gt; wraps around. I never actually use &lt;code&gt;rustdoc&lt;/code&gt; directly, though.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category><category term="podcasting"></category><category term="python"></category><category term="rust"></category></entry><entry><title>Rust and Swift (xiii)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xiii.html" rel="alternate"></link><updated>2016-03-06T13:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-02-28:2016/rust-and-swift-xiii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Rust and Swift both have methods which are attached to given data types. However, whereas Rust takes its notion of separation of data and functions rather strictly, Swift implements them on the relevant data structures (classes, structs, or enums) directly. In other words, the implementation of a given type’s methods is within the body of the type definition itself in swift, whereas in Rust it is in an &lt;code&gt;impl&lt;/code&gt; block, usually but not always immediately adjacent in the code.&lt;/p&gt;
&lt;p&gt;This goes to one of the philosophical differences between the two languages. As we’ve discussed often in the series, Rust reuses a smaller set of concepts—language-level primitives—to build up its functionality. So methods on a type and methods for a trait on a type are basically the same thing in Rust; they’re defined in almost exactly the same way (the latter includes &lt;code&gt;for SomeTrait&lt;/code&gt; in the &lt;code&gt;impl&lt;/code&gt; expression). In Swift, a method is defined differently from a protocol definition, which we’ll get to in the future. The point is simply this: the two take distinct approaches to the relationship between a given type definition and the implementations of any functions which may be attached to it.&lt;/p&gt;
&lt;p&gt;Another important difference: access to other members of a given data type from within a method is &lt;em&gt;explicit&lt;/em&gt; in Rust and &lt;em&gt;implicit&lt;/em&gt; in Swift. In Rust, the first parameter to an instance method is always &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;&amp;amp;self&lt;/code&gt; (or a mutable version of either of course), much as in Python. This explicitness distinction is by now exactly what we expect from the two languages.&lt;/p&gt;
&lt;p&gt;Both use dot notation, in line with most other languages with a C-like syntax, for method calls, e.g. &lt;code&gt;instance.method()&lt;/code&gt; in Swift and &lt;code&gt;instance.method()&lt;/code&gt; in Rust. The latter is just syntactical sugar for &lt;code&gt;T::method(&amp;amp;instance)&lt;/code&gt; or &lt;code&gt;T::method(instance)&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is the type of the instance (depending on whether the item is being borrowed or moved). Given its implicit knowledge of/access to instance-local data, and the distinctive behavior of Swift methods (see below), I don’t &lt;em&gt;think&lt;/em&gt; the same is, or even could be, true of Swift.&lt;/p&gt;
&lt;p&gt;All of Swift’s &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html"&gt;other behaviors around functions&lt;/a&gt;—internal and external names, and all the distinctions that go with those—are equally applicable to methods. Similarly, with the sole change that the first parameter is always the instance being acted on, a Rust methods follow all the same rules as ordinary Rust functions (which is why you can call the struct or enum method with an instance parameter as in the example above).&lt;/p&gt;
&lt;p&gt;Swift does &lt;em&gt;have&lt;/em&gt; a &lt;code&gt;self&lt;/code&gt;—it is, of course, implicit. It’s useful at times for disambiguation—basically, when a parameter name shadows an instance name. This will look familiar to people coming from Ruby.&lt;/p&gt;
&lt;p&gt;The strong distinction Swift makes &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;between reference and value types&lt;/a&gt; comes into play on methods, as you might expect, as does its approach to mutability. Methods which change the values in value types (&lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;enum&lt;/code&gt; instances) have to be declared &lt;code&gt;mutating func&lt;/code&gt;. This kind of explicit-ness is good. As we discussed in &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;Part 10&lt;/a&gt;, Rust approaches this entire problem differently: types are not value or reference types; they are either mutable and passed mutably (including as &lt;code&gt;mut self&lt;/code&gt; or &lt;code&gt;&amp;amp;mut self&lt;/code&gt;), or they are not. If an instance is mutable and passed mutably, a method is free to act on instance data. And in fact both languages require that the instance in question not be immutable. In fact, everything we said in Part 10 about both languages applies here, just with the addendum that private properties are available to methods.&lt;/p&gt;
&lt;p&gt;The distinction, you’ll note, is in where the indication that there’s a mutation happens. Swift has a special keyword combination (&lt;code&gt;mutating func&lt;/code&gt;) for this. With Rust, it’s the same as every other function which mutates an argument. This makes Rust slightly more verbose, but it also means that in cases like this, the existing language tooling is perfectly capable of handling what has to be a special syntactical case in Swift.&lt;/p&gt;
&lt;p&gt;Both Swift and Rust let you out-and-out change the instance by assigning to &lt;code&gt;self&lt;/code&gt;, albeit in fairly different ways. In Swift, you’d write a mutating method which updates the instance proper like this:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Point {
    var x = 0.0, y = 0.0
    mutating func changeSelf(x: Double, y: Double) {
        self = Point(x: x, y: y)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, you’d need to explicitly pass a mutable reference and dereference it. (If you tried to pass &lt;code&gt;mut self&lt;/code&gt; instead of &lt;code&gt;&amp;amp;mut self&lt;/code&gt;, it would fail unless you returned the newly created object and assigned it outside.) Note that while the full implementation here is a couple lines longer, because of the data-vs.-method separation discussed earlier, the implementation of the method itself is roughly the same length.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;pub struct Point {
    pub x: f64,
    pub y: f64,
}

impl Point {
    pub fn change_self(&amp;amp;mut self, x: i32, y: i32) {
        *self = Point { x: x, y: y };
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that though you &lt;em&gt;can&lt;/em&gt; do this, I’m not sure it’s particularly Rustic. My own instinct would be to get a &lt;em&gt;new&lt;/em&gt; &lt;code&gt;Point&lt;/code&gt; rather than mutate an existing one, in either language, and let the other be cleaned up “behind the scenes” as it were (with automatic memory management in Swift or the compiler’s automatic destruction of the type in Rust)—purer functions being my preference these days.&lt;/p&gt;
&lt;p&gt;You can do this with &lt;code&gt;enum&lt;/code&gt; types as well, which the Swift book illustrates with a three-state switch which updates the value type passed to a new value when calling its &lt;code&gt;next()&lt;/code&gt; method. You can do the same in Rust, with the same reference/dereference approach as above.&lt;/p&gt;
&lt;p&gt;Here’s a three-state switch in Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;enum ThreeState {
    case First, Second, Third
    mutating func next() {
        switch self {
        case First:
            self = Second
        case Second:
            self = Third
        case Third
            self = First
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the same in Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;enum ThreeState { First, Second, Third }
impl ThreeState {
    pub fn next(&amp;amp;mut self) {
        match *self {
            ThreeState::First =&amp;gt; *self = ThreeState::Second,
            ThreeState::Second =&amp;gt; *self = ThreeState::Third,
            ThreeState::Third =&amp;gt; *self = ThreeState::First,
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both languages also have what Swift calls “type methods”, and which you might think of as “static class methods” coming from a language like Java or C♯. In Swift, you define them by adding the &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; keywords to the &lt;code&gt;func&lt;/code&gt; definition. The &lt;code&gt;class func&lt;/code&gt; keyword combo is only applicable in &lt;code&gt;class&lt;/code&gt; bodies, and indicates that sub-classes may override the method definition.&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Bar {
    static func quux() { print(&amp;quot;Seriously, what&amp;#39;s a `quux`?&amp;quot;) }
}

func main() {
    Bar.quux()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, you simply drop &lt;code&gt;self&lt;/code&gt; as a first parameter and call it with &lt;code&gt;::&lt;/code&gt; syntax instead of &lt;code&gt;.&lt;/code&gt; syntax:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Bar;
impl Bar {
    pub fn quux() { println!(&amp;quot;Seriously, what&amp;#39;s a `quux`?&amp;quot;); }
}

fn main() {
    Bar::quux();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As usual, Rust chooses to use existing language machinery; Swift uses new (combinations of) keywords.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Properties: type and instance, stored and computed.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiv.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Indexing and subscripts, or: traits vs. keywords again.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (xii)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html" rel="alternate"></link><updated>2016-02-27T22:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-02-27:2016/rust-and-swift-xii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class="editorial"&gt;A note on publication: I had this drafted in early January and simply forgot to publish it. Whoops!&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As noted in &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;my discussion of the product types in Rust and Swift&lt;/a&gt;, Swift distinguishes between classes and structs, with the former being reference types and the latter being value types. All structs are value types in Rust. (That you can wrap them in a pointer for heap-allocation with one of the smart pointer types, e.g. &lt;code&gt;Box&lt;/code&gt; or &lt;code&gt;Rc&lt;/code&gt; or &lt;code&gt;Arc&lt;/code&gt;, doesn’t change this fundamental reality.) This underlying difference gives rise to one the big difference between Swift classes and Rust structs: a constant &lt;code&gt;class&lt;/code&gt; instance in Swift can still have its fields mutated; not so with a Rust &lt;code&gt;struct&lt;/code&gt; instance. But also not so with a &lt;em&gt;Swift&lt;/em&gt; &lt;code&gt;struct&lt;/code&gt; instance, as it turns out! There isn’t a straightforward way to do this with &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; in Rust; you &lt;em&gt;could&lt;/em&gt; do it with something like an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;, though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s &lt;code&gt;lazy&lt;/code&gt; keyword, and associated delayed initialization of properties has, as far as I know, no equivalent whatsoever in Rust. And while I can see the utility in principle, I’m hard-pressed to think of any time in my working experience where the behavior would actually be useful. Rather than having &lt;code&gt;lazy&lt;/code&gt; properties, I would be far more inclined to separate the behavior which should be initialized at a later time into its own data structure, and supplying it via &lt;em&gt;inversion of control&lt;/em&gt; if it is necessary for an actions taken by other data structures. (This seems—at first blush at least—to be a way of supporting the un- or partially-initialized data types possible in Objective C?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift has computed properties, a concept familiar to Python developers (and relatively recently introduced in JavaScript). These can e quite handy, as they let you define a property to be accessed like any other (&lt;code&gt;someInstance.theProperty&lt;/code&gt;) while being defined with functions which compute the value dynamically. A common, trivial example: if you defined a &lt;code&gt;Person&lt;/code&gt; with &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; members, you could define a computed property, &lt;code&gt;fullName&lt;/code&gt;, which was built using the existing values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust doesn’t have computed properties at all. This is because of its design decision to deeply separate &lt;em&gt;data&lt;/em&gt; from &lt;em&gt;behavior&lt;/em&gt;, essentially stealing a page from more pure-functional languages (Haskell etc.). This is (one reason) why you don’t define the implementation of a &lt;code&gt;struct&lt;/code&gt; method in the same block as the members of the struct. See an excellent explanation &lt;a href="https://www.reddit.com/r/rust/comments/2uvfic/why_doesnt_rust_have_properti%20es/cocmunq"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s also closely related the way Rust favors composition over inheritance (by making the latter impossible, at least for now!). By separating &lt;code&gt;impl&lt;/code&gt; from &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;enum&lt;/code&gt;, Rust makes it not only straightforward but &lt;em&gt;normal&lt;/em&gt; to define new behavior for a given item separately from the data description. This, combined with the use of traits (like Swift’s protocols) as the primary way of sharing behavior between objects, means that you don’t have to worry about conforming to some interface when you define a given type; it can always&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; be defined later, even by entirely other modules or even other crates (packages).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In any case, the result is that it’s not at all Rustic&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; to have something like getters or setters or computed properties. It makes sense to have them in Swift, though, which has a more traditionally object-oriented type system (though with some neat additions in the form of its &lt;code&gt;protocol&lt;/code&gt; type classes, which are analogous to Rust’s &lt;code&gt;trait&lt;/code&gt;s—but we’ll come to those in a future post). This is a wash: it’s just a function of the slightly different approaches taken in object design in the two systems. If you have a Swift-style type system, you should have computed properties. If you have a Rust-like type system, you shouldn’t.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m shocked—utterly shocked!—to find that Swift provides a default &lt;code&gt;newValue&lt;/code&gt; argument for setters for computed properties, and shorthand for defining read-only properties. By which I mean: I find this kind of thing entirely unsurprising at this point in Swift, but I don’t like it any better. Making so much implicit just rubs me the wrong way. Once you know the language, it’s fine of course: you’ll recognize all the patterns. It just seems, in an interesting way, to add cognitive load rather than reducing it. That may just be me, though!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interestingly, Swift also allows you to set watchers on given properties—functions called with the new or the removed value whenever the value of the computed property is updated or touched for any reason. It has two of these built in: &lt;code&gt;willSet&lt;/code&gt; and &lt;code&gt;didSet&lt;/code&gt;. You can override these to get custom behavior when a normal property is about to change. (You can of course just implement the desired behavior yourself in the &lt;code&gt;set&lt;/code&gt; method for a computed property.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since Rust doesn’t have properties, it doesn’t have anything analogous. I can’t think of a particularly straightforward way to implement it, either, though you might be able do some chicanery with a trait. Of course you can always define a setter method which takes a value and optional callbacks for actions to take before and after setting the value; the thing that’s nice in Swift is that it gives you these as built-in capabilities within the language itself. (Now I’m wondering if or how you could implement an &lt;code&gt;Observable&lt;/code&gt; trait, though! Might have to play with that idea more later.) It’s worth remembering , in any case, that Rust doesn’t have these &lt;em&gt;because it doesn’t have properties&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Curiously, Swift provides the same functionality for “global” and “local” variables in a given context. In both cases, this is suggestive of the underlying object model for both modules and functions in Swift.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now I’m curious what the representation of a module is in Swift; is it part of the general object system in some way?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This likewise gets me asking: what &lt;em&gt;is&lt;/em&gt; a module in Rust? It’s a block item, clearly, and accordingly defines a scope (as do functions, if and match expressions, and so on). It’s &lt;em&gt;not&lt;/em&gt; a compilation unit (as it is in C or C++). What other machinery is attached to it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both of these questions can be answered by reading the source code for the languages (&lt;a href="https://github.com/rust-lang/rust"&gt;Rust&lt;/a&gt;, &lt;a href="https://github.com/apple/swift"&gt;Swift&lt;/a&gt;), of course. Putting that on my to-do list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift also has &lt;em&gt;type properties&lt;/em&gt;: values common to all instances of a given type. These are directly analogous to &lt;em&gt;class properties&lt;/em&gt; (or &lt;em&gt;class attributes&lt;/em&gt;) in Python or prototype properties in JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust doesn’t have anything like this to my knowledge. You could accomplish something similar using a module-level variable with a &lt;code&gt;'static&lt;/code&gt; lifetime,&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; much as you could in C—but that wouldn’t be an item on the type itself, of course.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;static&lt;/code&gt; declaration of item in Swift suggests what a possible implementation might look like in Rust: defining a member like &lt;code&gt;a_static_long: 'static i64&lt;/code&gt;. There might be some interesting challenges around that, though; I don’t know enough to comment meaningfully. At the least, it seems like it would be an odd fit with the rest of the memory management approach Rust takes, and it would make it a bit harder to reason correctly about the behavior of data in a given type. (There are certainly issues there around mutability guarantees and lifetime checking!)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because of the differences in underlying approach to data types and implementation, this is one of the areas where the superficially (and sometimes actually) similar languages diverge &lt;em&gt;a lot&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xi.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Hopes for the next generation of systems programming.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Methods, instance and otherwise.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;leaving aside details about &lt;code&gt;trait&lt;/code&gt; specialization &lt;a href="https://github.com/aturon/rfcs/blob/impl-specialization/text/0000-impl-specialization.md"&gt;still being hashed out&lt;/a&gt; in Rust&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;This is now my preferred term for “idiomatic Rust”—directly analogous to “Pythonic,” but with the upside of being an actual word, and one with pleasantly evocative connotations to boot.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;There’s nothing analogous to Rust’s concept of explicit lifetimes in Swift, as far as I can tell. The &lt;code&gt;static&lt;/code&gt; keyword in Swift, like that in C, Objective-C, and C++, is &lt;em&gt;sort of&lt;/em&gt; like Rust’s &lt;code&gt;'static&lt;/code&gt; lifetime specifically, for variables at least—but Rust’s lifetime is substantially more sophisticated and complex than that analogy might suggest.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="listicles"></category><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>“I Don't Know When I'd Use That”</title><link href="http://www.chriskrycho.com/2016/i-dont-know-when-id-use-that.html" rel="alternate"></link><updated>2016-01-17T10:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-01-17:2016/i-dont-know-when-id-use-that.html</id><summary type="html">&lt;p&gt;I was reading an interesting Stack Overflow &lt;a href="http://stackoverflow.com/questions/21170493/when-are-higher-kinded-types-useful"&gt;discussion&lt;/a&gt; of the value of &lt;a href="http://stackoverflow.com/questions/6246719/what-is-a-higher-kinded-type-in-scala"&gt;higher-kinded types&lt;/a&gt; (hereafter &lt;abbr&gt;HKTs&lt;/abbr&gt;), and noted someone repeatedly commenting, “But when would you use this in a &lt;em&gt;real app&lt;/em&gt;?” To put it the way another &lt;a href="https://m4rw3r.github.io/rust-and-monad-trait/"&gt;blog post&lt;/a&gt; about &lt;abbr&gt;HKTs&lt;/abbr&gt; (in Rust), they are “a feature people do not really know what to do with.”&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: I’m sympathetic to that desire for concrete examples. I’m interested in these kinds of things not primarily for their intellectual value but for their pragmatic value (though I don’t think those two are as distinct as many people do). I’d &lt;em&gt;also&lt;/em&gt; love to see some more real-world examples in those discussions. All too often, the discussions of types in Haskell end up being quite abstract and academic—no surprise, given the language’s origin. But I’m also aware that quite often it’s difficult to see how a given kind of abstraction is useful without jumping into a language which has that abstraction available and &lt;em&gt;using&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;People often get turned off by Haskell (and other similarly high-abstraction languages like Scala) because of challenging terms like &lt;em&gt;monad&lt;/em&gt;, &lt;em&gt;applicative&lt;/em&gt;, &lt;em&gt;functor&lt;/em&gt;, and so on. And again: I get that. To grok Haskell, you need to wrap your head around a lot of &lt;em&gt;math&lt;/em&gt; ideas—mainly various properties of &lt;em&gt;sets&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But I remember feeling the same way six years ago when I started playing with JavaScript and jQuery and every tutorial out there simply assumed existing familiarity and comfort with functions as arguments or return values. Coming from the world of Fortran and C, my head ached for weeks as I tried to make sense of what I was seeing. Even when I finally got it, &lt;em&gt;I didn’t like it&lt;/em&gt;. Over the last several years, though, I’ve become increasingly comfortable and even reliant on closures, composition of functions to transform data, and so on as I worked regularly in Python and JavaScript.&lt;/p&gt;
&lt;p&gt;That experience has taught me that my current inability to see the utility of a given abstraction means little about the abstraction. It’s primarily an indicator of my own inexperience.&lt;/p&gt;
&lt;p&gt;To the question of the utility &lt;abbr&gt;HKTs&lt;/abbr&gt; in general—in Haskell, Rust, or somewhere else—I don’t have the knowledge myself (yet) to supply a good answer. Heck, I can’t even &lt;em&gt;explain&lt;/em&gt; them very well. (&lt;a href="http://adriaanm.github.io/research/2010/10/06/new-in-scala-2.8-type-constructor-inference/"&gt;Other people can, though!&lt;/a&gt;) But I can say that reading &lt;a href="https://gumroad.com/l/maybe-haskell"&gt;&lt;em&gt;Maybe Haskell&lt;/em&gt;&lt;/a&gt; showed me clearly that such things can be very useful. Even if I am not yet comfortable using that tool, I see how learning to use it would be profitable in the long-term. And like any good tool, even if you don’t need it every day… when you want it, you &lt;em&gt;really&lt;/em&gt; want it.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="software development"></category><category term="programming languages"></category><category term="rust"></category><category term="haskell"></category></entry><entry><title>Women in Rust</title><link href="http://www.chriskrycho.com/2016/women-in-rust.html" rel="alternate"></link><updated>2016-01-10T15:25:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-01-10:2016/women-in-rust.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I posted these bullet points last night as a series of tweets on my &lt;a href="https://www.twitter.com/chriskrycho"&gt;main account&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686007510147309568"&gt;∞ January 9, 2016 21:11&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A thing I’d really, really like to see change—this is from the &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt; Twitter data. Unsurprising, but awful:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="//cdn.chriskrycho.com/images/new-rustacean-followers.png" alt="@newrustacean Twitter follower gender data" /&gt;&lt;figcaption&gt;&lt;a href="https://www.twitter.com/newrustacean"&gt;@newrustacean&lt;/a&gt; Twitter follower gender data&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686007729371148289"&gt;∞ January 9, 2016 21:12&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Takeaway: the &lt;a href="https://www.twitter.com/rustlang"&gt;@rustlang&lt;/a&gt; community has many strengths, but like every tech community, we need to improve here—a lot.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686008145752272896"&gt;∞ January 9, 2016 21:14&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Standing offer: if you’re a female &lt;a href="https://www.twitter.com/rustlang"&gt;@rustlang&lt;/a&gt; dev, I’d &lt;em&gt;love&lt;/em&gt; to feature your experience learning Rust on the show.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686008527937245185"&gt;∞ January 9, 2016, 21:15&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ll be doing some interview &lt;a href="https://www.twitter.com/newrustacean"&gt;@newrustacean&lt;/a&gt; episodes soon-ish—I want as many female voices in the mix as possible.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="podcasting"></category><category term="tweetstorm"></category><category term="rust"></category></entry><entry><title>Rust and Swift (xi)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xi.html" rel="alternate"></link><updated>2016-01-10T10:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-01-10:2016/rust-and-swift-xi.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I’ve still been (slowly) working through the Swift book and comparing Swift and Rust; I have another draft started which I’ll hopefully finish this week. And I still find the comparison deeply profitable. The two languages continue to evolve in interesting ways, and the comparison is all the more interesting &lt;a href="https://github.com/apple/swift"&gt;now that Swift is open-source&lt;/a&gt; and its future &lt;a href="https://github.com/apple/swift-evolution"&gt;open for community input&lt;/a&gt; (just as &lt;a href="https://github.com/rust-lang/rfcs"&gt;Rust is&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Something I’ve been thinking about for several months, and which the &lt;a href="https://overcast.fm/+CdSzsTIY/1:16:42"&gt;brief discussion of Swift, Go, and Rust&lt;/a&gt; at the end of the latest &lt;a href="http://atp.fm/episodes/151"&gt;Accidental Tech Podcast&lt;/a&gt; brought back to my mind, is the question of what the next generation of systems-level programming language should be. And my answer is: there shouldn’t be &lt;em&gt;just one&lt;/em&gt;. The best possible thing for the space, in many ways, is for there to be a healthy diversity of options and lots of competition in the space. We don’t want to have &lt;em&gt;ten&lt;/em&gt; different systems programming languages to deal with, I think—but three or four or five would be &lt;em&gt;much&lt;/em&gt; preferable to having one or two (closely related) as we have in the decades of C and C++ dominance.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: both languages (and perhaps especially C) do many things exceptionally well. For all that they are (justly) maligned for some of their problems, the longevity of both C and C++ has a great deal to do with how well they fit the problem domain, and how much they’ve empowered developers to accomplish within that space (which is very, &lt;em&gt;very&lt;/em&gt; large).&lt;/p&gt;
&lt;p&gt;The problem, though, at least as I see it, is that the existence of only two really serious systems programming languages for the last several decades has led a lot of developers to think that C and C++‘s ways of solving problems are the &lt;em&gt;only&lt;/em&gt; way to solve problems. The languages we use shape the way we think about possible solutions, and when a given language doesn’t recognize entire classes of different approaches, that deeply limits developers’ ability to tackle certain issues. (See also the interesting CppCast &lt;a href="http://cppcast.com/2015/10/andrei-alexandrescu/"&gt;interview with D’s Andrei Alexandrescu&lt;/a&gt; in which he makes similar points.)&lt;/p&gt;
&lt;p&gt;The most obvious thing missing from both is the ability to do truly functional-style programming. C of course is also lacking classes and thus is much more difficult to use for any sort of object-oriented programming.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Neither has anything remotely like Rust’s traits or Swift’s extensions; C++ has only gotten lambdas recently.&lt;/p&gt;
&lt;p&gt;All of this comes out to mean that the set of &lt;em&gt;tools&lt;/em&gt; available to systems programmer has necessarily been missing any number of things available in languages outside that context. In some cases, this may be a necessary consequence of the kinds of programming being done: when you need totally deterministic memory and compiler behavior, dynamic typing and a non-trivial runtime are simply not options. But in many cases, they are simply a function of the history of the languages’ development and history. Being an ALGOL descendant, and especially a C descendant, means there are some fundamental choices about the language which will differ from those made in a language descended from ML.&lt;/p&gt;
&lt;p&gt;All of which is to say: C and C++ have been really useful tools in many ways, but having &lt;em&gt;only&lt;/em&gt; C and C++ available for serious systems programming work over the last decades has left many developers blind to or simply unaware of the real advantages other paradigms might offer them.&lt;/p&gt;
&lt;p&gt;So going forward, I don’t want there to be &lt;em&gt;a winner&lt;/em&gt; in the systems programming space. I’d rather see D, Rust, Swift, Go, and maybe even a few other contenders all stay strong—finding their own niches and continually pushing each other and learning from each other. That will give us a space in which different languages are free to try out different approaches to the same problems, without being tied to the specific constraints faced by other languages. Built-in greenthreading? Go! Hindley-Milner types, memory safety, and zero runtime? Rust! Something in beween, highly expressive and with different type systems and tradeoffs around memory management, etc.? Swift, or D!&lt;/p&gt;
&lt;p&gt;Having a robust, thriving set of competitors in the market will be good for the languages themselves. But it will also be good for developers. It will take off some of the blinders that come from a single language (or a pair of very closely related languages) dominating the ecosystem. It will make it likelier that people will be more familiar with different programming paradigms. And that can only be a good thing, as far as I’m concerned.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Classes and structs (product types), and reference and value types.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Properties: type and instance, stored and computed.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;It is of course entirely possible to do non-classical OOP; the point is that C entirely lacks &lt;em&gt;language-level&lt;/em&gt; facilities for OOP, inheritance, etc.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming-languages"></category></entry><entry><title>Rust and Swift (x)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-x.html" rel="alternate"></link><updated>2015-12-22T13:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-12-06:2015/rust-and-swift-x.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Swift and Rust both have “product types” as well as the &lt;code&gt;enum&lt;/code&gt; “sum types.” In Rust, these are &lt;code&gt;struct&lt;/code&gt; types; Swift splits them into &lt;code&gt;class&lt;/code&gt;es and &lt;code&gt;struct&lt;/code&gt;s.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“Product types” will be much more familiar to programmers coming from a C-like background, or indeed most object-oriented programming languages: these are the same basic kind of thing as classes, structs, and objects in other languages. These include &lt;em&gt;all&lt;/em&gt; the value types which compose them, unlike sum types—&lt;code&gt;enum&lt;/code&gt;—which have &lt;em&gt;only one&lt;/em&gt; of the value types which compose them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Right off the bat, I note the Swift book’s somewhat amusing reticence to call out C and C-descended languages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike other programming languages, Swift does not require you to create separate interface and implementation files for custom classes and structures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because there’s such a long list of languages not directly descended from C which do that, right? 😉&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust differs not only from Swift but from every other modern language I have used in not having a constructor &lt;em&gt;syntax&lt;/em&gt; for its instantiations. Whereas C++ has &lt;code&gt;new NameOfType()&lt;/code&gt; and Python and Swift both have &lt;code&gt;NameOfType()&lt;/code&gt;, “constructors” for Rust &lt;code&gt;struct&lt;/code&gt;s are just functions which return an instance constructed using literal syntax, by convention &lt;code&gt;NameOfType::new()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let’s make a &lt;code&gt;struct&lt;/code&gt; defining a location in a plane, you might do this in Swift (leaving aside initializer values; I’ll come back to those later). These definitions look &lt;em&gt;very&lt;/em&gt; similar. Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Point {
    var x: Double var y: Double
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Point {
    x: f64,
    y: f64,
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating the types looks a little different, though. Here’s a constructor in Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;let point = Point(x: 0, y: 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the two ways we could construct the type in Rust, a literal constructor (fairly similar to constructing &lt;code&gt;dict&lt;/code&gt; literals in Python or object literals in JavaScript):&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let point = Point { x: 0.0, y: 0.0 };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or a constructor method, &lt;code&gt;new&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;// &amp;quot;Constructor&amp;quot;
impl Point {
    fn new(x: f64, y: f64) -&amp;gt; Point {
        Point { x: x, y: y }
    }
}

let another_point = Point::new(0, 0);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe: these two things in Rust are the same under the covers (though if &lt;code&gt;Point&lt;/code&gt;s had non-public internals, they would be non-trivially different: you couldn’t construct it with its private members externally). As usual, Rust opts to keep the language relatively small in these core areas. Given the plethora of ways you can construct something in e.g. C++, I count that a big win.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another difference: Swift has &lt;em&gt;syntax&lt;/em&gt; for default values; Rust uses a &lt;code&gt;trait&lt;/code&gt; instead. In Swift, you simply supply the default value in the definition of the &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Point {
    var x = 0.0 var y = 0.0
}

let point = Point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, you use &lt;code&gt;std::default::Default&lt;/code&gt;, which provides a standard value for a given type, and for simple types can be supplied by the compiler even for custom types. Here is the equivalent Rust code:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;use std::default::Default;

#[derive(Default)]
struct Point {
    x: f64,
    y: f64,
}

let point = Point::default();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is reasonable enough, but we can also supply our own custom implementation if we so desire:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;use std::default::Default;

struct Point {
    x: f64,
    y: f64,
}

impl Default for Point {
    fn default() -&amp;gt; Point {
        Point { x: 0.0, y: 0.0 }
    }
}

let point = Point::default();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, this is trivial for this type, but you can see how it could be useful for more complex types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The tradeoffs here are our usual suspects: Rust’s re-use of an existing concept/tool within the language (&lt;code&gt;trait&lt;/code&gt;) vs. Swift’s use of syntax. Rust is slightly more explicit, making it obvious that a default value is being created—but Swift is perfectly readable and the syntax is consistent with many other languages, and it &lt;em&gt;is&lt;/em&gt; shorter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages use &lt;code&gt;.&lt;/code&gt; syntax for member access. Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;println(&amp;quot;The point is: \(point.x), \(point.y)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;println!(&amp;quot;The point is {:}, {:}&amp;quot;, point.x, point.y);&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift lets you define items &lt;em&gt;within&lt;/em&gt; a struct as mutable or constant. So you can create a variable struct instance, with some of its items immutable:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct PointOnZAxis {
    var x: Double var y: Double let z = 0.0
}

var point = PointOnZAxis(x: 4.0, 5.0)
point.x = 5.0 point.y = 6.0
// This wouldn&amp;#39;t compile, though:
// point.z = 1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is pretty handy for a lot of object-oriented programming approaches.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And Rust doesn’t have it. There are ways to accomplish the same thing; this isn’t the end of the world. Still, it’s an interesting omission, and it’s very much by design. Rust &lt;em&gt;used&lt;/em&gt; to have this feature, and dropped it—and for good reason. Say you had a mutable field in a mutable struct, and then an immutable reference to it; should the mutable field be mutable, or immutable, with that reference?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Rusty way to do this is to differentiate between public and private data. The above examples don’t make the public/private distinction particularly clear, because they assume everything is within the same module. However, many times, this will not be the case.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;mod geometry {
    pub struct Point {
        x: f64,
        pub y: f64,
    }

    impl Point {
        pub fn new() -&amp;gt; Point {
            Point { x: 0.0, y: 0.0 }
        }

        pub fn set_x(&amp;amp;mut self, x: f64) {
            self.x = x;
        }
    }
}

fn main() {
    // Won&amp;#39;t compile: the `x` field is private.
    // let mut p = geometry::Point { x: 0.0, y: 0.0 };

    // Will compile: the `new` method is public.
    let mut p = geometry::Point::new();

    // Won&amp;#39;t compile: `x` isn&amp;#39;t public.
    // p.x = 4.0;
    // You can use the setter, though:
    p.set_x(4.0);

    // You *can* set `y` directly, though, because it&amp;#39;s public.
    p.y = 14.0;

    // You can&amp;#39;t set fields either way if the instance is immutable.
    let q = geometry::Point::new();

    // This fails because `set_x` requires a mutable reference, but `q` is
    // immutable.
    // q.set_x(4.0);

    // This fails because `q` is immutable, and so all its fields are, too.
    // q.y = 14.0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is an interesting way of handling this issue. Rust takes the fairly standard use of information hiding (one of the basic principles of most object-oriented programming techniques) and combines it with the language’s normal mutability rules to make it so that the mutability of any given instance data is quite clear: all public members are just as mutable as the struct. If a member isn’t potentially publicly mutable, it isn’t publicly accessible. I really like this, though it took some mental readjustment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s one other difference here, and it’s actually one of the areas Swift and Rust diverge substantially. Rust has &lt;code&gt;struct&lt;/code&gt; for all product types; Swift splits them into &lt;code&gt;struct&lt;/code&gt; types and &lt;code&gt;class&lt;/code&gt; types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift &lt;code&gt;class&lt;/code&gt;es have inheritance; there is presently &lt;em&gt;no&lt;/em&gt; inheritance in Rust.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, whereas Rust determines whether to use pass-by-reference or-value depending on details of the type (whether it implements the &lt;code&gt;Copy&lt;/code&gt; &lt;code&gt;trait&lt;/code&gt;) and expected arguments to a function, Swift makes that distinction between &lt;code&gt;class&lt;/code&gt; (pass-by-reference) and &lt;code&gt;struct&lt;/code&gt; (pass-by-value) types. Quirky.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not bad, &lt;em&gt;per se&lt;/em&gt;. But quirky.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I recently bumped into some discussion of data types in C♯ along with C, C++, and Java (&lt;a href="http://joeduffyblog.com/2015/12/19/safe-native-code/"&gt;here&lt;/a&gt;) and discovered that Swift is stealing this idea from C♯, which &lt;a href="https://msdn.microsoft.com/en-us/library/0taef578.aspx"&gt;makes the same copy/reference distinction&lt;/a&gt; between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One consequence of this: in Rust, you’re always rather explicit about whether you’re accessing things by value vs. by reference. Not so in Swift; you have to remember whether the item you’re touching is a &lt;code&gt;struct&lt;/code&gt; type or a &lt;code&gt;class&lt;/code&gt; type, so that you can &lt;em&gt;remember&lt;/em&gt; whether a given assignment or function call results in a reference or a copy. This is necessary because Swift doesn’t let you make that explicit (trying to hide the memory management from you). And it’s not alone in that, of course; many other high-level languages obscure that for convenience but still require you to think about it in certain circumstances. I’ve been bitten in the past by the value/reference distinction when thinking through the behavior of Python objects, for example, so that’s not a critique of Swift. Moreover, having the distinction between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; types does let you be &lt;em&gt;more&lt;/em&gt; explicit than you might in e.g. Python about how given data will be handled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I won’t lie, though: I like Rust’s approach better. (Shocking, I know.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All that nice initializer syntax for Swift &lt;code&gt;struct&lt;/code&gt; types is absent for its &lt;code&gt;class&lt;/code&gt; types, which seems strange to me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift supplies some syntax for object identity, since it’s useful to know not only whether two &lt;code&gt;class&lt;/code&gt; instances have the same data, but are in fact the same instance. You can use &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;. Handy enough. To get at this kind of equivalence in Rust, you have to use raw pointers (which are often but not always &lt;code&gt;unsafe&lt;/code&gt;; you can do this specific comparison &lt;em&gt;without&lt;/em&gt; being &lt;code&gt;unsafe&lt;/code&gt;, for example) to check whether the memory addresses are the same.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ix.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Sum types (&lt;code&gt;enum&lt;/code&gt;s) and more on pattern matching.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xi.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Hopes for the next generation of systems programming.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="listicles"></category><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (ix)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-ix.html" rel="alternate"></link><updated>2016-01-02T21:54:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-11-09:2015/rust-and-swift-ix.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Right off the bat when looking at the definitions for Swift’s and Rust’s &lt;code&gt;enum&lt;/code&gt; types, a difference pops out: the use of the keyword &lt;code&gt;case&lt;/code&gt; to introduce an enum member in Swift. In one sense, this overloads that keyword, but in another sense it’s fine: pattern matching and enums go hand in hand, so the use in both cases is fairly natural. Rust doesn’t have any special syntax to designate the elements of an enum; they’re just separated by commas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I am not at all shocked to find that Swift has a variant syntax for its unit type case declarations, where a single &lt;code&gt;case&lt;/code&gt; keyword precedes a list of comma-separated cases defined on a single line. (At this point, I would be more surprised &lt;em&gt;not&lt;/em&gt; to find a variant syntax for something in Swift!)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Something truly wonderful about both a Rust and Swift: enumerated types aren’t just wrappers around integer values. They’re real types of their own. This is powerful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust and Swift also share in having enumerated types that can hold values. The most prominent of these so far in the Swift book are optionals, the &lt;code&gt;Optional&lt;/code&gt; enum type, corresponding very closely to Rust’s &lt;code&gt;Option&lt;/code&gt; type. Having had these for a bit in playing with Rust, and having gotten familiar with the utility of types like these while reading &lt;a href="https://gumroad.com/l/maybe-haskell"&gt;&lt;em&gt;Maybe Haskell&lt;/em&gt;&lt;/a&gt;—a delightful book which introduces Haskell and functional programming using Haskell’s &lt;code&gt;Maybe&lt;/code&gt; type—I now miss them profoundly in languages which don’t have them. (Which is to say: every language I use on a regular basis professionally: C, C++, Python, JavaScript, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s enum types don’t have integer values &lt;em&gt;by default&lt;/em&gt;—but they can have them if you define a type and assign a value to each enum case at the definition. These “raw values” are distinct from the “associated values” noted just above. I expect these exist primarily for ease of interoperation with Objective-C.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;del&gt;Rust doesn’t have anything like this, at least that I can think of. The main place it would be useful would be for foreign function interfaces (as in Swift), and this is one of several such gaps in Rust,&lt;/del&gt; along with the lack of a straightforward way to map to C’s &lt;code&gt;union&lt;/code&gt; types. &lt;del&gt;There are trade offs in terms of adding the functionality to the language, though, as it substantially increases the complexity of what an enum value can be, I think.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; This was incorrect. From the &lt;a href="https://doc.rust-lang.org/reference.html"&gt;Rust Reference&lt;/a&gt; section on &lt;a href="https://doc.rust-lang.org/reference.html#enumerations"&gt;Enumerations&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enums have a discriminant. You can assign them explicitly:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;enum Foo {
    Bar = 123,
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If a discriminant isn’t assigned, they start at zero, and add one for each variant, in order.&lt;/p&gt;
&lt;p&gt;You can cast an enum to get this value:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let x = Foo::Bar as u32; // x is now 123u32&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This only works as long as none of the variants have data attached. If it were &lt;code&gt;Bar(i32)&lt;/code&gt;, this is disallowed.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initialization of Swift’s raw-valued enum type is quite similar, and pleasantly so, to Python’s initialization of enums.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In a surprising change from the usual, Swift’s syntax for binding variable names when pattern matching against an enum is &lt;em&gt;more&lt;/em&gt; verbose than Rust’s, requiring the use of either a leading &lt;code&gt;let&lt;/code&gt; on the &lt;code&gt;case&lt;/code&gt; statement if all the elements are of the same type, or a &lt;code&gt;let&lt;/code&gt; in front of each element otherwise:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;var matchedValue: String
let matchee = 3.14159
switch matchee {
case 3.14159:
    matchedValue = &amp;quot;pi&amp;quot;
case _:
    matchedValue = &amp;quot;not pi&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, a matched pattern can simply bind its value directly:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let matchee = 3.14159;
let matchedValue = match matchee {
    3.14159 =&amp;gt; &amp;quot;pi&amp;quot;.to_string(),
    _ =&amp;gt; &amp;quot;not pi&amp;quot;.to_string()
};&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift has the ability to do recursive enumerations with its &lt;code&gt;indirect&lt;/code&gt; type. This is conceptually interesting, but off the top of my head I can’t think of a time when this would have been useful at any point since I started programming seven and a half years ago. The book’s example of a recursive function a aliasing arithmetic expressions is fine, but not particularly illuminating to me. I suspect, though, that it might make more sense if I were more familiar with pure functional programming paradigms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; a friend &lt;a href="https://alpha.app.net/jws/post/65990633"&gt;points out&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Indirect enums are useful for recursive types in general. There are a lot of these: Lists, trees, and streams are the big ones that come to mind.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All those same lines: Rust does &lt;em&gt;not&lt;/em&gt; have the ability to have recursive enumerations at present (or recursive &lt;code&gt;struct&lt;/code&gt; types, for that matter), at least without heap-allocating with &lt;code&gt;Box&lt;/code&gt; along the way. You &lt;em&gt;can&lt;/em&gt; construct such a type, in other words, but you have to be explicit about how you’re handling the memory, and it can’t be stack-allocated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For an example of a recursive enumeration type (as well as an interesting/hilarious example of how you can easily confuse the compiler if you do this wrong), see &lt;a href="https://users.rust-lang.org/t/recursive-enum-types/2938"&gt;this Rust forum post&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For some discussion on stack- and heap-allocated memory in Rust, I’ll shamelessly promote my Rust podcast, &lt;a href="http://www.newrustacean.com"&gt;New Rustacean&lt;/a&gt;: take a listen to &lt;a href="http://www.newrustacean.com/show_notes/e005/index.html"&gt;e005: Allocate it where?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Functions, closures, and an awful lot of Swift syntax.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Classes and structs (product types), and reference and value types.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="software development"></category><category term="listicles"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>CSS Fallback for OpenType Small Caps</title><link href="http://www.chriskrycho.com/2015/css-fallback-for-opentype-small-caps.html" rel="alternate"></link><updated>2015-10-19T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-10-19:2015/css-fallback-for-opentype-small-caps.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I wrote this up as &lt;a href="http://stackoverflow.com/questions/24846264/css-fallback-for-opentype-small-caps/25172932#25172932"&gt;a question on Stack Overflow&lt;/a&gt; a bit over a year ago. It has continued to get a fair bit of traffic, so I’ve republished it here and cleaned it up a bit.&lt;/i&gt;&lt;/p&gt;
&lt;section id="the-problem" class="level2"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Over the last year, I’ve worked on &lt;a href="//holybible.com"&gt;a site&lt;/a&gt; where small caps are important: setting the text of the Bible. In the Old Testament the name of God is transliterated as &lt;code&gt;Lord&lt;/code&gt; but in small caps—not “LORD” but &lt;span class="divine-name"&gt;Lord&lt;/span&gt; (RSS readers will want to click through and see this on my site). However, the state of OpenType small caps support at the moment is… less than optimal. Safari (even up through Safari 9 on El Capitan, from which I am typing this) still doesn’t support the &lt;code&gt;-webkit-font-feature-settings: 'smcp'&lt;/code&gt; option, and a lot of the hits for this website will be coming from mobile.&lt;/p&gt;
&lt;p&gt;Unfortunately, “graceful degradation” is problematic here: if you specify both &lt;code&gt;font-variant: small-caps&lt;/code&gt; and &lt;code&gt;font-feature-settings: 'smcp'&lt;/code&gt; in a browser that supports the latter (e.g. Chrome), the &lt;code&gt;font-variant&lt;/code&gt; declaration overrides it, so the horribly ugly old-style version still comes into play. (Note: this is as it should be per the &lt;a href="http://www.w3.org/TR/css-fonts-3/#feature-precedence"&gt;spec&lt;/a&gt;: the &lt;code&gt;font-variant&lt;/code&gt; declaration has a higher priority than the &lt;code&gt;font-feature-settings&lt;/code&gt; declaration). Given the current implementations of &lt;code&gt;font-variant: small-caps&lt;/code&gt;, though—shrunken capitals rather than actual small capitals—the result is that using &lt;code&gt;font-variant: small-caps&lt;/code&gt; realists in not-so-gracefully degrading &lt;em&gt;everyone’s&lt;/em&gt; reading experience.&lt;/p&gt;
&lt;p&gt;In the past, I have exported the small caps as a distinct webfont and specified them directly; see &lt;a href="http://www.chriskrycho.com/2014/learning-qml-part-1.html"&gt;this post&lt;/a&gt; for a simple example: the first line of each paragraph is specified that way.&lt;/p&gt;
&lt;p&gt;While I &lt;em&gt;can&lt;/em&gt; do the same thing here (and at least in theory could deliver a pretty small typeface, since I really only need three characters: &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt;), I’d prefer simply to enable sane fallbacks. As noted above, however, that’s not possible. I am &lt;em&gt;open to&lt;/em&gt; but would very much prefer to avoid server-side solutions (browser detection, etc.) as a point of complexity that is better to minimize, especially given how rapidly browsers change. How else might one solve this problem, and especially are there existing solutions for it?&lt;/p&gt;
&lt;p&gt;In the future, &lt;code&gt;font-variant: small-caps&lt;/code&gt; will handle this nicely, as per &lt;a href="http://www.w3.org/TR/css3-fonts/#small-caps"&gt;the spec&lt;/a&gt; it should display a small-capitals-variant of the typeface if the typeface supplies it. However, at present, &lt;em&gt;no browser supports this&lt;/em&gt; (at least, none that I can find!). This means that instead, they all render fake small capitals simply by scaling down actual capitals. The result is typographically unpleasant, and unacceptable on this project.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solutions" class="level2"&gt;
&lt;h2&gt;The Solution(s)&lt;/h2&gt;
&lt;p&gt;I spent a considerable amount of time researching this and wrestling with it. After digging around as best I could, the top solutions for now are:&lt;/p&gt;
&lt;section id="supports" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Take advantage of the &lt;code&gt;@supports&lt;/code&gt; rule in browsers. This is what I initially opted to do on this project.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; You use the rule this way:&lt;/p&gt;
&lt;pre class="css"&gt;&lt;code&gt;.some-class {
    font-variant: small-caps;
}

@supports(font-feature-settings: &amp;#39;smcp&amp;#39;) {
    .some-class {
        font-variant: normal;
        font-feature-settings: &amp;#39;smcp&amp;#39;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I’ve simplified by leaving out the prefixed versions; you’ll need to add the &lt;code&gt;-webkit-&lt;/code&gt; and &lt;code&gt;-moz-&lt;/code&gt; prefixes to get this actually working.) This has the advantage that support for real small caps and support for the &lt;code&gt;@supports&lt;/code&gt; rule are very similar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@supports&lt;/code&gt;: &lt;a href="http://caniuse.com/#feat=css-featurequeries"&gt;Can I Use Feature Queries?&lt;/a&gt;: Chrome 31+, Firefox 29+, Opera 23+, Android 4.4+, Safari 9+, Edge 12+, Chrome for Android&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-feature-settings&lt;/code&gt;: &lt;a href="http://usabilitypost.com/2014/05/10/using-small-caps-and-text-figures-on-the-web/"&gt;Using Small Caps &amp;amp; Text Figures on the Web&lt;/a&gt;: Chrome, Firefox, IE10+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This isn’t perfect: since IE10/11 don’t implement &lt;code&gt;@supports&lt;/code&gt;, you miss one browser—sort of. At this point, IE is a legacy browser, and Edge has had &lt;code&gt;@supports&lt;/code&gt; available from the start. Thus, this gets you most of the way there, and it should be future-facing: this should progressively enhance the site nicely. The normal (bad, but functional) small caps are displayed in the meantime, and when browsers eventually get around to using OpenType small caps by default for &lt;code&gt;font-variant: small-caps&lt;/code&gt;, this will continue to work just fine. It’s “progressive enhancement” and it’ll work nicely for most purposes.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="typeface-subsetting" class="level3"&gt;
&lt;h3&gt;Typeface subsetting&lt;/h3&gt;
&lt;p&gt;As mentioned above, one can create a subset of the typeface that includes only small capitals. This is what I have done for the small caps on this site; see the example in the first paragraph.&lt;/p&gt;
&lt;p&gt;To pull this off, you’ll need to start by subsetting the typeface. You can do this manually with a font tool, or (the simpler way) you can use FontSquirrel’s custom subsetting tool in their &lt;a href="http://www.fontsquirrel.com/tools/webfont-generator"&gt;webfont generator&lt;/a&gt;. (&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; You &lt;em&gt;must&lt;/em&gt; check the license and confirm that the typeface in question allows this kind of modification. See below.) In the web font generator, first upload the file you wish to modify. Then choose the &lt;strong&gt;Expert&lt;/strong&gt; radio button. Most of the settings you can leave as they are; they’re good sane defaults. Midway down the page you’ll see &lt;strong&gt;OpenType Flattening&lt;/strong&gt; options. Here, select only “Small Caps”. Run the generator. The result will be a complete replacement of the normal lowercase letters with the small caps set.&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In that case, you can simply apply a style to the elements you want to have small capitals, e.g.:&lt;/p&gt;
&lt;pre class="css"&gt;&lt;code&gt;.divine-name {
    font-family: &amp;#39;my_typeface_smcp&amp;#39;, &amp;#39;my_typeface&amp;#39;, serif;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The major advantage to this approach is consistency: that typeface is going to display on every browser out there, back to IE5.5, as long as you deliver it correctly using the various hooks required by &lt;code&gt;@font-face&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a few disadvantages to this approach, though:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It means delivering another font file. In my case, this would be an acceeptably low size (since I actually only need four characters), but it’s still something to consider in general. It is in any case another HTTP request, which is going to further slow the page load time or at least give you some flash of unstyled text when it reloads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It may violate the licenses of the typefaces in question. For at least one of the fonts I used on this project, it &lt;em&gt;does&lt;/em&gt;: the license explicitly forbids rebuilding the font using tools like FontSquirrel. (FontSquirrel was the tool I used for this approach before, and it works quite well.) This is a make-or-break issue for using a subset of a typeface to accomplish the goal. That being said, if you have a good reason to do it, you may be able to get support from the vendor (especially if they’re a small shop). For the project that prompted this question, I was able to do just that with a nice email—the designer is a great guy.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The other major reason not to do it this way is that it has a significantly higher maintenance cost. If at any point you need to change or update the typeface, you have to go through the subsetting process all over again. By contrast, the first option will simply &lt;em&gt;work&lt;/em&gt;, though admittedly not as pleasantly as one might hope, and will not only continue to work but will actually improve over time as browsers increase their implementation of the CSS3 standard.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I opted for the second solution on HolyBible.com—typography was one of the driving differentiators for the site, so I prioritized it and did the necessary legwork for it. In general, though, the first option should work well for most sites. In any case, both ways work, though the first one is a &lt;em&gt;better&lt;/em&gt; example of progressive enhancement. And we can all look forward to the day when true small-caps support is available on every browser, right?&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For various reasons (especially see note 2 below), I actually opted for the second approach outlined here, which is the same approach I was trying to avoid. Alas.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Issues remain: even in the latest Chrome (46 as of the time of this post), using the &lt;code&gt;font-feature-settings: 'smcp'&lt;/code&gt; approach has some issues. For example, if you turn on &lt;code&gt;letter-spacing&lt;/code&gt; (a fairly common &lt;a href="http://practicaltypography.com/letterspacing.html"&gt;recommendation&lt;/a&gt; for small caps), the small caps will revert to normal lowercase letters.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;From the FontSquirrel blog post that introduced the feature:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have a font with OpenType features, you can now flatten some of them into your webfont. For instance, some fonts have small caps built in, but they are completely inaccessible in a web browser. By selecting the “Small Cap” option, the Generator will replace all the lowercase glyphs with the small cap variants, giving you a small cap font. Please note that not all OpenType features are supported and if the font lacks OpenType features, using these options won’t create them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="design"></category><category term="software development"></category><category term="typography"></category></entry><entry><title>Rust and Swift (viii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html" rel="alternate"></link><updated>2015-10-19T20:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-10-18:2015/rust-and-swift-viii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Rust and Swift handle function definition fairly similarly, at least for basic function definitions. In fact, for most basic functions, the only difference between the two is the keyword used to indicate that you’re declaring a function: &lt;code&gt;fn&lt;/code&gt; in Rust and &lt;code&gt;func&lt;/code&gt; in Swift.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Likewise, both return an empty tuple, &lt;code&gt;()&lt;/code&gt;, called the &lt;em&gt;unit type&lt;/em&gt; in Rust or &lt;code&gt;Void&lt;/code&gt; in Swift. Note, however, that this unit/&lt;code&gt;Void&lt;/code&gt; type is &lt;em&gt;not&lt;/em&gt; like C(++)’s &lt;code&gt;void&lt;/code&gt; or Java’s &lt;code&gt;null&lt;/code&gt;: you cannot coerce other types to it; it really is an empty tuple.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type declarations on functions are basically identical for simple cases, though they vary into the details as you get into generics and constraints in generics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have no idea why the Swift team chooses to represent function names like this: &lt;code&gt;function_name(_:second_param:third_param:&amp;lt;etc.&amp;gt;)&lt;/code&gt;. Perhaps it’s a convention from other languages I’m simply unfamiliar with, but it seems both odd and unhelpful: eliding the first parameter name obscures important information. Also, why use colons for the delimiter?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I’m informed via Twitter and App.net that this reflects how function names work in Objective C, and derives ultimately from Smalltalk.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being able to name the items in a returned type in Swift is quite handy; it’s something I have often wanted and had to work around with dictionaries or other similar types in Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’ll see how I feel once I’ve been writing both for a while, but initially I &lt;em&gt;strongly&lt;/em&gt; prefer Rust’s more-obvious (if also somewhat longer) &lt;code&gt;-&amp;gt; Option&amp;lt;i32&amp;gt;&lt;/code&gt; to return an optional integer to Swift’s &lt;code&gt;-&amp;gt; Int?&lt;/code&gt;. I am quite confident that I’ll miss that trailing &lt;code&gt;?&lt;/code&gt; somewhere along the way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m sure there’s a reason for Swift’s internal and external parameter names and the rules about using &lt;code&gt;_&lt;/code&gt; to elide the need to use keyword arguments (but automatically eliding the first one) and so on… but I really can’t see the utility, overall. It seems like it would be better just to have Python-like args and keyword args.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That’s doubly so given that Swift’s rules for default-valued parameters map exactly to Python’s: they need to go at the end, after any parameters which don’t have default values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s variadic parameters are nice—though of course limited, since if you have more than one, the compiler may not know how to resolve which destination parameter a given argument belongs with. (I imagine the compiler &lt;em&gt;could&lt;/em&gt; be extended to be able to handle multiple variadic parameters as long as they were all of different types, but that’s probably not worth the work or the potential confusion it would introduce.) In any case, it’s a small nicety that I do wish Rust had.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s variable parameters are… interesting. I can see the utility, sort of, but (probably from years of habit with C and Python and pass-by-reference types), it’s just not a pattern that makes a lot of sense to me right now. No doubt I’ll get used to them in idiomatic Swift, but while Rust doesn’t have a similar feature, I suspect I won’t miss it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In/out parameters—that is, mutable pass-by-reference types—are available in both languages. The syntax is &lt;em&gt;very&lt;/em&gt; different here, as are the semantics.&lt;/p&gt;
&lt;p&gt;Swift has the &lt;code&gt;inout&lt;/code&gt; keyword, supplied before a parameter definition:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;func adds4ToInput(inout num: Int) {
    num += 4;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust has instead a variation on every other type definition, declaring the type in this case to be a mutable reference:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn adds_4_to_input(num: &amp;amp;mut i32) {
    num += 4;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As usual, in other words, Swift opts to use new syntax (in this case, a dedicated keyword) while Rust opts to use the same syntax used everywhere else to denote a mutable reference. In fairness to Swift, though, this is something of a necessity there. From what I’ve seen so far, Swift generally doesn’t (and perhaps can’t?) do pointers or references explicitly (though of course it’s handling lots of things that way under the covers); arguments to functions are a special case, presumably present primarily for interoperability with Objective-C.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s function type definitions, as used in e.g. function parameter definitions, are quite nice, and reminiscent of Haskell in the best way. Rust’s are pretty similar, and add in its &lt;code&gt;trait&lt;/code&gt; usage—because functions types &lt;em&gt;are&lt;/em&gt; &lt;code&gt;trait&lt;/code&gt;s. Once again, I really appreciate how Rust builds more complicated pieces of functionality on lower-level constructs in the language. (Swift may be doing similar under the covers, but the Swift book doesn’t say.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Again, though, the downside to Rust’s sophistication is that it sometimes bundles in some complexity. Returning a function in Swift is incredibly straightforward:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;func getDoubler() -&amp;gt; (Int) -&amp;gt; Int {
    func doubler(number: Int) -&amp;gt; Int {
        return number * 2
    }

    return doubler
}

func main() {
    let doubler = getDoubler()
    println(&amp;quot;\(doubler(14))&amp;quot;)  // -&amp;gt; 28
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing the same in Rust is a bit harder, because—as of the 1.3 stable/1.5 nightly timeframe—it requires you to explicitly heap-allocate the function. Swift just takes care of this for you.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn get_doubler() -&amp;gt; Box&amp;lt;Fn(i32) -&amp;gt; i32&amp;gt; {
    fn doubler(number: i32) -&amp;gt; i32 {
        number * 2
    }

    Box::new(doubler)
}

fn main() {
    let doubler = get_doubler();
    println!(&amp;quot;{:}&amp;quot;, doubler(14));  // -&amp;gt; 28
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you understand what’s going on under the covers here, this makes sense: Rust normally stack-allocates a function in a scope, and therefore the &lt;code&gt;doubler&lt;/code&gt; function goes out of scope entirely when the &lt;code&gt;get_doubler&lt;/code&gt; function returns if you don’t heap-allocate it with &lt;code&gt;Box::new&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In both languages, closures and “ordinary” functions are variations on the same underlying functionality (as it should be). In Rust’s case, functions and closures both implement the &lt;code&gt;Fn&lt;/code&gt; trait. In Swift’s case, named functions are a special case of closures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Swift syntax for a closure is, well, a bit odd to my eye. The basic form is like this (with the same “doubler” functionality as above):&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;{ (n: Int) -&amp;gt; Int in return n * 2 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For brevity, this can collapse down to the shorter form with types inferred from context, parentheses dropped and the &lt;code&gt;return&lt;/code&gt; keyword inferred from the fact that the closure has only a single expression (note that this wouldn’t be valid unless in a context where the type of &lt;code&gt;n&lt;/code&gt; could be inferred):&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;{ n in n * 2 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The simplicity here is nice, reminiscent in a good way of closures/lambdas in other languages.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The fact that it’s a special case is less to my taste.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust’s closure syntax is fairly similar to Swift’s brief syntax. More importantly, there’s no special handling for closures’ final expressions. Remember: the final expression of &lt;em&gt;any&lt;/em&gt; block is always returned in Rust.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;|n| n * 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to fully annotate the types, as in the first Swift example, it would be like so:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;|n: i32| -&amp;gt; i32 { n * 2 }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are even &lt;em&gt;more&lt;/em&gt; differences between the two, because of Rust’s ownership notion and the associated need to think about whether a given closure is being borrowed or moved (if the latter, explicitly using the &lt;code&gt;move&lt;/code&gt; keyword).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift has the notion of shorthand argument names for use with closures.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The arguments to a closure get the default names &lt;code&gt;$0&lt;/code&gt;, &lt;code&gt;$1&lt;/code&gt;, etc. This gets you even &lt;em&gt;more&lt;/em&gt; brevity, and is quite convenient in cases where closures get used a lot (&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, etc.).&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;{ $0 * 2 }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If that weren’t enough, Swift will go so far as to simply reuse operators (which are special syntax for functions) as closures. So a closure call could simply be &lt;code&gt;+&lt;/code&gt; for a function expecting a closure operating on two numbers; Swift will infer that it needs to map back to the relevant method definition on the appropriate type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The upside to this is that the code can be incredibly brief, and—once you’re used to it, at least—still fairly clear. The downside to this is yet &lt;em&gt;more&lt;/em&gt; syntax for Swift, and the ever-growing list of things to remember and ways to write the same thing I expect will lead to quite a bit of instability as the community sorts out some expectations for what is idiomatic in any given instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And if that weren’t enough, there is more than one way to supply the body of a closure to a Swift function that expects it: you can supply a block (&lt;code&gt;{ /* closure body */ }&lt;/code&gt;) &lt;em&gt;after&lt;/em&gt; the function which expects it. Yes, this can end up looking nearly identical to the form for declaring a function:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;someFunctionExpectingAnIntegerClosure() { n * 2 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you can also drop the parentheses if that’s the only argument.&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;someFunctionExpectingAnIntegerClosure { n * 2 }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In terms of the &lt;em&gt;mechanics&lt;/em&gt; of closures, and not just the syntax, the one significant difference between Rust and Swift is the same one we’ve seen in general between the two languages: Swift handles the memory issues automatically; Rust makes you be explicit about ownership. That is, as noted above about the closures themselves, in Rust you may have to &lt;code&gt;move&lt;/code&gt; ownership to get the expected behavior. Both behave basically like closures in any other language, though; nothing surprising here. Both also automatically copy values, rather than using references, whever it makes sense to do so.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift autoclosures allow for lazy evaluation, which is neat, but: &lt;em&gt;yet more syntax&lt;/em&gt;! Seriously. But I think all its other closure syntaxes &lt;em&gt;also&lt;/em&gt; allow for lazy evaluation. The only reason I can see to have the special attribute (&lt;code&gt;@autoclosure&lt;/code&gt;) here is because they added this syntax. And this syntax exists so that you can call functions which take closures as if they &lt;em&gt;don’t&lt;/em&gt; take closures, but rather the argument the closure itself takes. But of course, this leads the Swift book to include the following warning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Overusing autoclosures can make your code hard to understand. The context and function name should make it clear that the evaluation is being deferred.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, care needed indeed. (Or, perhaps, you could just avoid adding more special syntax that leads to unexpected behaviors?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Good grief. I’m tired now. That’s a half-dozen variants on &lt;em&gt;closure syntax&lt;/em&gt; in Swift.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember: there’s still just one way to write and use a closure in Rust.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This takes me back to something I noticed &lt;a href="/2015/rust-and-swift-ii.html"&gt;early on&lt;/a&gt; in my analysis of the two languages. In Swift, there’s nearly always more than one way to do things. In Rust, there’s usually one way to do things. Swift prefers brevity. Rust prefers to be explicit. In other words, Swift borrows more of its philosophy from Perl; Rust more from Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m a Python guy, through and through. Perl drives me crazy every time I try to learn it. You could guess (even if you hadn’t already seen) where this lands me between Rust and Swift.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is incredibly long, but I blame that on the (frankly incredible) number of variants Swift has on the same concept.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Pattern matching and the value of expression blocks.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ix.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Sum types (&lt;code&gt;enum&lt;/code&gt;s) and more on pattern matching.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Compare the closure syntaxes especially in Ruby and ES6+.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;For a similar example in another up-and-coming language, see &lt;a href="http://elixir-lang.org/getting-started/modules.html#function-capturing"&gt;Elixir&lt;/a&gt;, which does almost exactly the same but with &lt;code&gt;&amp;amp;&lt;/code&gt; in place of &lt;code&gt;$&lt;/code&gt;.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category><category term="listicles"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Jeb Bush on net neutrality</title><link href="http://www.chriskrycho.com/2015/jeb-bush-on-net-neutrality.html" rel="alternate"></link><updated>2015-09-24T07:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-24:2015/jeb-bush-on-net-neutrality.html</id><summary type="html">&lt;p&gt;Dear Republicans: your &lt;a href="http://arstechnica.com/tech-policy/2015/09/if-elected-president-jeb-bush-will-get-rid-of-net-neutrality-rules/"&gt;opposition to net neutrality&lt;/a&gt; might be justifiable as something other than kowtowing to megacorporations &lt;em&gt;if you ever got around to proposing something else&lt;/em&gt;. As is, all you’re doing is propping up some of the nastiest, most anti-consumer companies in the country and sustaining monopolies and duopolies, supposedly in the name of “free markets”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stop it.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;N.b. This isn’t intrinsically a partisan issue. It’s become one, but mostly because Republicans have felt compelled to do the bidding of the telecom industry for… reasons.&lt;/p&gt;
&lt;p&gt;The only thing worse than a government monopoly is a &lt;em&gt;private&lt;/em&gt; monopoly.&lt;/p&gt;
&lt;p&gt;If Republicans wanted to push for &lt;a href="https://en.wikipedia.org/wiki/Local-loop_unbundling"&gt;local loop unbundling&lt;/a&gt; in place of net neutrality, &lt;em&gt;almost everyone&lt;/em&gt; would be for it. (The exception: telecom companies.)&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="links"></category></entry><entry><title>Rust and Swift (vii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-vii.html" rel="alternate"></link><updated>2015-09-20T13:42:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-19:2015/rust-and-swift-vii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Both Rust and Swift have &lt;em&gt;pattern-matching&lt;/em&gt;, and with what appears to be fairly similar basic behavior. (I touched on this briefly in my &lt;a href="/2015/rust-and-swift-i.html"&gt;first post in the series&lt;/a&gt;.) In Rust this goes under the &lt;code&gt;match&lt;/code&gt; construct, with matches specified like &lt;code&gt;&amp;lt;pattern&amp;gt; =&amp;gt; &amp;lt;expression|statement&amp;gt;&lt;/code&gt;, optionally with guards specified with &lt;code&gt;if&lt;/code&gt; expressions. In Swift, patterns are matched using the &lt;code&gt;switch&lt;/code&gt; construct, with matches specified like &lt;code&gt;case &amp;lt;pattern&amp;gt;: &amp;lt;expression|statement&amp;gt;&lt;/code&gt;, optionally with guards specified with &lt;code&gt;where&lt;/code&gt; expressions. (&lt;code&gt;where&lt;/code&gt; is also used in Rust, but for generic constraints, not pattern match guards.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages allow you to bind names to a matched pattern: Swift with &lt;code&gt;case let &amp;lt;name&amp;gt;&lt;/code&gt; and Rust simply by using the name in a normal destructuring expression as part of the match definition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; that’s not &lt;em&gt;quite&lt;/em&gt; right. In Rust, you use the &lt;code&gt;@&lt;/code&gt; operator with the variable name you want to bind in the match.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit the second:&lt;/strong&gt; I was mixed up, because Rust actually has &lt;em&gt;both&lt;/em&gt; of those options. You can either match directly, e.g. when getting the value of an &lt;code&gt;Option&lt;/code&gt; type: &lt;code&gt;Some(value)&lt;/code&gt; as the pattern will bind &lt;code&gt;value&lt;/code&gt;. But if you need to bind a specific part of more complicated data structure, the &lt;code&gt;@&lt;/code&gt; operator is present to let you do it in a fairly straightforward way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages allow for the use of &lt;code&gt;_&lt;/code&gt; as a “wildcard” in match definitions. Since match definitions in Rust use the patterns directly, the equivalent of Swift’s C-like &lt;code&gt;default&lt;/code&gt; is simply a wildcard match pattern (&lt;code&gt;_ =&amp;gt; &amp;lt;-expression|statement&amp;gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One significant difference: like its &lt;code&gt;if&lt;/code&gt; blocks, Rust’s &lt;code&gt;match&lt;/code&gt; blocks are expressions, so they can be assigned. I.e., you can write this:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let test = 5u32;
let description = match test {
    0..10 =&amp;gt; &amp;quot;less than ten&amp;quot;,
        _ =&amp;gt; &amp;quot;greater than ten&amp;quot;,
}
println!(&amp;quot;{?:}&amp;quot;);  // &amp;quot;less than ten&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Swift doesn’t let you do this; the same thing there would be written like this:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;let test: UInt32 = 5
var description: String
switch test {
    case 0..&amp;lt;10:
        description = &amp;quot;less than ten&amp;quot;
    default:
        description = &amp;quot;greater than ten&amp;quot;
}
println(&amp;quot;\(description)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages have &lt;code&gt;break&lt;/code&gt; statements, but in Rust they’re only used in loop constructs, while Swift (like C) uses them to escape &lt;code&gt;case&lt;/code&gt;s as well. The Swift book gives an example of one place they’re necessary in a &lt;code&gt;switch&lt;/code&gt;: to match a case and do nothing there (e.g. &lt;code&gt;default: break&lt;/code&gt;). In Rust, you would simply supply an empty block for that scenario (e.g. &lt;code&gt;_ =&amp;gt; {}&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Correctly, both languages force you to match exhaustively on relevant patterns. If you’re matching an enumerated type, for example, you must handle every enumerated value. You can of course do this with wildcard patterns or with Swift’s &lt;code&gt;default&lt;/code&gt;, but the good thing is that both languages will refuse even to compile if a given pattern isn’t matched.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s default behavior around its &lt;code&gt;switch&lt;/code&gt; statements is sane: it does &lt;em&gt;not&lt;/em&gt; automatically fall through into the next statement. It does let you do this, without checking the condition on the next statement (as in C), using the &lt;code&gt;fallthrough&lt;/code&gt; keyword. Rust, by contrast, simply doesn’t allow this at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages supply named control statements (loops, etc.), with slightly different syntax for naming them. Rust’s, curiously, shares its syntax with lifetime definitions—more on those in a future post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I don’t believe Rust has anything quite like Swift’s &lt;code&gt;guard&lt;/code&gt;s, which allow you to leave normal or expected control flow in the main body of a block, with a secondary block for cases where the &lt;code&gt;guard&lt;/code&gt; isn’t matched. This isn’t a huge deal, but it does fit as a nice convenience into the typical &lt;code&gt;if let&lt;/code&gt; pattern in Swift. Basically, it just lets you elide an empty &lt;code&gt;if&lt;/code&gt; block and supply only the &lt;code&gt;else&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; a friend &lt;a href="https://alpha.app.net/jws/post/64804111"&gt;points out&lt;/a&gt; that Swift &lt;code&gt;guard&lt;/code&gt;s also require you to exit the current scope, so it’s unambiguous what you’re doing if you use them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vi.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Collection types and the difference between syntax and semantics.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Functions, closures, and an awful lot of Swift syntax.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="software development"></category><category term="listicles"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (vi)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-vi.html" rel="alternate"></link><updated>2015-09-19T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-19:2015/rust-and-swift-vi.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It kind of feels like this summarizes a &lt;em&gt;lot&lt;/em&gt; of things about the overall design of Swift:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although the two forms are functionally identical, the shorthand form is preferred and is used throughout this guide when referring to the type of an array. —&lt;em&gt;The Swift Programming Language (Swift 2 Prerelease)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The documentation for the various types in Rust’s &lt;code&gt;std::collections&lt;/code&gt; module is hilarious and great. Highly recommended.&lt;/p&gt;
&lt;p&gt;One thing that jumped out at me reading this chapter of the Swift book (though I don’t think it’s been explicitly discussed yet): Rust doesn’t have named parameters; Swift does. There are good reasons for that in both cases, but I suspect this is one of the small details I’ll miss the most in Rust. I’ve been spoiled by Python.&lt;/p&gt;
&lt;p&gt;Swift’s &lt;code&gt;Array&lt;/code&gt; type is analogous to Rust’s &lt;code&gt;Vec&lt;/code&gt; type (usually created with the &lt;code&gt;vec!&lt;/code&gt; macro), &lt;em&gt;not&lt;/em&gt; its &lt;code&gt;Array&lt;/code&gt; type. Rust &lt;code&gt;Vec&lt;/code&gt;s and Swift &lt;code&gt;Array&lt;/code&gt;s are dynamically sized and created on the heap, whereas Rust’s &lt;code&gt;Array&lt;/code&gt;s are statically sized and created on the stack. Syntax for creating &lt;code&gt;Array&lt;/code&gt;s in both languages is quite similar (though the results are different):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swift:
&lt;ul&gt;
&lt;li&gt;Fixed size: &lt;code&gt;let an_array: [Int] = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Variable size: &lt;code&gt;var an_array = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rust:
&lt;ul&gt;
&lt;li&gt;Array: &lt;code&gt;let an_array: [i32, 3] = [1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector: &lt;code&gt;let a_vector: Vec&amp;lt;i32&amp;gt; = vec![1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s the long form, of course; both languages have type inference, so you’d rarely write it like that. The usual form would be with the type in all of those cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swift:
&lt;ul&gt;
&lt;li&gt;Fixed size: &lt;code&gt;let an_array = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Variable size: &lt;code&gt;var an_array = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rust:
&lt;ul&gt;
&lt;li&gt;Array: &lt;code&gt;let an_array = [1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector: &lt;code&gt;let a_vector = vec![1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rust also adds the concept of “slices,” which provide access to segments of arrays, and are heap-allocated as pointers to a given item in the array and a length (number of elements) included.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Array&lt;/code&gt; operations in Swift are all pretty reasonable, and surprisingly descriptive. They remind me in a good way of Python’s &lt;code&gt;list&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;There are a &lt;em&gt;lot&lt;/em&gt; of &lt;a href="http://doc.rust-lang.org/stable/std/vec/struct.Vec.html"&gt;ways to interact with &lt;code&gt;Vec&lt;/code&gt;s in Rust&lt;/a&gt;. (That’s not a bad thing.) A bit surprising to me was the absence of an &lt;code&gt;enumerate&lt;/code&gt; method, on &lt;code&gt;Vec&lt;/code&gt; itself, but then I discovered that it exists in the &lt;code&gt;IntoIter&lt;/code&gt; struct in the same module, which fully implements the &lt;code&gt;Iterator&lt;/code&gt; &lt;code&gt;trait&lt;/code&gt;. As a result, it has an &lt;code&gt;enumerate&lt;/code&gt; function returning an &lt;code&gt;Enumerate&lt;/code&gt; &lt;code&gt;struct&lt;/code&gt; instance. (Under the covers, I suspect Swift &lt;code&gt;Array&lt;/code&gt;s just implement an &lt;code&gt;Iterable&lt;/code&gt; &lt;code&gt;protocol&lt;/code&gt;, which is similar to this approach in some ways.)&lt;/p&gt;
&lt;p&gt;This makes a point I’m coming back to fairly often: Rust doesn’t necessarily put everything on a single object definition, but rather into a set of related &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;enum&lt;/code&gt; types and &lt;code&gt;trait&lt;/code&gt;s. This is really powerful, but it’s going to take some mental adjustment. In this way, Swift’s structure and semantics are much more like the languages I’m used to than Rust’s are (but even there, the use of &lt;code&gt;protocols&lt;/code&gt; gives it considerable new flexibility).&lt;/p&gt;
&lt;p&gt;Note that I said &lt;em&gt;semantics&lt;/em&gt;, not syntax. Swift and Rust are a great example of how very similar syntax can mask differences in semantics. (For another such example, compare JavaScript’s syntax and semantics to Java’s: they’re superficially similar syntactically, and light years apart semantically.)&lt;/p&gt;
&lt;p&gt;Swift’s &lt;code&gt;Set&lt;/code&gt; type and Rust’s roughly analogous &lt;code&gt;HashSet&lt;/code&gt; both have a &lt;code&gt;contains&lt;/code&gt; method which behaves much like Python’s &lt;code&gt;in&lt;/code&gt; keyword. Indeed, and perhaps unsurprisingly, the two types implement many of the same methods in general. This is perhaps to be expected given that the language around sets (as a mathematical concept being mapped down into a representation in a program) is quite standardized.&lt;/p&gt;
&lt;p&gt;Because of their stricter typing systems, both Rust and Swift require you to specify the types used in their mapping constructs (Rust has &lt;code&gt;HashMap&lt;/code&gt; and Swift has &lt;code&gt;Dictionary&lt;/code&gt;), though of course both can infer this as well in certain cases. At the most basic level, you can’t use arbitrary (hashable) types as keys in mixed fashion like you can in e.g. Python’s &lt;code&gt;dict&lt;/code&gt; type, but in practice this shouldn’t matter, for two reasons:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It’s generally inadvisable to use different types for keys in the same dictionary anyway. To me, at least, that usually indicates the need to step back and think more carefully about the types and data structures I’m using.&lt;/li&gt;
&lt;li&gt;For the occasional case where it &lt;em&gt;is&lt;/em&gt; appropriate, I wonder if you could declare the type as generic in either Rust or Swift. I’m putting this down as a TODO item for myself to find out!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I really wish that Swift used the Python-style curly-brace delimited syntax (&lt;code&gt;{'key': 'value'}&lt;/code&gt;) for its dictionary literal initializers. I can see, from a syntax reason, why it doesn’t: that would overload the block syntax (which Python can avoid because it’s white-space delimited). But it’s &lt;em&gt;really&lt;/em&gt; convenient.&lt;/p&gt;
&lt;p&gt;Along similar lines, I can see why the Swift designers chose to make all iterables have literal initializers using braces (&lt;code&gt;[...]&lt;/code&gt;); it makes parsing fairly straightforward. However, the result is that it’s pretty difficult to see at first glance what you’re dealing with. It could quite easily be an &lt;code&gt;Array&lt;/code&gt;, a &lt;code&gt;Set&lt;/code&gt;, or a &lt;code&gt;Dictionary&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This highlights a too-little-appreciated aspect of programming language design: &lt;em&gt;readability&lt;/em&gt;. However much we programmers enjoy writing code, the reality is that we will all spend a great deal of our time—probably even a majority of it—reading it instead. Thus, while we should care about conveniences for writing code, and being overly verbose can be a pain, we should also concern ourselves with the ease of comprehending code when it is read, and the syntax and conventions a language embraces are a big part of this.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Dictionary&lt;/code&gt; type in Swift is a pretty close analog to Python’s &lt;code&gt;dict&lt;/code&gt;, right down to several of the method names. the same is true of Rust’s &lt;code&gt;HashMap&lt;/code&gt;. That’s not a bad thing by any stretch of the imagination.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-v.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; The value (and challenge) of learning languages in parallel.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Pattern matching and the value of expression blocks.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (v)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-v.html" rel="alternate"></link><updated>2015-09-12T13:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-12:2015/rust-and-swift-v.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I’ve been working on learning Swift over the past couple weeks, and had spent the month prior to that doing a deep first dive on Rust. This kind of approach, learning two languages basically at the same time, is entirely new to me, and for good reason. Programming languages are not trivial to learn, and to learn them meaningfully one must practice with them a great deal.&lt;/p&gt;
&lt;p&gt;I’m doing this largely of necessity. I’m hoping to build an application with a very capable, performant cross-platform core language (Rust), but planning to ship a native OS X app (first) when all is said and done. My desire to make the core libraries portable rules out Swift immediately. To be frank, so does the fact that it’s an Apple language: I am happy to use Apple’s tools on its platform, but I don’t want to shackle myself to their choices in the long run. Too, having good Rust experience is likely to be valuable in many other contexts.&lt;/p&gt;
&lt;p&gt;So I need to learn both.&lt;/p&gt;
&lt;p&gt;And, while I wouldn’t ordinarily recommend this course of action—indeed, unless you already have a fair bit of programming experience and already know several languages, I’d actively recommend against it—I’m finding it enormously profitable. The languages have been designed in roughly the same time frame, cite many of the same influences, and overlap substantially in terms of audience and goals. Yet they are, as this series has already highlighted, quite different languages in many ways.&lt;/p&gt;
&lt;p&gt;Learning them in parallel is helping me see the trade-offs each one has made, and force me to think about &lt;em&gt;why&lt;/em&gt; they differ in the ways they do. In particular, I think I have a much better idea what’s going on “under the covers” in each language and therefore know what to expect of them better. This, in turn, has dramatically deepened my grasp of the languages relative to the amount I’ve been looking at them, compared to previous language-learning efforts. (It also helps that I’ve already learned a number of languages, of course, and that I’ve been pushing my brain into the learning-programming-languages space via reading about Haskell, functional patterns in JavaScript, and so on this year.)&lt;/p&gt;
&lt;p&gt;I have a long way to go in both languages, of course. Reading on nights and weekends, and the little bit of playing I’ve been able to do with each of them, is no replacement for just sinking my teeth into a project and finding the pain points. Nonetheless, I’m really glad to be learning these two languages &lt;em&gt;together&lt;/em&gt;. If you’re up for a challenge, try it sometime! You’ll be surprised how much you learn.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iv.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Language design tradeoffs, highlighted by string manipulation.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vi.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Collection types and the difference between syntax and semantics.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>If-expressions in Rust</title><link href="http://www.chriskrycho.com/2015/if-expressions-in-rust.html" rel="alternate"></link><updated>2015-09-12T11:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-12:2015/if-expressions-in-rust.html</id><summary type="html">&lt;p&gt;I love the fact that all &lt;code&gt;if&lt;/code&gt; statements in Rust are expressions. It gives you a great deal of expressitivity in the language.&lt;/p&gt;
&lt;p&gt;Let’s contrast with Python (which I love, for the record). In Python, you can do something like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;some_condition = True
if some_condition:
    a_value = &amp;quot;Yeah!&amp;quot;
else:
    a_value = &amp;quot;Oh, sads.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those are &lt;em&gt;statements&lt;/em&gt; in the body of the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; block; you can’t assign the block itself to &lt;code&gt;a_value&lt;/code&gt;. However, like C, C++, Java, etc., Python does provide an &lt;em&gt;expression&lt;/em&gt;-type conditional, a ternary expression.&lt;/p&gt;
&lt;p&gt;So you can also do this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;some_condition = True
a_value = &amp;quot;Yeah&amp;quot; if some_condition else &amp;quot;Oh, sads.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This expression form of the &lt;code&gt;if&lt;/code&gt; block is what all Rust &lt;code&gt;if&lt;/code&gt; blocks are. So in Rust, the normal long form is:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let some_condition = true;
let a_value = if some_condition {
    &amp;quot;Yeah!&amp;quot;
}
else {
    &amp;quot;Oh, sads.&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(You could also write this with a &lt;code&gt;let mut a_value&lt;/code&gt; and then set its value inside the conditional blocks, but that’s not at all good form in Rust.)&lt;/p&gt;
&lt;p&gt;And of course, you can shorten that rather nicely where the expressions are brief enough:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let some_condition = true;
let a_value = if some_condition { &amp;quot;Yeah!&amp;quot; } else { &amp;quot;Oh, sads.&amp;quot; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this gets really nice when you have more complicated work to do in a Rust conditional. It doesn’t matter how many things going on inside an &lt;code&gt;if&lt;/code&gt; expression; it’s still an expression. As such, you can also write this:&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let some_condition = true;
let a_value = if some_condition {
    let the_answer = 42;
    let theme = &amp;quot;Take my love, take my land...&amp;quot;;
    &amp;quot;Yeah!&amp;quot;  // An expression!
}
else {
    let the_question = &amp;quot;What do you get when you multiply six by nine?&amp;quot;;
    let song = &amp;quot;You can&amp;#39;t take the sky from me!&amp;quot;;
    &amp;quot;Oh, sads.&amp;quot;  // An expression!
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously this is totally contrived and silly; the point is that no matter what the internals are, &lt;code&gt;if&lt;/code&gt; blocks are expressions, and their final expressions can be assigned like any other.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As a note: I got here because I was originally thinking you couldn’t do a one-liner like you can in Python. As shown above, that’s totally false, and in fact the Rust version is much more capable than Python’s, because you don’t need a dedicated ternary when all &lt;code&gt;if&lt;/code&gt; blocks are expressions. Rust used to have a C-style ternary (&lt;code&gt;&amp;lt;condition&amp;gt; ? &amp;lt;value if true&amp;gt; : &amp;lt;value if false&amp;gt;&lt;/code&gt;) but it was &lt;a href="https://github.com/rust-lang/rust/issues/1698"&gt;removed&lt;/a&gt; during the lead-up to the 1.0 release—a decision I wholeheartedly affirm.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note that under normal conditions the compiler won’t actually accept this because of the unused names.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category><category term="programming languages"></category><category term="rust"></category><category term="python"></category></entry><entry><title>Rust and Swift (iv)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-iv.html" rel="alternate"></link><updated>2015-09-10T21:05:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-10:2015/rust-and-swift-iv.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Both Swift and Rust directly address the issue of having to worry about memory allocation and safety. They do it in different ways, though: Swift by automatic reference counting, Rust by its concept of ownership. For a lot of day-to-day development, I can see the Swift approach being a win for the same reason a language like Python or Ruby is: having that all handled for you is &lt;em&gt;nice&lt;/em&gt;. Having the power Rust gives you comes at the price of increased cognitive load from having to reason about ownership.&lt;/p&gt;
&lt;p&gt;To put it another way: all programming languages have to make trade offs. Although I like Rust’s better than Swift’s so far, I’ve no doubt I will find any number of things to appreciate about Swift over Rust. You can’t have everything.&lt;/p&gt;
&lt;p&gt;This caught my attention in part because dealing with things like strings (or other pass-by-value types) in Swift is rather more straightforward than in Rust. The outcomes are much the same, but since &lt;em&gt;all&lt;/em&gt; &lt;code&gt;String&lt;/code&gt;s in Swift are passed by value (never by reference), you simply don’t have to think about modification—even safe modification!&lt;/p&gt;
&lt;p&gt;Rust of course had the &lt;code&gt;Copy&lt;/code&gt; trait which lets you do this, but the point is that the “ergonomics” are slightly nicer in Swift.&lt;/p&gt;
&lt;p&gt;Also, the string interpolation Swift does is &lt;em&gt;nice&lt;/em&gt;. That’s one thing I really wish Rust had. It’s Python-style string formatting macro is great, but being able to interpolate values (&lt;code&gt;&amp;quot;strings with \(variables)&amp;quot;&lt;/code&gt; or even &lt;code&gt;&amp;quot;embedded expressions like \(2 + 4)&amp;quot;&lt;/code&gt;) is very nice.&lt;/p&gt;
&lt;p&gt;Swift’s approach to strings in general seems well-thought-through and gives appropriate levels of attention to the details which make handling complex or non-Western languages much more manageable. As a typography geek, I appreciate this a great deal.&lt;/p&gt;
&lt;p&gt;That said, since Swift’s strings &lt;em&gt;do&lt;/em&gt; handle all those edge cases for Unicode, you lose some standard string access patterns and lose much (maybe all?) insight into the internal structure of the string. That may be good, and may be bad, depending on the circumstance. Like I said: trade-offs.&lt;/p&gt;
&lt;p&gt;Actually, on reading further, the way Swift handles Unicode strings is pretty nice. It &lt;em&gt;does&lt;/em&gt; give you insight into those, via specific methods for different representations. I particularly appreciate that it’s you deal with them as the standalone &lt;code&gt;String&lt;/code&gt; type as well as giving you direct access to the code points—and not just one Unicode code point set, but any of &lt;abbr&gt;UTF8&lt;/abbr&gt;, &lt;abbr&gt;UTF16&lt;/abbr&gt;, or &lt;abbr&gt;UTF32&lt;/abbr&gt; (Unicode scalars). Trust Apple to pay close attention to text.&lt;/p&gt;
&lt;p&gt;Rust’s strings are &lt;em&gt;good&lt;/em&gt;, but not quite as sophisticated (presumably for simplicity around the memory mapping). All Rust &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;str&lt;/code&gt; instances are composed of &lt;abbr&gt;UTF32&lt;/abbr&gt; Unicode scalars, encoded as &lt;abbr&gt;UTF8&lt;/abbr&gt; sequences. It doesn’t have some of the convenience methods Swift does for getting any of the other representations. That said, I expect this should show up rarely if at all in my ordinary usage. Importantly, the fundamental storage is the same: both use scalars.&lt;/p&gt;
&lt;p&gt;This was the first section where it didn’t feel like Rust was just a clear overall “winner” over Swift. Some of the trade offs between the language designs are more apparent here, and I do appreciate the “ergonomics” of Swift in a number of these things.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Operators, including overloading, and thoughts on brevity.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-v.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; The value (and challenge) of learning languages in parallel.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (iii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-iii.html" rel="alternate"></link><updated>2016-03-12T23:10:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-07:2015/rust-and-swift-iii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I just hit operators in the Swift book. First question: are operators special syntax, or are they sugar for &lt;code&gt;protocol&lt;/code&gt;s? (Every modern language I use or even have played with handles them as sugar for another language construct—Python, Ruby, Io, Elixir, and Rust, to name just a few ranging over a substantial variety of ages and styles.)&lt;/p&gt;
&lt;p&gt;Oh. I did the requisite digging, and operators are functions (which is okay) defined in the &lt;del&gt;global namespace (&lt;em&gt;:sigh:&lt;/em&gt;)&lt;/del&gt; Swift module.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I say “okay” rather than good because the justification offered is that this is the only way to make the operators work as binary operators between existing instances of types. But that elides the fact that, if that’s the case, it is so because of other language design decisions. This seems like a perfect place to use a &lt;code&gt;protocol&lt;/code&gt;, but perhaps (unlike Rust’s &lt;code&gt;trait&lt;/code&gt;) they’re not sufficiently capable to handle this? That’s an open question; I have no idea about the answer.&lt;/p&gt;
&lt;p&gt;Interestingly, Rust has several fewer operators than Swift, even apart from those mentioned in my &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;previous post&lt;/a&gt;. It drops the pre- and post-increment operators entirely (as does Python), since their results can always be accomplished in other ways with less potential for confusion. Swift keeps them, no doubt in part because most (Objective) C programs are deeply familiar with them and with idioms associated with them.&lt;/p&gt;
&lt;p&gt;I learned a few new things about Rust’s operators as well: the Boolean &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators and its bitwise &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; operators differ not only in that the former are &lt;em&gt;short-circuit&lt;/em&gt; operators and the latter are not. Obviously you can also do things like bit-wise flag operations with the latter, but the reference emphasizes the short-circuiting behavior. This makes perfect sense, but it wasn’t something I’d ever considered explicitly before.&lt;/p&gt;
&lt;p&gt;There is no ternary operator in Rust, because of how it handles the relationship between expressions and statements. Swift keeps it. That’s an interesting reflection of differences in design: Rust dropped it because &lt;code&gt;if&lt;/code&gt; blocks are expressions, so it’s redundant, and they have had a goal of removing unnecessary features. (See the discussion on dropping the ternary operator—with an interesting aside from Brendan Eich on JavaScript—&lt;a href="https://github.com/rust-lang/rust/issues/1698"&gt;here&lt;/a&gt;). Note that this is not a criticism of Swift, just an observation, though I do really like Rust’s expression-driven approach.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;??&lt;/code&gt; “nil coalescing operator”, on the other hand, I actively dislike. This seems like shorthand for the sake of shorthand, partly necessitated by the existing drive toward shorthand with optional types in Swift. Sometimes brevity can lead to decreased clarity. Eliding too much, or subsuming it into shorthand, makes the language harder to hold in your head and requires you to slow down more for parsing each line.&lt;/p&gt;
&lt;p&gt;Nothing surprising (or different) between the standard boolean operators in the two languages.&lt;/p&gt;
&lt;p&gt;I wonder how many times the word “concise” (or synonyms of it) appear in the Swift book? It’s increasingly clear to me reading that brevity is one of the primary design goals. Maybe it’s just me, but that actually seems a little weird. Brevity is good so far as it goes, but &lt;em&gt;legibility&lt;/em&gt; is much better.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Basic types and the syntax around them.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iv.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Language design tradeoffs, highlighted by string manipulation.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;See edit in discussion of functions and global namespace in &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;part ii&lt;/a&gt;.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (ii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html" rel="alternate"></link><updated>2016-03-12T23:15:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-06:2015/rust-and-swift-ii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;At first blush, I find the extra syntax around optionals in Swift more confusing than helpful. I think this comes down to my preference for a more Python-like approach: “Explicit is better than implicit” and “There should be one– and preferably only one –obvious way to do it” both militate against the multiple different ways you can handle optional values in Swift. &lt;code&gt;Optional&lt;/code&gt; types are created in one of two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with the &lt;code&gt;?&lt;/code&gt; operator on a type definition, creating an explicitly wrapped type which must be checked in some way.&lt;/li&gt;
&lt;li&gt;with the &lt;code&gt;!&lt;/code&gt; operator on a type definition, creating an “implicitly unwrapped optional” by forcibly unwrapping it (and creating a runtime error if the optional is empty)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After creating an optional, you can get at its contents by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using the &lt;code&gt;if let&lt;/code&gt; or &lt;code&gt;while let&lt;/code&gt; constructs to bind the optional value’s non-&lt;code&gt;nil&lt;/code&gt; value for a block&lt;/li&gt;
&lt;li&gt;using the &lt;code&gt;!&lt;/code&gt; operator on a variable name, explicitly unwrapping it (and creating a runtime error if the optional is empty)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By contrast, in Rust you always have to explicitly unwrap the item, using the &lt;code&gt;unwrap&lt;/code&gt; method or pattern matching. There are no implicitly unwrapped types. Moreover, there is no special syntax around creating optional types in Rust: you just declare them with an &lt;code&gt;Option&lt;/code&gt; type or another type that &lt;code&gt;impl&lt;/code&gt;s the &lt;code&gt;Option&lt;/code&gt; behavior. The “shortcut” behavior around error handling, &lt;code&gt;try!&lt;/code&gt;, isn’t special syntax, but application of another standard language construct (in this case, a macro).&lt;/p&gt;
&lt;p&gt;The discussion of &lt;code&gt;assert&lt;/code&gt; in the Swift book re-raises the question about the global namespace:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“You write an assertion by calling the global &lt;code&gt;assert(_:_:)&lt;/code&gt; function.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This continues to suggest strongly that Swift does in fact have a true global namespace, &lt;em&gt;not&lt;/em&gt; an automatically-imported prelude. That can make a big difference for applications in certain spaces (e.g. systems programming), when you might have good reason to want to replace the standard library’s approach with a different one. (See Rust’s &lt;a href="https://doc.rust-lang.org/book/no-stdlib.html"&gt;&lt;code&gt;#[no_std]&lt;/code&gt;&lt;/a&gt; docs and the &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1184-stabilize-no_std.md"&gt;related RFC&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; “strongly suggests” or no, I have now been &lt;a href="https://twitter.com/jckarter/status/708765262309228544" title="Tweet by one of the Swift developers"&gt;reliably informed&lt;/a&gt; that I was mistaken—and am happy to have been wrong here. As in Haskell, these functions are implicitly imported and belong to the &lt;code&gt;Swift&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;In Rust, &lt;code&gt;assert!&lt;/code&gt; is a macro, not a function, which is an interesting but perhaps not &lt;em&gt;especially&lt;/em&gt; important distinction in this particular case. (It might be, though; I’d have to see the implementation of each to see how they play out differently.)&lt;/p&gt;
&lt;p&gt;In any case, this also highlights another large difference between the two: testing is &lt;a href="https://doc.rust-lang.org/stable/book/testing.html"&gt;front and center&lt;/a&gt; in Rust, and barely receives a mention so far in the Swift book (and isn’t in the table of contents). Having language-level support for testing is a big deal.&lt;/p&gt;
&lt;p&gt;Language tour and first chapter of the language guide down, my sense is that Swift is a substantially better language than C or C++ (and presumably than Objective C, but since I don’t know that language I can’t speak to it) for app design, but that Rust is a better language yet. Both a far more modern than their predecessors, but they approach the same problems in surprisingly different ways, relatively similar syntax notwithstanding. So far, I like the Rust approach better.&lt;/p&gt;
&lt;p&gt;In particular, more syntax is not my preferred way to tackle these things. Providing good language constructs and primitives on which to build seems better in &lt;em&gt;many&lt;/em&gt; ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It substantially reduces the cognitive load for the developer, by keeping the number of constructs small and simply varying how they are applied.&lt;/li&gt;
&lt;li&gt;It increases the quality of those primitives, because it forces the language deadness to make sure they actually address the full problem space.&lt;/li&gt;
&lt;li&gt;It lets developers approach the same problem in ways the language design team may not have anticipated, and over time the community may find shared conventions that improve on the &lt;code&gt;std&lt;/code&gt; approach, and nothing has to change in the language spec (or the compiler!) to adopt those changes.&lt;/li&gt;
&lt;li&gt;In general, then, it makes change much easier to manage, and change can be community-driven rather than requiring the language design team to manage it.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-i.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Thoughts after reading the introduction to the Swift book.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Operators, including overloading, and thoughts on brevity.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This may of course be intentional on Apple’s part with Swift. Maintaining tight control over its tooling is very typical of modern Apple.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>Rust and Swift (i)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-i.html" rel="alternate"></link><updated>2015-09-07T13:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-04:2015/rust-and-swift-i.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I started writing these responses in a Slack channel of developers I participate in as I worked through the &lt;a href="https://developer.apple.com/swift/"&gt;Swift&lt;/a&gt; &lt;a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/"&gt;book&lt;/a&gt;. I realized after a bit that it would make a better blog post than chat room content, so here we are. This is all entirely off-the-cuff: me just thinking out loud as I read; this is by no means expert opinion.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;I later turned this into the first part of a whole &lt;a href="/rust-and-swift.html"&gt;series&lt;/a&gt; comparing Rust and Swift!&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;..&amp;lt;&lt;/code&gt; – seriously?&lt;/p&gt;
&lt;p&gt;That has to be one of the most annoying operators I’ve ever seen. It ends up with cognitive noise because &lt;code&gt;&amp;lt;name&lt;/code&gt; initially processes as “starting a generic” and you have to re-parse it visually and mentally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the first chapter of the Swift book, my impression is “a poor man’s Rust”; my gut feel based on that first pass and everything I’ve seen and read about Swift over the past two years is that it’s roughly what you would get if you took Rust’s syntax and replaced Rust’s hard safety goals with the aim of mapping to ObjC semantics. (To be fair to Apple, that interoperability was probably necessary.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An example that jumps out at me as immediately illustrative of the difference in approach the languages take is the way you pass structures by reference vs. copy. In Swift, that’s done via two completely distinct language constructs, &lt;code&gt;struct&lt;/code&gt;s and &lt;code&gt;class&lt;/code&gt;es respectively.&lt;/p&gt;
&lt;p&gt;In Rust, there is just the &lt;code&gt;struct&lt;/code&gt; type to handle both of those. They’re immutable unless you declare them with &lt;code&gt;mut&lt;/code&gt;, and you can pass them via copy simply by implementing the &lt;code&gt;Copy&lt;/code&gt; &lt;code&gt;trait&lt;/code&gt; (which seems roughly analogous to Swift’s &lt;code&gt;protocol&lt;/code&gt;, but I’ve not yet dig deeply enough to see how they differ). Those things aren’t baked into the language, but use simpler language building blocks to define behavior into he library.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I saw someone do a write up a while back arguing that Go isn’t a &lt;em&gt;bad&lt;/em&gt; language, it just isn’t a &lt;em&gt;good&lt;/em&gt; language. My first impression of Swift, after having spent the last month with Rust, is very much along those lines.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Huh. Here’s something that I appreciate about Rust, Haskell, and others now that I didn’t before: there’s a difference between implicitly/automatically importing a prelude or a given set of standard library functions, and having actually global functions. Does Swift actually have functions like &lt;code&gt;print&lt;/code&gt; in a global namespace, as the book seems to imply, or they being imported automatically &lt;em&gt;a la&lt;/em&gt; Rust/Haskell/etc.?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; it appears Swift does likewise, but that you can’t access the relevant module directly. Which is halfway there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hmm. Why have &lt;code&gt;Double&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;Float&lt;/code&gt;—just for ObjC interop, I guess?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; follow-up from a conversation with a friend: it’s because you have 32- and 64-bit architectures out there; sometimes you don’t want 64 bits of floating point precision for that reason. Note that Rust &lt;em&gt;also&lt;/em&gt; has this distinction; you can declare things as &lt;code&gt;f32&lt;/code&gt; or &lt;code&gt;f64&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extending the above note on &lt;code&gt;class&lt;/code&gt;es and &lt;code&gt;struct&lt;/code&gt;s and &lt;code&gt;protocol&lt;/code&gt;s vs. Rust’s approach: the same thing is true about &lt;code&gt;extension&lt;/code&gt;, which is a distinct concept from implementing a &lt;code&gt;protocol&lt;/code&gt;; again, in Rust these are both just handled with a single language construct, &lt;code&gt;impl&lt;/code&gt;. That’s not because &lt;code&gt;impl&lt;/code&gt; is overloaded, but rather because the underlying language machinery is the same for the two things. (edited)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(I’ve a feeling learning Swift is going to turn me into even more of a Rust fanboy.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reading the two books in close sequence like this is proving really productive mentally for thinking about how the two handle the same issues. I’ve never done anything quite like this before, and it’s fascinating.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have an increased appreciation for Rust’s use of semi-colons to turn expressions into statements, and thereby to distinguish clearly between the two (among other things, allowing for implicit return of anything that’s an expression).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another interesting comparison: Rust’s &lt;code&gt;match&lt;/code&gt; and Swift’s &lt;code&gt;switch&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; fill the same role of pattern matching. I’m curious to see how they differ. Does Swift do matching on arbitrary expressions?&lt;/p&gt;
&lt;p&gt;Also, I see where the syntax choices came from in both, and while I slightly prefer Rust’s, I think both make reasonably good sense; Swift’s will understandably be more familiar to C and ObjC programmers, and that’s a perfectly defensible approach. Seen that way, it is expanding on the C-style construct (even if it’s actually doing something substantially more sophisticated than that under the hood by being a form of actual pattern matching).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Basic types and the syntax around them.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="listicles"></category><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>On Editing Podcasts</title><link href="http://www.chriskrycho.com/2015/on-editing-podcasts.html" rel="alternate"></link><updated>2015-08-28T19:51:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-08-24:2015/on-editing-podcasts.html</id><summary type="html">&lt;p&gt;Last week, Alan Jacobs posted &lt;a href="http://text-patterns.thenewatlantis.com/2015/08/podcasts.html"&gt;a few thoughts&lt;/a&gt; on the overall quality of podcasts. While he’s &lt;a href="http://text-patterns.thenewatlantis.com/2015/08/podcasts-redux.html"&gt;since acknowledged&lt;/a&gt; that part of his challenge with podcasts is that his bar is extremely high, I think his original piece bears quoting and responding to briefly, including a few thoughts about how Stephen and I handle &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From his piece:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Podcasts, overall, are&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;People struggling to articulate for you stuff you could find out by looking it up on Wikipedia (e.g. In Our Time);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People using old-timey radio tricks to fool you into thinking that a boring and inconsequential story is fascinating (e.g. Serial);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People leveraging their celebrity in a given field as permission to ramble incoherently about whatever happens to come to their minds (e.g. The Talk Show); or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People using pointless audio-production tricks to make a pedestrian story seem cutting-edge (e.g. Radiolab).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I actually happen to basically agree with those critiques. However, one category he left out is: &lt;em&gt;people podcasting the way people blog&lt;/em&gt;. And this is where many of the most interesting podcasts I listen to come in. It’s also basically where Winning Slowly fits: you can think of our show like an audio version of a blog post. It’s not as carefully considered or edited as a long-form magazine piece (or, in its respective medium, a professionally produced radio show). But like blog posts, the fact that it’s a bit more off the cuff and that it’s &lt;em&gt;not&lt;/em&gt; the incredibly tight work that you find in a magazine can actually be attractive at times. Many of my favorite podcasts are very conversational and not heavily produced.&lt;/p&gt;
&lt;p&gt;But—and here I think Jacobs is absolutely correct—all of the shows I really enjoy make a point to edit their shows. They clean up the audio from artifacts, they cut segments that were off topic, they make sure the levels are good between the different members of the podcast, and so on. And while you don’t have to do those things to have a podcast, any more than you need to edit the things you write to have a blog, you do need to do them if you want to have a &lt;em&gt;good&lt;/em&gt; show. Sadly, this is where a number of shows I otherwise might enjoy show themselves to the door.&lt;/p&gt;
&lt;p&gt;There is a reason Stephen and I spent a whole &lt;a href="http://www.winningslowly.org/season-0.html"&gt;“beta” season&lt;/a&gt; of &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; working not only on what we wanted the show to be about, but finding its voice and tone, the structure of the episodes, and the quality of our audio. We wrestled with the audio output from mediocre microphones and adopted seemingly silly practices like putting blankets over our heads and microphones and laptops while recording so that we can get better sound spaces. We have taken the time to learn about compression and limiting and other audio editing techniques, and work hard to get the mix between our intro and outro music and our own voices correct. And we cut things mercilessly.&lt;/p&gt;
&lt;p&gt;For example, here is the blooper reel from &lt;a href="http://www.winningslowly.org/3.05/"&gt;3.05&lt;/a&gt;, which consists of only the &lt;em&gt;funny&lt;/em&gt; parts of what I cut from the show (there was probably as much again that I just removed and didn’t include):&lt;/p&gt;
&lt;audio class="media-embed" title="3.05 Bloopers" controls preload="metadata"&gt;
&lt;source src="http://www.podtrac.com/pts/redirect.m4a/cdn.winningslowly.org/3.05-bloopers.m4a"&gt; &lt;source src="http://www.podtrac.com/pts/redirect.mp3/cdn.winningslowly.org/3.05-bloopers.mp3"&gt;
&lt;/audio&gt;
&lt;p&gt;That doesn’t begin to touch all the “umms” and long pauses and overly heavy breathing and do-overs we cut out (though, because this was a particularly rough episode, it does give you an idea). The result, as I think most of our listeners would agree, is a show that’s pretty tight as far as the audio goes.&lt;/p&gt;
&lt;p&gt;In terms of content, different shows will have a different feel, of course. Some will require more planning. &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt;, a new show on learning Rust I’m hoping to launch later this week or early next week, requires a &lt;em&gt;lot&lt;/em&gt; of planning. &lt;a href="http://www.sap-py.com/"&gt;Sap.py&lt;/a&gt;, the fun little show my wife and I are about to launch, about her adventures in learning Python, requires basically &lt;em&gt;no&lt;/em&gt; planning. Winning Slowly doesn’t require a lot of formal planning, but it does require Stephen and me to keep a good eye on ongoing stories in our fields of technology, religion, ethics, and art, and to discuss big-picture ideas regularly and actively. Some episodes, we outline carefully (like the one we recorded today, which will come out next Tuesday). For others, we can basically just wing it (like the one we recorded a week ago and which comes out tomorrow). But if our podcast is good, and I really do think it is, it is because we take the time to work at making it good. Just like you have to do on a blog, or really anything else in life.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;13 published episodes, and one we dropped entirely!&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;One big difference between a podcast and a blog is that it actually takes a lot &lt;em&gt;more&lt;/em&gt; work to make a good podcast than a good blog post. Audio editing is much more involved than editing writing, and speaking intelligently for any length of time—whether off the cuff, with a detailed outline, or as an interviewer—is much harder to get right than writing, where you can polish to your heart’s content.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="podcasting"></category></entry><entry><title>High- and Low-Level Programming Languages</title><link href="http://www.chriskrycho.com/2015/high-and-low-level-programming-languages.html" rel="alternate"></link><updated>2015-08-07T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-08-07:2015/high-and-low-level-programming-languages.html</id><summary type="html">&lt;p&gt;It occurred to me while listening to &lt;a href="https://edwinb.wordpress.com"&gt;Edwin Brady&lt;/a&gt; talk about &lt;a href="http://www.idris-lang.org"&gt;Idris&lt;/a&gt; on the &lt;a href="http://typetheorypodcast.com"&gt;Type Theory Podcast&lt;/a&gt;,&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; having just spent a few weeks starting to learn &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;: “low-level” has at least two meanings in software. One is whether something has manual memory management or is garbage collected, reference counted, or otherwise manages memory itself. This is what people often mean when they talk about C, C++, etc. as being “low-level” and languages like Python or Ruby or C♯ being high-level.&lt;/p&gt;
&lt;p&gt;But then you toss in a language like &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;, and things start to get a little more complicated. Rust can do the same kind of direct memory management that makes C or C++ a good language for things like writing operating system kernels. [&lt;a href="https://github.com/torvalds/linux"&gt;1&lt;/a&gt;,&lt;a href="https://en.wikipedia.org/wiki/Architecture_of_Windows_NT"&gt;2&lt;/a&gt;,&lt;a href="http://www.opensource.apple.com/source/xnu/xnu-2782.10.72/"&gt;3&lt;/a&gt;] But it is also memory-safe, at least in ordinary usage. Like C♯, you have to be explicit about any unsafe code, with the &lt;code&gt;unsafe&lt;/code&gt; keyword on any blocks that do memory management that isn’t safe. And the vast majority of Rust code &lt;em&gt;is&lt;/em&gt; safe.&lt;/p&gt;
&lt;p&gt;More than that, though, Rust &lt;em&gt;feels&lt;/em&gt; like a high-level language. It gives you higher-kinded functions, generics, traits-based composition of types, hygienic macros, and the implementation of many important parts the essentials of the language in the library. If you need to patch something, or extend something, you can do that in a straightforward way. In short, it gives you lots of good abstractions like you would expect in a high-level language.&lt;/p&gt;
&lt;p&gt;Rust is low-level in that you can write (and people are writing) systems-level programs in it. It is high-level in that it lets you express things in ways normally associated with languages like Haskell or OCaml or Python or Ruby. To put it simply: it’s &lt;em&gt;low-level&lt;/em&gt; in its ability to address the computer, and &lt;em&gt;high-level&lt;/em&gt; in the abstractions it hands to a programmer. That’s a powerful combination, and I hope more languages embrace it in the years to come.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Yes, I know that’s insanely nerdy. What did you expect?&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="programming languages"></category><category term="rust"></category><category term="python"></category><category term="ruby"></category><category term="c"></category><category term="cplusplus"></category></entry><entry><title>Reeder 3 for Mac Beta</title><link href="http://www.chriskrycho.com/2015/reeder-3-for-mac-beta.html" rel="alternate"></link><updated>2015-07-30T09:26:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-30:2015/reeder-3-for-mac-beta.html</id><summary type="html">&lt;p&gt;Ooh, look! A beta for &lt;a href="http://reederapp.com/beta3/"&gt;Reeder 3&lt;/a&gt;! Shiny!&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="links"></category></entry><entry><title>SMuFL and MusicXML to W3C</title><link href="http://www.chriskrycho.com/2015/smufl-and-musicxml-to-w3c.html" rel="alternate"></link><updated>2015-07-28T12:29:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-28:2015/smufl-and-musicxml-to-w3c.html</id><summary type="html">&lt;p&gt;Another one in the music industry—but in this case, companies taking the long view and advancing the &lt;a href="http://www.sibeliusblog.com/news/makemusic-and-steinberg-transfer-development-of-musicxml-and-smufl-to-web-community-group/"&gt;good of the whole community&lt;/a&gt;, rather than just their own bottom line. (Spreadbury, the guy behind SMuFL, was one of the team laid off in the &lt;a href="%7Bfilename%7Dsibelius-8.md"&gt;aforementioned&lt;/a&gt; layoff from the Sibelius team, and now heads the product development for a new notation software tool from Steinberg.)&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="links"></category></entry><entry><title>Sibelius 8</title><link href="http://www.chriskrycho.com/2015/sibelius-8.html" rel="alternate"></link><updated>2015-07-28T12:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-28:2015/sibelius-8.html</id><summary type="html">&lt;p&gt;Avid: &lt;a href="http://www.sibeliusblog.com/news/sibelius-8-is-here/"&gt;charging Sibelius users more money than ever for less value than ever&lt;/a&gt;, after laying off their dev team a couple years ago just to maximize profits.&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly​&lt;/a&gt; material here, folks. They lost me (and many other) customers along the way, and they’re headed further down that road here.&lt;/p&gt;
&lt;p&gt;Subscription models for software can be valuable and reasonable—but the providers have to justify them with product to match. Avid isn’t, and hasn’t been. I’ve no doubt they’re continuing to profit in the short term, but this will no doubt erode their market position and waste an amazing product in the long term. Greed destroys good things.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="links"></category></entry><entry><title>Academic Markdown and Citations</title><link href="http://www.chriskrycho.com/2015/academic-markdown-and-citations.html" rel="alternate"></link><updated>2015-07-26T20:07:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-26:2015/academic-markdown-and-citations.html</id><summary type="html">&lt;p&gt;Much of my past few weeks were taken up with study for and writing and editing &lt;a href="http://www.chriskrycho.com/2015/not-exactly-a-millennium.html"&gt;a paper&lt;/a&gt; for one of my classes at Southeastern. I’ve been writing all of my papers in Markdown ever since I got here, and haven’t regretted any part of that… except that managing references and footnotes has been painful at times.&lt;/p&gt;
&lt;p&gt;Footnotes in Markdown look like this:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Here is some text.[^fn]

[^fn]: And the footnote!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This poses no problems at all for normal footnotes. Academic writing introduces a few wrinkles, though, which means that this has always been the main pain point of my use of Markdown for writing papers.&lt;/p&gt;
&lt;p&gt;Many academic citation styles (including the Chicago Manual of Style, on which our seminary’s &lt;a href="http://www.press.uchicago.edu/books/turabian/turabian_citationguide.html"&gt;style guide&lt;/a&gt; is based) tend to have a long version of the footnote appear first, followed by short versions later. Nearly &lt;em&gt;all&lt;/em&gt; academic citations styles make free use of the &lt;a href="https://en.wikipedia.org/wiki/Ibid."&gt;“ibid.”&lt;/a&gt; abbreviation for repeated references to save space, time, and energy. Here is how that might look in manually-written footnotes, citing the very paper in which I sorted this all out:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Some text in which I cite an author.[^fn1]

More text. Another citation.[^fn2]

What is this? Yet *another* citation?[^fn3]

[^fn1]: So Chris Krycho, &amp;quot;Not Exactly a Millennium,&amp;quot; chriskrycho.com, July 22,
    2015, http://www.chriskrycho.com/2015/not-exactly-a-millennium.html
    (accessed July 25, 2015), ¶6.

[^fn2]: Contra Krycho, ¶15, who has everything *quite* wrong.

[^fn3]: ibid.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This seems straightforward enough, though it is a bit of work to get the format right for each different kind of citation (articles, books, ebooks, electronic references to articles…). Things &lt;em&gt;really&lt;/em&gt; get complicated in the editing process, though. For example, what if I needed to flip the order of some of these notes because it became clear that the paragraphs needed to move around? This happens &lt;em&gt;frequently&lt;/em&gt; during the editorial process. It becomes particularly painful when dealing with the “ibid.”-type references, because if I insert a new reference between two existing references, I have to go back in and manually add all that the reference content again myself.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enter Pandoc and &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;.&lt;/p&gt;
&lt;section id="managing-citations" class="level2"&gt;
&lt;h2&gt;Managing Citations&lt;/h2&gt;
&lt;p&gt;The idea of plain-text solutions to academic writing is not especially new; only the application of Markdown to it is—and that, only relatively. People have been doing this, and &lt;a href="http://kieranhealy.org/blog/archives/2014/01/23/plain-text/"&gt;documenting their approaches&lt;/a&gt;, for quite a while. Moreover, tools for managing references and citations have existed for quite some time as well; the entire &lt;a href="http://www.latex-project.org"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/a&gt; toolchain is largely driven by the concerns of academic publishing, and as such there are tools in the &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; ecosystem which address many of these problems.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One such is &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;, and the later (more capable) &lt;span class="tex"&gt;BibL&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;: tools for managing bibliographies in &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; documents. The &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;/&lt;span class="tex"&gt;BibL&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; approach to managing citations in a document is the use of the &lt;code&gt;\cite&lt;/code&gt; command, with the use of “keys” which map to specific documents: &lt;code&gt;\cite{krycho:2015aa}&lt;/code&gt;, for example.&lt;/p&gt;
&lt;p&gt;This is not Markdown, of course. But other folks who have an interest in Markdown and academic writing have put their minds to the problem already. Folks such as Jon MacFarlane, the originator and lead developer of &lt;a href="http://pandoc.org"&gt;Pandoc&lt;/a&gt;, perhaps the single most capable text-conversion tool in existence. As it turns out, Pandoc Markdown supports a &lt;a href="http://pandoc.org/README.html#citations"&gt;citation extension&lt;/a&gt; to the basic markup. It’s just a variant on the &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; citation style that feels more at home in Markdown: a pair of braces and an &lt;code&gt;@&lt;/code&gt;, plus the citation key, like &lt;code&gt;[@krycho]&lt;/code&gt;. Moreover, Pandoc knows how to use &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; libraries, as well as many others, and &lt;a href="http://citationstyles.org"&gt;Citation Style Languages&lt;/a&gt; (&lt;abbr&gt;CSL&lt;/abbr&gt;s) to generate markup in &lt;em&gt;exactly&lt;/em&gt; the format needed for any given citation style.&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instead of writing out all those citations details by hand, then, I can just format my footnotes like this (assuming the citekey I had set up for the article was &lt;code&gt;krycho:revelation:2015&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Some text in which I cite an author.[^fn1]

More text. Another citation.[^fn2]

What is this? Yet *another* citation?[^fn3]

[^fn1]: [@krycho:revelation:2015], ¶6.

[^fn2]: Contra [@krycho:revelation:2015], ¶15, who has everything *quite* wrong.

[^fn3]: [@krycho:revelation:2015].&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is much simpler and, importantly, has the exact same form for each citation. Pandoc will take care of making sure that the first reference is in the long form, later references are in the short form, and repeated references are in the “ibid.” form as appropriate. It even renders a properly sorted and structured Works Cited section.&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The slightly complex command I used to generate a Word document from a Markdown file with citations (using my own &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; library and the Chicago Manual of Style &lt;abbr&gt;CSL&lt;/abbr&gt;) on the command line is:&lt;a href="#fn5" class="footnoteRef" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;$ pandoc revelation.md --smart --standalone \
--bibliography /Users/chris/Dropbox/writing/library.bib \
--csl=/Users/chris/Dropbox/writing/chicago.csl -o revelation.docx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see an extended sample of this kind of usage in practice, take a look at the &lt;a href="http://www.chriskrycho.com/2015/not-exactly-a-millennium.txt"&gt;Markdown source&lt;/a&gt; for the paper I wrote last week, using exactly this approach. Every footnote that references a specific source simply has a cite key of this variety. The header metadata includes a path to the bibliography file and a &lt;abbr&gt;CSL&lt;/abbr&gt;. (These could be configured globally, as well, but I chose to specify them on a per-file basis so that if I want or need to use &lt;em&gt;different&lt;/em&gt; styles or a separate library for another file at a later time, I can do so with a minimum of fuss. More on this below.)&lt;/p&gt;
&lt;p&gt;&lt;a href="/downloads/revelation.docx"&gt;Here&lt;/a&gt; is the rendered result. You can see that it automatically generated everything right down to the “ibid.”-style footnotes. I made a few, fairly minimal tweaks (replacing the search &lt;abbr&gt;URL&lt;/abbr&gt; with an &lt;abbr&gt;ATLA&lt;/abbr&gt; database catalog reference and inserting a section break before the Works Cited list), and turned the paper in—confident, for the first time since I started seminary, that all of the references were in the right order and the right format. With carefully formatted reference documents (with their own style sets),&lt;a href="#fn6" class="footnoteRef" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; I was able to generate an actually &lt;em&gt;nice&lt;/em&gt; &lt;abbr&gt;&lt;a href="/downloads/revelation-pretty.pdf"&gt;PDF&lt;/a&gt;&lt;/abbr&gt; version of the paper from another Word document, as well.&lt;a href="#fn7" class="footnoteRef" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And, better yet, you don’t even have to put citations in footnotes. As &lt;a href="https://twitter.com/anjdunning"&gt;@anjdunning&lt;/a&gt; pointed out in a &lt;a href="https://twitter.com/anjdunning/status/625415216575197184"&gt;tweet&lt;/a&gt; response to the original version of this post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.twitter.com/chriskrycho"&gt;@chriskrycho&lt;/a&gt; Don’t put citekeys in a footnote: write everything as inline citations and it will also generate notes when asked by CSL def.&lt;br /&gt;
&lt;a href="https://twitter.com/anjdunning/status/625415216575197184"&gt;∞&lt;/a&gt; July 26, 2015 17:19&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In my standard example from above, then, you could simply do this:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Some text in which I cite an author.[@krycho:revelation:2015, ¶6]

More text. Another citation.[Contra @krycho:revelation:2015, ¶15, who has
everything *quite* wrong.]

What is this? Yet *another* citation?[@krycho:revelation:2015]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will generate the same markup for my purposes here; and as &lt;a href="https://twitter.com/anjdunning"&gt;@anjdunning&lt;/a&gt; noted, it goes one step further and does what’s appropriate for the &lt;abbr&gt;CSL&lt;/abbr&gt;. This might be handy if, for example, you wanted to use the Chicago notes-bibliography style in one format, but switch to a simpler parenthetical citation style for a different medium—or even if you had a paper to submit to different journals with different standards. Having the citations inline thus has many advantages.&lt;/p&gt;
&lt;p&gt;Now, there are still times when you might want to split those out into distinct footnotes, of course. That second one is a good candidate, at least for the way I tend to structure my plain-text source. I find it useful in the case of &lt;em&gt;actual&lt;/em&gt; footnote content—i.e. text that I’m intentionally leaving aside from the main text, even with reference to other authors—to split it out from the main flow of the paragraph, so that someone reading the plain text source gets a similar effect to someone reading the web or Word or &lt;abbr&gt;PDF&lt;/abbr&gt; versions, with the text removed from the flow of thought. In any case, it’s quite nice that Pandoc has the power and flexibility such that you don’t &lt;em&gt;have&lt;/em&gt; to.&lt;/p&gt;
&lt;p&gt;Finally, you don’t actually &lt;em&gt;need&lt;/em&gt; the brackets around the citekey, depending on how you’re using the reference. If you wanted to cite the relevant author inline, you can—and it will properly display both the inline name and a reference (footnote, parenthetical, etc.) in line with the &lt;abbr&gt;CSL&lt;/abbr&gt; you’ve chosen. If I were going to quote myself in a paper, I would do something like this:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;As @krycho:revelation:2015 comments:

&amp;gt; This was a hard paper to write.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is &lt;em&gt;extremely&lt;/em&gt; powerful, and while I didn’t take advantage of it in my first paper using these tools, you can bet I will be in every future paper I write.&lt;/p&gt;
&lt;section id="all-those-references" class="level3"&gt;
&lt;h3&gt;All those references&lt;/h3&gt;
&lt;p&gt;Of course, as is probably apparent, managing a &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; library by hand is no joke. Entries tend to look like this:&lt;/p&gt;
&lt;pre class="tex"&gt;&lt;code&gt;@book{beale:revelation:2015,
        Date-Added = {2015-07-20 21:16:02 +0000},
        Date-Modified = {2015-07-20 21:21:05 +0000},
        Editor = {G. K. Beale and David H. Campbell},
        Publisher = {William B. Eerdmans Publishing Company},
        Title = {Revelation: A Shorter Commentary},
        Year = {2015}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While there is a lot of utility in having that data available in text, on disk, no one wants to &lt;em&gt;edit&lt;/em&gt; that by hand.&lt;a href="#fn8" class="footnoteRef" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; Gladly, editing it by hand is not necessary. For this project, I used the freely available &lt;a href="http://bibdesk.sourceforge.net"&gt;BibDesk&lt;/a&gt; tool, which is a workable (albeit not very pretty and not &lt;em&gt;very&lt;/em&gt; capable) manager for &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="//cdn.chriskrycho.com/images/bibdesk.png" title="Not very pretty, but it does work" alt="BibDesk – open to the library for my Revelation paper" /&gt;&lt;figcaption&gt;BibDesk – open to the library for my Revelation paper&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once I filled in the details for each item and set a citekey for it, I was ready to go: BibDesk just stores the files in a standard &lt;code&gt;.bib&lt;/code&gt; file on the disk, which I specified per the Pandoc command above.&lt;/p&gt;
&lt;p&gt;BibDesk gets the job done alright, but only alright. Using a citation and reference management tool was a big win, though, and I fully intend to use one for every remaining project while in seminary—and, quite possibly, for other projects as well. Whether that tool is BibDesk or something else is a different matter entirely. (More on this below.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="to-the-web" class="level2"&gt;
&lt;h2&gt;To the web!&lt;/h2&gt;
&lt;p&gt;I wanted something more out of this process, if I could get it. One of the reasons I use plain text as a source is because from it, I can generate Word documents, &lt;abbr&gt;PDF&lt;/abbr&gt;s, and &lt;em&gt;this website&lt;/em&gt; with equal ease. However, Python Markdown knows nothing of &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; or citekeys, to my knowledge—and since I render everything for school with Pandoc, I have long wanted to configure &lt;a href="http://docs.getpelican.com/en/3.6.0/"&gt;Pelican&lt;/a&gt; to use Pandoc as its Markdown engine instead of Python Markdown anyway.&lt;/p&gt;
&lt;p&gt;As it happens, I actually set this up about a month ago. The process was pretty simple:&lt;a href="#fn9" class="footnoteRef" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I installed the &lt;a href="https://github.com/jstvz/pelican-pandoc-reader"&gt;pandoc-reader&lt;/a&gt; Pelican extension.&lt;/li&gt;
&lt;li&gt;I set the plugin path in my Pelican configuration file.&lt;/li&gt;
&lt;li&gt;I specified the arguments to Pelican I wanted to use.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The only additional tweaks necessary to get citation support were calling it with the &lt;code&gt;'--filter pandoc-citeproc'&lt;/code&gt; arguments, which lets it process any bibliography data supplied in the header metadata for the files. Calling Pandoc with &lt;code&gt;--bibliography &amp;lt;path to bibliography&amp;gt;&lt;/code&gt; (as in my example above) is a &lt;a href="http://pandoc.org/README.html#citation-rendering"&gt;shortcut&lt;/a&gt; for calling it with &lt;code&gt;--metadata &amp;lt;path to bibliography&amp;gt;&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;--filter pandoc-citeproc&lt;/code&gt; arguments. I could just supply the bibliography directly in the call from Pelican, but this would limit me to using a single bibliography file for &lt;em&gt;all&lt;/em&gt; of my posts—something I’d rather not limit myself to, since it might make sense to build up bibliographies around specific subjects, or even to have smaller bibliographies associated with each project (exported from the main bibliography), which could then be freely available along with the contents of the paper itself.&lt;a href="#fn10" class="footnoteRef" id="fnref10"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; (On this idea, see a bit more below under &lt;strong&gt;The Future&lt;/strong&gt;.)&lt;/p&gt;
&lt;p&gt;One word of warning: Pandoc is much slower to generate &lt;abbr&gt;HTML&lt;/abbr&gt; with &lt;code&gt;--filter pandoc-citeproc&lt;/code&gt; than &lt;em&gt;without&lt;/em&gt; the filter, and the larger your site, the more you will feel this. (The time to generate the site from scratch jumped from about 10s to about 30s for me, with 270 articles, 17 drafts, 2 pages, and 1 hidden page, according to Pelican.) Pandoc has to process &lt;em&gt;every&lt;/em&gt; article to check for citations, and that’s no small task. However, if you have Pelican’s content caching turned on, this is a one-time event. After that, it will only be processing any new content with it; total generation time is back down where it was before for me: the effort is all in generating the large indexes I use to display the content for the landing pages and for category and tag archives.&lt;/p&gt;
&lt;p&gt;And the result: that same paper, rendered to &lt;abbr&gt;HTML&lt;/abbr&gt; &lt;a href="http://www.chriskrycho.com/2015/not-exactly-a-millennium.html"&gt;on my website&lt;/a&gt;, with citations and works cited, generated automatically and beautifully.&lt;/p&gt;
&lt;section id="other-site-generators" class="level3"&gt;
&lt;h3&gt;Other site generators&lt;/h3&gt;
&lt;p&gt;I don’t know the situation around using Pandoc itself in other generators, including Jekyll—I simply haven’t looked. I do know, however, that there &lt;em&gt;is&lt;/em&gt; some tooling for Jekyll specifically to allow a similar workflow. If you’re using Jekyll, it looks like your best bet is to check out &lt;a href="https://github.com/inukshuk/jekyll-scholar"&gt;jekyll-scholar&lt;/a&gt; and the &lt;a href="https://github.com/inukshuk/citeproc-ruby"&gt;citeproc-ruby&lt;/a&gt; project, which (like pandoc-citeproc) enables you to embed citations and filter them through &lt;abbr&gt;CSL&lt;/abbr&gt;s to generate references automatically. As a note: you should definitely be able to get those working on your own deployment sites, but I have no idea whether it’s possible to do them with the GitHub Pages variant of Jekyll. (If anyone who reads this knows the answer to that, let me know on Twitter or App.net, and I’ll update the post accordingly.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-future" class="level2"&gt;
&lt;h2&gt;The future&lt;/h2&gt;
&lt;p&gt;In addition to continuing to use &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; with BibDesk as a way of managing my citations in the short term, I’m thinking about other ways to improve this workflow. One possibility is integrating with &lt;a href="http://scholdoc.scholarlymarkdown.com"&gt;Scholdoc&lt;/a&gt; as it matures, instead of &lt;a href="http://pandoc.org"&gt;pandoc&lt;/a&gt;, and maybe (hopefully, albeit unlikely) even contributing to it somewhat. I’m also open to using other citation library tools, though my early explorations with Mendeley and Zotero did not particularly impress me.&lt;/p&gt;
&lt;p&gt;There are substantial advantages for the applications (and thus for most users) to maintaining the data in an application-specific format (e.g. an SQLite database) rather than on the file system—but the latter has the advantage of making it much easier to integrate with other tools. However, Zotero and Mendeley both natively export to &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; format, and Mendeley natively supports &lt;a href="http://blog.mendeley.com/tipstricks/howto-use-mendeley-to-create-citations-using-latex-and-bibtex/"&gt;sync&lt;/a&gt; to a &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; library (Zotero can do the same, but via third-party &lt;a href="https://zoteromusings.wordpress.com/tag/bibtex/"&gt;plugins&lt;/a&gt;), so those remain viable options, which I may use for future projects.&lt;/p&gt;
&lt;p&gt;I also want to look at making my library of resources available publicly, perhaps (a) as a standalone library associated with each project, so that anyone who wants to can download it along with the Markdown source to play with as an example and (b) as a general library covering my various reading and research interests, which will certainly be irrelevant to most people but might nonetheless provide some value to someone along the way. I’m a big fan of making this kind of data open wherever possible, because people come up with neat things to do with it that the original creators never expect. Not &lt;em&gt;everything&lt;/em&gt; should be open—but lots of things should, and this might be among them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I’m pretty happy with the current state of affairs, the aforementioned interest in other reference managers notwithstanding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I can set up the citations &lt;em&gt;once&lt;/em&gt;, in a tool designed to manage references, instead of multiple times in multiple places.&lt;/li&gt;
&lt;li&gt;I can use Pandoc and a &lt;abbr&gt;CSL&lt;/abbr&gt; to get the citations formatted correctly throughout a paper, including generating the bibliography automatically.&lt;/li&gt;
&lt;li&gt;I can use the same tooling, integrated into my static site generator, to build a web version of the content—with no extra effort, once I configured it properly the first time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps most importantly, this helps me meet one of my major goals for all my writing: to have a single canonical &lt;em&gt;source&lt;/em&gt; for the content, which I will be able to access in the future regardless of what operating system I am using or what publishing systems come and go. Simple plain text files—Markdown—get me there. Now I’ve put good tools around that process, and I love it even more.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Coming up with names for footnotes in Markdown can be painful in general for long documents. If you try to name them manually, like I do for posts on my website, you will very quickly end up wasting time on the names. If you try to number them, they will end up out of order in a hurry. My own &lt;a href="http://2012-2013.chriskrycho.com/web/markdown-and-academic-writing/"&gt;previous solution&lt;/a&gt; to this problem quickly became unwieldy for larger papers, and required a &lt;em&gt;lot&lt;/em&gt; of hand-editing. Gladly, I no longer deal with that manually. Instead, I do all my drafting in &lt;a href="http://www.ulyssesapp.com"&gt;Ulysses&lt;/a&gt;, where you just type &lt;code&gt;(fn)&lt;/code&gt; and it creates a footnote automatically, and will move that footnote &lt;em&gt;object&lt;/em&gt; around transparently as you edit, handling all the number-setting, etc. on its own.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;The irony of site for software which boasts that it is “a high-quality typesetting system” and looks like &lt;a href="http://www.latex-project.org"&gt;&lt;em&gt;this&lt;/em&gt;&lt;/a&gt; is not lost on me…&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;If you used the installers on Pandoc’s website, &lt;code&gt;pandoc-citeproc&lt;/code&gt; comes with it. If you installed it via a package manager (e.g. by running &lt;code&gt;brew install pandoc&lt;/code&gt;), it may not have, so you’ll need to install it manually yourself (e.g. &lt;code&gt;brew install pandoc-citeproc&lt;/code&gt;).&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;All of the content, including the rendered footnotes and the bibliography, has sensible content types set on it: headers are headers, body text is body text, etc. You can then customize to match the specifications of your style guide. I have a Chicago/Turabian style set set up with the formatting rules to match.&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Actually, it was even hairier than this, because I also had a &lt;code&gt;--reference-docx path/to/template.docx&lt;/code&gt; specified. If you think it’s perhaps a bit too complex, well, I agree. I plan to turn that into a command line alias in pretty short order, because remembering it every time is just not going to happen.&lt;a href="#fnref5"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Using the &lt;code&gt;--reference-docx&lt;/code&gt; argument to Pandoc, you can hand it a document that already uses your desired style set, so you don’t have to go in and apply it manually.&lt;a href="#fnref6"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;I could have done that with Pandoc’s &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; &lt;abbr&gt;PDF&lt;/abbr&gt; tools, as well, but didn’t really feel like taking the time to tweak the &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; template for it.&lt;a href="#fnref7"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;Probably someone does, but not me, and not most people!&lt;a href="#fnref8"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;If you’re using Pelican, you can take a look at my Pelican configuration file &lt;a href="https://github.com/chriskrycho/chriskrycho.com/blob/ef3ecbca1765750392086355aeae026c1159d4b9/pelicanconf.py#L109"&gt;here&lt;/a&gt; to see the full configuration for using Pandoc this way.&lt;a href="#fnref9"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn10"&gt;&lt;p&gt;Optimally, I’d really just prefer to be able to set &lt;em&gt;all&lt;/em&gt; of these arguments at a per-file level—i.e., not use &lt;code&gt;--filter pandoc cite-proc&lt;/code&gt; unless the file actually specifies a bibliography. And I could hack Pelican to do that; I’ve actually already &lt;a href="https://github.com/liob/pandoc_reader/pull/5"&gt;messed around&lt;/a&gt; with other, semi-related bits regarding Pelican and Pandoc’s shared handling of &lt;abbr&gt;YAML&lt;/abbr&gt; metadata. But I’d prefer to keep my installation as “vanilla” as possible to minimize the cost of setting things up again on a new machine or after a crash, etc.&lt;a href="#fnref10"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="workflow"></category><category term="writing"></category></entry><entry><title>HTML5 Location, &lt;base&gt;, and SVG</title><link href="http://www.chriskrycho.com/2015/html5-location-base-and-svg.html" rel="alternate"></link><updated>2015-07-02T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-20:2015/html5-location-base-and-svg.html</id><summary type="html">&lt;p&gt;For quite some time, I have been frustrated by a bug in HolyBible.com: Firefox would not render SVGs using the &lt;code&gt;&amp;lt;use xlink:xhref=&amp;quot;#some-SVG-ID&amp;quot;&amp;gt;&amp;lt;/use&amp;gt;&lt;/code&gt; pattern. Today, I set aside my ongoing work on new user-facing functionality and dedicated what working time I had to hunting down the cause of this and fixing it at last.&lt;/p&gt;
&lt;p&gt;I was surprised to find the culprit: the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag. If you don’t know what the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag is, you’re not alone. It is &lt;em&gt;not&lt;/em&gt; used all that much in general, and I had never actually seen it on a site before starting on this project last year.&lt;/p&gt;
&lt;p&gt;So what went wrong? How do these two things play together?&lt;/p&gt;
&lt;p&gt;I am using (and reusing) SVG items throughout the HolyBible.com interface, taking advantage of the ability to define symbols and reference them with the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag, like so:&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;svg version=&amp;quot;1.1&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot; xmlns:ev=&amp;quot;http://www.w3.org/2001/xml-events&amp;quot; style=&amp;quot;display: none&amp;quot;&amp;gt;
  &amp;lt;symbol id=&amp;quot;logo-shape&amp;quot; viewBox=&amp;quot;0 0 256 256&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Logo&amp;lt;/title&amp;gt;
    &amp;lt;desc&amp;gt;The HolyBible.com logo: sunrise breaking over an open book (the Bible).&amp;lt;/desc&amp;gt;
    &amp;lt;path id=&amp;quot;logo-light&amp;quot; d=&amp;quot;M172.1 116.3l5.1-4.1-12.5-.5 32-26.3-41.4 18.4 11-20.1L148 96l12.2-37.5L138.8 91l.1-36.2-10.3 34.4L114 36.1l4.3 54.9-22.2-34.9 13 39.9-18.3-12.4 11 20.1-42.5-19.2 32.8 26.9-10.4.8 4.4 3.9c13.1-1.6 27.4-2.7 42.4-2.7 15.4 0 30.1 1.2 43.6 2.9z&amp;quot;/&amp;gt;
    &amp;lt;path id=&amp;quot;logo-book&amp;quot; d=&amp;quot;M199.9 219.9c-47.4-9.8-96.4-9.8-143.8 0-6-28.9-12-57.7-17.9-86.6 59.3-12.3 120.4-12.3 179.7 0-6 28.9-12 57.8-18 86.6z&amp;quot;/&amp;gt;
  &amp;lt;/symbol&amp;gt;
&amp;lt;/svg&amp;gt;

&amp;lt;!-- somewhere else on the page --&amp;gt;
&amp;lt;svg&amp;gt;
  &amp;lt;use xlink:href=&amp;quot;#logo-shape&amp;quot;&amp;gt;&amp;lt;/use&amp;gt;
&amp;lt;/svg&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Throughout all my early prototyping, this worked perfectly across all modern browsers. (For more, see &lt;a href="https://css-tricks.com/svg-sprites-use-better-icon-fonts/"&gt;CSS Tricks&lt;/a&gt;.) Now, when I started moving from the prototype phase into actually building the application in Angular last fall, I learned that you have to set the base URL for the application using the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag to use the HTML5 Location API with Angular 1.x. If you want URL-based, rather than &lt;code&gt;#&lt;/code&gt;-based navigation in an Angular app, you need this. Following the recommendation of whatever documentation and tutorials I found, I set it so:&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;base href=&amp;quot;/&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this was the recommendation I saw in every bit of documentation and every tutorial, so I assumed it would have no problems. As it turns it, that’s not the case. (This is a &lt;a href="http://www.chriskrycho.com/2015/how-to-build-a-single-page-app-api-right.html"&gt;recurring theme&lt;/a&gt; in my experience with Angular.) In Chrome, Safari, and IE9+, this works exactly as expected. In Firefox, however, it does &lt;em&gt;not&lt;/em&gt;. The use of the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag changes the behavior of &lt;code&gt;#&lt;/code&gt;-based URLs on a page. Specifically, it makes it so that if you’re at a URL that &lt;em&gt;isn’t&lt;/em&gt; the base route, anchor links don’t behave as expected. In order to make the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag as expected, we would have to use the same URL as the base tag. Among other things, this would require making sure that any place we used the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag, we would have to set that—not exactly a good idea, given that it would entail an awful lot of changes if the base URL were ever changed.&lt;/p&gt;
&lt;p&gt;What if, instead, we did this?&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;base href=&amp;quot;&amp;#39; + document.location.origin + &amp;#39;&amp;quot; /&amp;gt;&amp;#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, when the page renders, it writes the document location based on the &lt;em&gt;current&lt;/em&gt; location. The URL history still behaves as expected with Angular, but the relative URLs for IDs behave as expected in Firefox again, while not breaking the behavior in any other browsers.&lt;/p&gt;
&lt;p&gt;But… then you’ll navigate to another page, and Firefox will be back to not working.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/angular/angular.js/issues/8934#issuecomment-56568466"&gt;solution&lt;/a&gt;, it turns out, only came into being after I’d done the initial implementation, and I have no idea how much later it found its way into the Angular docs. However, even though it now &lt;em&gt;exists&lt;/em&gt; in the docs, it’s by no means obvious why you should do it this way, and certainly no mention of SVG! This might not seem odd to you… but it should, given that the only reason that Angular introduced this API change was to account for &lt;em&gt;exactly this issue&lt;/em&gt;.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the Angular docs note, leaving out the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag means all your URLs have to be absolute if you want to use HTML5 location and the &lt;code&gt;$locationProvider&lt;/code&gt;. If you want to use SVGs with &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; and Firefox, though, that’s what you have to do (and therefore that’s what I’m doing).&lt;/p&gt;
&lt;p&gt;Fun times, right?&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The closest it gets is this reference:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Links that only contain a hash fragment (e.g. &lt;code&gt;&amp;lt;a href=&amp;quot;#target&amp;quot;&amp;gt;&lt;/code&gt;) will only change &lt;code&gt;$location.hash()&lt;/code&gt; and not modify the url otherwise. This is useful for scrolling to anchors on the same page without needing to know on which page the user currently is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even this, however, only &lt;em&gt;hints&lt;/em&gt; at the root of the SVG issue.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category><category term="angularjs"></category><category term="javascript"></category></entry><entry><title>How to Build a Single-Page App API Right</title><link href="http://www.chriskrycho.com/2015/how-to-build-a-single-page-app-api-right.html" rel="alternate"></link><updated>2015-06-09T22:16:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-09:2015/how-to-build-a-single-page-app-api-right.html</id><summary type="html">&lt;p&gt;When I was first working on HolyBible.com, I struggled for quite a while to wrap my head around the right way to structure its API—and in truth, I actually didn’t come up with what I would call the &lt;em&gt;right&lt;/em&gt; solution. I came up with a &lt;em&gt;working&lt;/em&gt; solution, and the site performs all right, most of the time. However, our goal as developers shouldn’t be “all right, most of the time.” It should be “really well, all the time.” A big part of what I did wrong came from the bad advice I found in reading up on the issue along the way. This is my shot at helping you, dear reader, avoid making the same mistake.&lt;/p&gt;
&lt;section id="the-challenge" class="level2"&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;When building a client-side application, we need to get the data for each view so that we can render it. In the case of HolyBible.com, that means everything from actual Bible text to study Bible notes, about pages, etc. The question is &lt;em&gt;how&lt;/em&gt; to do this: we need to be able to load an actual page from our server, and we need a way to request data (rather than whole pages) from the server.&lt;/p&gt;
&lt;p&gt;(More experienced developers already know where this is going: that last sentence there has the key to this whole thing. I know. But the internet &lt;em&gt;doesn’t.&lt;/em&gt; I learned this the hard way.)&lt;/p&gt;
&lt;section id="the-mistake" class="level3"&gt;
&lt;h3&gt;The mistake&lt;/h3&gt;
&lt;p&gt;Here’s the mistake I made: I built the Bible data API as (essentially) a &lt;em&gt;single&lt;/em&gt; endpoint. When I went looking for advice on how to build this in Angular and Node/Express, every single tutorial or blog post I found outlined the same basic solution: routes for your data endpoints, and catch-all route that returns the basic frame page for everything else. So, for HolyBible.com, that would come out with route matchers for e.g. &lt;code&gt;/data/gen.1.1&lt;/code&gt;, and for any other specific routes needed (for other views, static resources, etc.), with a default behavior of just dropping a static, basically empty template at the catchall &lt;code&gt;*&lt;/code&gt; route. Then, once the application has loaded, it can inspect the URL and load the relevant data.&lt;/p&gt;
&lt;p&gt;This works. It’s exactly what I did on HolyBible.com, in fact. But it’s &lt;em&gt;slow&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: the time until the initial page load is actually relatively quick (though I plan to improve it substantially over the next couple months). The real problem is that the initial page load &lt;em&gt;doesn’t include any content&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;hate&lt;/em&gt; this. That’s why people are on the site: not to see my neat skills with JavaScript, just to read the Bible. And they have to wait, because once the page &lt;em&gt;does&lt;/em&gt; load, Angular has to spin up the full application, see what content &lt;em&gt;should&lt;/em&gt; have been loaded, and request it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solution" class="level3"&gt;
&lt;h3&gt;The solution&lt;/h3&gt;
&lt;p&gt;Don’t write &lt;em&gt;one&lt;/em&gt; API. Write &lt;em&gt;two&lt;/em&gt;. They should be structured nearly identically, but one of them will be a &lt;em&gt;page&lt;/em&gt; API endpoint, and one will be a &lt;em&gt;data&lt;/em&gt; API endpoint. In the context of HolyBible.com, here’s how that would play out.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; One endpoint would be based purely on the standard URL, something like &lt;code&gt;holybible.com/jhn.3.16&lt;/code&gt;. The other would be to retrieve a set of &lt;em&gt;data&lt;/em&gt; associated with a given address, like &lt;code&gt;holybible.com/data/jhn.3.16&lt;/code&gt;. This is only a little different from the approach suggested above, but that small difference matters—in fact, it matters a &lt;em&gt;lot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Instead of having the &lt;code&gt;/jhn.3.16&lt;/code&gt; route get handled by a catchall &lt;code&gt;*&lt;/code&gt; route on the back end, it gets its own API endpoint, which looks for URLS of this shape and hands back a full page. That API endpoint is responsible to actually render the content of the page appropriately—in this case, with something like the whole chapter of John 3.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;That&lt;/em&gt; gets handed back to the browser, so the very first thing the user sees is not a blank page while the JavaScript framework spins up and requests data, but rather &lt;em&gt;the Bible text they asked for in the first place&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Meanwhile, the JavaScript framework &lt;em&gt;can&lt;/em&gt; spin up, and load any required session data, etc. and start managing the UI like normal. Once we get to this point, the framework can go ahead and request a data payload from the &lt;code&gt;/data/&amp;lt;reference&amp;gt;&lt;/code&gt; endpoint. So, for example, if there is a navigation control on the page (as on HolyBible.com and indeed most sites), clicking to navigate to Job 14 could, instead of requesting &lt;code&gt;/job.14.4&lt;/code&gt;, fetch the data from the other endpoint by running an AJAX request to &lt;code&gt;/data/job.14.4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The backend thus supplies &lt;em&gt;both&lt;/em&gt; a &lt;code&gt;/&amp;lt;resource&amp;gt;&lt;/code&gt; and a &lt;code&gt;/data/&amp;lt;resource&amp;gt;&lt;/code&gt; route. This might seem redundant, but we’ve just seen why it isn’t, Moreover, if you have any logic that needs to be in place—in our example here, a Bible reference parser, for example, to decide what content should be supplied—you can easily reuse it between the two routes. The differences is simply in the form of the data returned: is it a fully-rendered template, or just the data?&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="so-what" class="level2"&gt;
&lt;h2&gt;So what?&lt;/h2&gt;
&lt;p&gt;This approach has two big advantages over the catch-all approach that was frequently recommended in e.g. Angular SPA tutorials I read.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It’s &lt;em&gt;progressive enhancement&lt;/em&gt;. If the JavaScript fails, or the user has it disabled, or it fails to load because it’s loaded asynchronously, the user still gets the page they asked for. Moreover, as long as the page content is build carefully (links built appropriately for other content, and so on), the entire application could continue to work even if the JavaScript &lt;em&gt;never&lt;/em&gt; becomes available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s &lt;em&gt;performant&lt;/em&gt;. Loading the content this way will be &lt;em&gt;much&lt;/em&gt; faster than the standard approach recommended for single-page apps. As noted above, it gets the content to the user immediately, then lets the JavaScript UI bits come into play. Since future page loads can take advantage of both caching and smaller data payloads, the whole thing can actually be faster than either a pure client-side &lt;em&gt;or&lt;/em&gt; a pure server-side approach. That is, once the client-side application is running, it can just update its views with data delivered via AJAX, rather than reloading the whole page. But &lt;em&gt;before&lt;/em&gt; that, the user doesn’t have to wait to see something useful until the JavaScript framework spins up.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s not often an approach gives you progressive enhancement and actually increases the performance of an application, but this one does. Better yet, you can apply this in just about any framework: it’s equally applicable to AngularJS with ExpressJS, Backbone with Rails, Ember with Django, Aurelia with Phoenix, or any other combination you come up with.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note: this is &lt;em&gt;not&lt;/em&gt; the actual API structure of HolyBible.com, or even particularly close to it. Remember, I learned everything I’m writing here by doing it &lt;em&gt;wrong&lt;/em&gt;.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Or possibly a section which constitutes a semantic block of data. I have some thoughts on chunking Bible data semantically rather than by chapter and verse for this kind of thing. That’s another post for another day, though.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category><category term="javascript"></category></entry><entry><title>Corporate and Government Surveillance</title><link href="http://www.chriskrycho.com/2015/corporate-and-government-surveillance.html" rel="alternate"></link><updated>2015-06-02T22:43:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-02:2015/corporate-and-government-surveillance.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;&lt;a href="https://witheredgrass.wordpress.com/"&gt;Brian Auten&lt;/a&gt; shared &lt;a href="http://www.lawfareblog.com/2015/06/why-americans-hate-government-surveillance-but-tolerate-corporate-data-aggregators/"&gt;this speech&lt;/a&gt; by Sen. Sheldon Whitehouse on Facebook, and I wrote up what follows in response.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;I broadly agree with the critique of the libertarian/TP angle on government as essentially an appendage to business. I am &lt;em&gt;by no means&lt;/em&gt; hostile to the government in general or in principle, nor even to &lt;em&gt;spying&lt;/em&gt;, nor even to warranted (double entendre intended) use of data for law enforcement. The idea that all government is bad is woefully incorrect; it is better to speak of &lt;em&gt;abuses&lt;/em&gt;, either of government or of business or indeed of any sphere exceeding its right domain or acting inappropriately within its domain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a profound and important difference between corporate data collection and federal government data collection: one of them, people accede to directly (though see below); the other they accede to (at best!) indirectly through elected representatives, with whom they may profoundly disagree and against whom they have no recourse (unlike the case of, say, Google or Facebook—one &lt;em&gt;can&lt;/em&gt; simply stop dealing with them). Whatever information I have granted to a corporation, I have chosen to grant them, and I can stop doing so with future information at any time. I &lt;em&gt;cannot&lt;/em&gt; do so with the NSA, FBI, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That distinction may be relatively meaningless for most people in practice, given that the terms, means, and consequences of the data collection carried about by corporations are often obscure to the point of incomprehensibility.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As such, a serious reformation ought to occur in the realm of business and the way that people’s information is handled. Treating information about customers as the primary point of transactional value has significantly deleterious costs on any number of things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For this reason, I consistently advocate for and (where possible) choose to use services which are supported by direct payment, rather than by advertising, and so on. This is not always possible, but where it is, we should consider taking that path.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nonetheless, because of the government’s power of coercion—a power not held by corporations, though to be sure they can exercise significant force of a certain sort through legal machinery/chicanery—the collection of metadata by the government does pose a more potent and long-term threat to liberty than that by corporations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As such, people are &lt;em&gt;absolutely right&lt;/em&gt; to be more tolerant of corporate data collection than of federal data collection. That they ought to be less tolerant of corporate data collection by no means suggests that their hostility to unwarranted governmental data collection should be diminished: quite the contrary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Therefore, while some of the criticism of the government’s data collection may well be driven by the sorts of corporate interests he suggests, and while much of the opposition from companies like Facebook and Google is indeed hypocritical, the criticism is still warranted. The NSA has clearly and repeatedly overstepped even the extremely wide bounds granted it by the Patriot Act, and the Patriot Act itself licensed behavior that should be horrifying to people concerned with the long-term effects of mass surveillance on governance.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="listicles"></category></entry><entry><title>Python Enums, ctypes.Structures, and DLL exports</title><link href="http://www.chriskrycho.com/2015/ctypes-structures-and-dll-exports.html" rel="alternate"></link><updated>2015-05-28T18:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-28:2015/ctypes-structures-and-dll-exports.html</id><summary type="html">&lt;p&gt;For one of my contracts right now, I’m writing a &lt;code&gt;ctypes&lt;/code&gt; Python interface to existing C code. I got stuck and confused for quite a while on getting the interface to a given function to build correctly, and along the way had to try to understand the &lt;code&gt;from_param&lt;/code&gt; class method. The official docs are… fine… but the examples provided don’t cover the most common/basic use case: defining a simple, &lt;em&gt;non-ctypes&lt;/em&gt; data type as an argument to a DLL-exported function.&lt;/p&gt;
&lt;p&gt;Let’s say you have a C function exported from a DLL; for convenience we’ll make it something rather silly but easy to understand:&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;/** my_exported.h */
#include &amp;quot;exports.h&amp;quot;

typedef enum {
    ZERO,
    ONE,
    TWO
} MyEnum;

MY_API int getAnEnumValue(MyEnum anEnum);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The implementation just gives back the integer value of the function:&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;int getAnEnumValue(MyEnum anEnum) {
    return (int)anEnum;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I said, a &lt;em&gt;very&lt;/em&gt; silly example. Note that you don’t technically need the &lt;code&gt;(int)&lt;/code&gt; cast there; I’ve just put it in to be explicit about what we’re doing.&lt;/p&gt;
&lt;p&gt;How would we use this from Python? Assuming we have a DLL named &lt;code&gt;my_dll&lt;/code&gt; which exports the &lt;code&gt;getAnEnumValue&lt;/code&gt; function, we’d load it up roughly like this:&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;import ctypes as c

my_dll = c.cdll.LoadLibrary(&amp;#39;my_dll&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we bind to the function like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;get_an_enum_value = my_dll.getAnEnumValue&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, when you do this, you usually also supply the &lt;code&gt;argtypes&lt;/code&gt; and &lt;code&gt;restype&lt;/code&gt; values for these functions. If you’re like me, you’d think, “Oh, an enum—a perfect opportunity to use the &lt;code&gt;Enum&lt;/code&gt; type in Python 3.4+!” and then you’d do something like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;import ctypes as c
from enum import IntEnum

class MyEnum(IntEnum):
    ZERO = 0
    ONE = 1
    TWO = 2

my_dll = c.cdll.LoadLibrary(&amp;#39;my_dll&amp;#39;)
get_an_enum_value = my_dll.getAnEnumValue
get_an_enum_value.argtypes = [MyEnum]
get_an_enum_value.restype = c.c_int&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That seems sensible enough, but as it is, it won’t work: you’ll get an error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TypeError: item 1 in _argtypes_ has no from_param method&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is because &lt;code&gt;argtypes&lt;/code&gt; values &lt;em&gt;have&lt;/em&gt; to be either existing &lt;code&gt;ctypes&lt;/code&gt; types&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; or supply either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;from_param&lt;/code&gt; classmethod, or&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use &lt;code&gt;ctypes.Structure&lt;/code&gt; subclasses natively that way, because the &lt;code&gt;Structure&lt;/code&gt; class supplies its &lt;code&gt;from_param&lt;/code&gt; classmethod. The same is &lt;em&gt;not&lt;/em&gt; true of our custom enum class, though. As the docs put it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have defined your own classes which you pass to function calls, you have to implement a &lt;code&gt;from_param()&lt;/code&gt; class method for them to be able to use them in the argtypes sequence. The &lt;code&gt;from_param()&lt;/code&gt; class method receives the Python object passed to the function call, it should do a typecheck or whatever is needed to make sure this object is acceptable, and then return the object itself, its &lt;code&gt;_as_parameter_&lt;/code&gt; attribute, or whatever you want to pass as the C function argument in this case. Again, the result should be an integer, string, bytes, a &lt;code&gt;ctypes&lt;/code&gt; instance, or an object with an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, to make the enum type work, we need to add a &lt;code&gt;from_param&lt;/code&gt; class method or an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute to it. Thus, either of these options will work:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;class MyEnum(IntEnum):
    ZERO = 0
    ONE = 1
    TWO = 2

    # Option 1: set the _as_parameter value at construction.
    def __init__(self, value):
        self._as_parameter = int(value)

    # Option 2: define the class method `from_param`.
    @classmethod
    def from_param(cls, obj):
        return int(obj)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the constructor-based option, the &lt;code&gt;value&lt;/code&gt; argument to the constructor is the value of the &lt;code&gt;Enum&lt;/code&gt; instance. Since the value of anan &lt;code&gt;IntEnum&lt;/code&gt; is always the same as the integer to whcih it is bound, we can just return &lt;code&gt;int(value)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;from_param&lt;/code&gt; approach works a little differently, but with the same results. The &lt;code&gt;obj&lt;/code&gt; argument to the &lt;code&gt;from_param&lt;/code&gt; method is the object instance, in this case the enumerated value itself. &lt;em&gt;Any&lt;/em&gt; &lt;code&gt;Enum&lt;/code&gt; with an integer value can be directly cast to &lt;code&gt;int&lt;/code&gt; (though it is possible for &lt;code&gt;Enum&lt;/code&gt; instances to have other values, so be careful), and since we have an &lt;code&gt;IntEnum&lt;/code&gt; here, we can again just return &lt;code&gt;int(obj)&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;Now, let’s say we want to apply this pattern to more than a single &lt;code&gt;IntEnum&lt;/code&gt; class, because our C code defines more than one enumeration. Extracting it to be common functionality is simple enough: just create a class that implements the class method, and inherit from it.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;class CtypesEnum(IntEnum):
    &amp;quot;&amp;quot;&amp;quot;A ctypes-compatible IntEnum superclass.&amp;quot;&amp;quot;&amp;quot;
    @classmethod
    def from_param(cls, obj):
        return int(obj)


class MyEnum(CtypesEnum):
    ZERO = 0
    ONE = 1
    TWO = 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our final (working!) Python code, then, would be:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Import the standard library dependencies
import ctypes as c
from enum import IntEnum


# Define the types we need.
class CtypesEnum(IntEnum):
    &amp;quot;&amp;quot;&amp;quot;A ctypes-compatible IntEnum superclass.&amp;quot;&amp;quot;&amp;quot;
    @classmethod
    def from_param(cls, obj):
        return int(obj)


class MyEnum(CtypesEnum):
    ZERO = 0
    ONE = 1
    TWO = 2


# Load the DLL and configure the function call.
my_dll = c.cdll.LoadLibrary(&amp;#39;my_dll&amp;#39;)
get_an_enum_value = my_dll.getAnEnumValue
get_an_enum_value.argtypes = [MyEnum]
get_an_enum_value.restype = c.c_int

# Demonstrate that it works.
print(get_an_enum_value(MyEnum.TWO))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output will be &lt;code&gt;2&lt;/code&gt;, just as you’d expect!&lt;/p&gt;
&lt;p&gt;An important note: The type definition we’ve provided here will work for &lt;code&gt;argtypes&lt;/code&gt; or &lt;code&gt;restype&lt;/code&gt; assignments, but &lt;em&gt;not&lt;/em&gt; as one of the members of a custom &lt;code&gt;ctypes.Structure&lt;/code&gt; type’s &lt;code&gt;_fields_&lt;/code&gt; value. (Discussing how you’d go about doing that is beyond the scope of this post; the most direct approach is just to use a &lt;code&gt;ctypes.c_int&lt;/code&gt; and note that it is intended to be used with a given &lt;code&gt;IntEnum&lt;/code&gt;/&lt;code&gt;CtypesEnum&lt;/code&gt; type.)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Thanks to &lt;a href="https://alpha.app.net/oluseyi"&gt;@oluseyi&lt;/a&gt; for being my &lt;a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging"&gt;rubber ducky&lt;/a&gt; while I was working this out earlier this week!&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’m leaving out the part where we build the DLL, and also the part where we locate the DLL, and only using the Windows convention. If you’re on a *nix system, you should use &lt;code&gt;'my_dll.so'&lt;/code&gt; instead, and in any case you need to make sure the DLL is available in the search path.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; the redundancy of “&lt;code&gt;ctypes&lt;/code&gt; types,” don’t you?&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category></entry><entry><title>Open Source is Neat</title><link href="http://www.chriskrycho.com/2015/open-source-is-neat.html" rel="alternate"></link><updated>2015-05-17T22:52:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-17:2015/open-source-is-neat.html</id><summary type="html">&lt;p&gt;I confess: my &lt;em&gt;first&lt;/em&gt; response to seeing &lt;a href="//andrewcamenga.com/"&gt;this page&lt;/a&gt; was a flash of anger: &lt;em&gt;Hey, he didn’t just learn from my site configuration, he actually stole my site &lt;/em&gt;&lt;strong&gt;design&lt;/strong&gt;&lt;em&gt;!&lt;/em&gt; And then I remembered: I open-sourced the design precisely so people could do that. This was just the first time I’ve ever actually had someone reuse something I did and shared like this. It was a strange (but ultimately wonderful) feeling. I hope to have it again many more times.&lt;/p&gt;
&lt;p&gt;In any case, I rather like the tweaks Andrew Comenga made to my design to make it his own; &lt;a href="//andrewcamenga.com/"&gt;go take a look&lt;/a&gt;!&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="links"></category><category term="software development"></category><category term="design"></category></entry><entry><title>A Modern Python Development Toolchain</title><link href="http://www.chriskrycho.com/2015/a-modern-python-development-toolchain.html" rel="alternate"></link><updated>2015-05-16T22:40:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-16:2015/a-modern-python-development-toolchain.html</id><summary type="html">&lt;p&gt;Most of my development time these days—and especially the majority of my happiest time!—is spent working in Python. As such, I’ve experimented off and on over the last few years with the best workflow, and have settled down with a set of tools that is &lt;em&gt;very&lt;/em&gt; effective and efficient for me. I’m sure I’m not the only one who’s had to wrestle with some of the issues particular to this toolchain, and I know that information like this can be valuable especially for people just starting off, so I thought I would document it all in one place.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: when talking about a given program, I will italicize it, like &lt;em&gt;brew&lt;/em&gt; or &lt;em&gt;git&lt;/em&gt; or &lt;em&gt;python&lt;/em&gt;. When talking about things to type, I will make them a code block like &lt;code&gt;git clone &amp;lt;a repository&amp;gt;&lt;/code&gt;. For any extended samples, I will make them full-on code blocks:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;import re

def a_neat_function():
    my_string = &amp;quot;Isn&amp;#39;t it cool?&amp;quot;
    if re.match(r&amp;quot;i\w+&amp;quot;, my_string, flags=re.I):
        print(my_string)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;The main tools I use are: a good text editor (I like all of &lt;a href="//www.sublimetext.com"&gt;Sublime Text&lt;/a&gt;, &lt;a href="//atom.io"&gt;Atom&lt;/a&gt;, &lt;a href="//github.com/textmate/textmate"&gt;TextMate&lt;/a&gt;, and &lt;a href="//chocolatapp.com"&gt;Chocolat&lt;/a&gt;; each has its own strengths and weaknesses) or sometimes &lt;a href="https://www.jetbrains.com/pycharm/"&gt;a full IDE&lt;/a&gt;, version control software (I appreciate and use both &lt;a href="http://www.git-scm.com"&gt;Git&lt;/a&gt; and &lt;a href="http://mercurial.selenic.com"&gt;Mercurial&lt;/a&gt;), and three dedicated tools to which the rest of this post is devoted: &lt;em&gt;pyenv&lt;/em&gt;, &lt;em&gt;pip&lt;/em&gt;, and virtual environments.&lt;/p&gt;
&lt;p&gt;Everyone is going to have their own preferences for version control tools and an editor; but the recommendations I make regarding Python installations, package management, and workspaces/virtual environments should be fairly standard for anyone doing Python development on a Unix-like system in 2015.&lt;/p&gt;
&lt;section id="python-proper" class="level2"&gt;
&lt;h2&gt;Python Proper&lt;/h2&gt;
&lt;p&gt;First up: Python itself. OS X ships with a built-in copy of Python 2; in the latest version of Yosemite, it’s running Python 2.7.6. The latest version of Python 2 is 2.7.9, so that isn’t &lt;em&gt;terribly&lt;/em&gt; far behind—but it is still behind. Moreover, OS X does &lt;em&gt;not&lt;/em&gt; ship with Python 3, and since I do all of my development in Python 3&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; I need to install it.&lt;/p&gt;
&lt;section id="homebrew" class="level3"&gt;
&lt;h3&gt;Homebrew&lt;/h3&gt;
&lt;p&gt;For a long time, I managed all my Python installations with &lt;a href="http://brew.sh"&gt;&lt;em&gt;homebrew&lt;/em&gt;&lt;/a&gt;. If you’re not familiar with it, &lt;em&gt;homebrew&lt;/em&gt; is a package manager that lets you installed tools on the command line, similar to what you get from &lt;em&gt;aptitude&lt;/em&gt; or &lt;em&gt;yum&lt;/em&gt; on Ubuntu or Fedora respectively.&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; If you’re not using &lt;em&gt;homebrew&lt;/em&gt; yet, I highly recommend it for installing command-line tools. (If you’re not using command-line tools yet, then the rest of this post will either bore you to death, or prove extremely enlightening!) If you haven’t started yet, now’s a good time: &lt;a href="http://brew.sh"&gt;go install it!&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While &lt;em&gt;homebrew&lt;/em&gt; is great for installing and managing packages in general, I can’t say this loud enough: &lt;em&gt;don’t manage Python with homebrew&lt;/em&gt;. It’s finicky, and really isn’t meant for all the things you have to do to manage more than one version of Python at a time.&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; (There’s a reason there’s a whole &lt;a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md"&gt;troubleshooting section&lt;/a&gt; devoted to it.) If you think it’s crazy that I might want more than one copy of Python installed a time, well… let’s just say I suspect you’ll change your mind after doing a bit more development. (At the most basic, most people will end up wanting both Python 2 and 3 installed, and will want to upgrade them as bug fixes and the like come out.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pyenv" class="level3"&gt;
&lt;h3&gt;pyenv&lt;/h3&gt;
&lt;p&gt;Instead of installing via &lt;em&gt;homebrew&lt;/em&gt;, use it to install &lt;a href="https://github.com/yyuu/pyenv"&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/a&gt;, and use that to manage your installations. &lt;em&gt;pyenv&lt;/em&gt; is a dedicated tool for managing your “Python environment,” and it excels at that. If you were on a Mac with &lt;em&gt;homebrew&lt;/em&gt; installed, your setup process to add the latest version of Python might look something like this:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ brew install pyenv
$ echo &amp;#39;eval &amp;quot;$(pyenv init -)&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~.profile
$ source ~/.profile
$ pyenv install 3.4.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Line by line, that (a) installs &lt;em&gt;pyenv&lt;/em&gt;, (b) adds a hook to your shell profile,&lt;a href="#fn5" class="footnoteRef" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; (c) updates your current session using the updated profile, and (d) installs the latest version of Python (as of the time I’m writing this). Now you have a full version of Python 3.4.3 alongside the system install of Python 2.7.6. If you wanted to install 2.7.9, or 2.2.3, or the development version of PyPy3, you could easily do that as well.&lt;/p&gt;
&lt;p&gt;In addition, &lt;em&gt;pyenv&lt;/em&gt; lets you specify which version to use globally (&lt;code&gt;pyenv global &amp;lt;name&amp;gt;&lt;/code&gt;) and which version to use in a given directory structure (&lt;code&gt;pyenv local &amp;lt;name&amp;gt;&lt;/code&gt;). So if you prefer to use Python 3 in general, but need to use Python 2 on one project, you can just navigate to the root of that project and set it:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ pyenv global 3.4.3
$ cd path/to/my/project
$ pyenv local 2.7.9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a simple plain text file, &lt;code&gt;.python-version&lt;/code&gt;, whose contents will be just &lt;code&gt;2.7.9&lt;/code&gt;—but for everything under &lt;code&gt;path/to/my/project&lt;/code&gt;, typing &lt;code&gt;python&lt;/code&gt; will launch Python 2.7.9, while typing it &lt;em&gt;outside&lt;/em&gt; that folder will launch Python 3.4.3. (If you want, you can just create the &lt;code&gt;.python-version&lt;/code&gt; file yourself manually and give it the name of a version. There’s nothing special about it all; it’s just the place &lt;code&gt;pyenv&lt;/code&gt; looks to know which Python version to use.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="managing-python-packages" class="level2"&gt;
&lt;h2&gt;Managing Python Packages&lt;/h2&gt;
&lt;p&gt;There are four basic approaches to managing Python packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;installing them manually&lt;/li&gt;
&lt;li&gt;using a system-level package manager like &lt;em&gt;homebrew&lt;/em&gt;, &lt;em&gt;yum&lt;/em&gt;, or &lt;em&gt;aptitude&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;using &lt;em&gt;easy_install&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;using &lt;em&gt;pip&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The vast majority of the time, the right choice is using &lt;em&gt;pip&lt;/em&gt;. Over the last few years, &lt;em&gt;pip&lt;/em&gt; has become the default install tool for Python packages and it now ships natively with it on every platform. Suffice it to say: if you need to install a package, do not install it not with &lt;em&gt;homebrew&lt;/em&gt; (or &lt;em&gt;aptitude&lt;/em&gt; or &lt;em&gt;yum&lt;/em&gt;). Install it with &lt;em&gt;pip&lt;/em&gt;. It integrates with Python better, it always has access both to the latest versions of Python packages (including those only available in e.g. development repositories on GitHub or Bitbucket or wherever else) and to all previously released versions, and it’s the community’s main tool for the job.&lt;/p&gt;
&lt;p&gt;That said, occasionally it makes sense to install packages manually by downloading them and running &lt;code&gt;python setup.py install&lt;/code&gt; or to use a system-level package manager. On the other hand, given &lt;em&gt;pip&lt;/em&gt;’s ability to do everything &lt;em&gt;easy_install&lt;/em&gt; does, and its ability to do quite a few more things as well, there really isn’t a time to use &lt;em&gt;easy_install&lt;/em&gt;. Using the language-supplied tools keeps everything playing nicely together. Perhaps just as importantly, it is the only way to make sure everything behaves the way it should when you start using…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="virtual-environments" class="level2"&gt;
&lt;h2&gt;Virtual Environments&lt;/h2&gt;
&lt;p&gt;When working with a variety of different clients, or simply on different projects, it is common not only to end up with different versions of Python but also with different sets of packages or—tricker still!—different versions of the same package required for different projects. Virtual environments provide a solution: they reuse the main Python executable (by creating links on the file system to it), but create isolated “workspaces” for the various packages you might install.&lt;/p&gt;
&lt;p&gt;That way, in one workspace, you might have version 1.2 of a package installed, and in another you might have version 3.3 installed—because those are the required dependencies for something &lt;em&gt;else&lt;/em&gt; you’re doing. This isn’t a hypothetical situation. For quite a while with one of my clients, we had pinned a particular version of the Python documentation package we use because it broke our use case after an update—but I still wanted to have the latest version of that tool in my &lt;em&gt;other&lt;/em&gt; projects. Setting up virtual environments neatly solves that problem.&lt;/p&gt;
&lt;section id="venv-and-virtualenv" class="level3"&gt;
&lt;h3&gt;venv and virtualenv&lt;/h3&gt;
&lt;p&gt;If you have Python 3.3 or later, you have a built-in tool for this called &lt;a href="https://docs.python.org/3/library/venv.html"&gt;&lt;em&gt;pyvenv&lt;/em&gt;&lt;/a&gt;; if you have Python 3.4 or later, it supports &lt;em&gt;pip&lt;/em&gt; right out of the gate so you don’t have to install it yourself. If you’re on older versions, you can install &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt; (&lt;code&gt;pip install virtualenv&lt;/code&gt;) and get the same basic tooling: &lt;em&gt;pyvenv&lt;/em&gt; was inspired by &lt;em&gt;virtualenv&lt;/em&gt;. Then you can create virtual environments with the &lt;code&gt;pyvenv&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt; commands, and use those to isolate different setups from each other. If you haven’t started using virtual environments yet, start now!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pyenv-with-virtualenv" class="level3"&gt;
&lt;h3&gt;pyenv with virtualenv&lt;/h3&gt;
&lt;p&gt;I know, the similarity of names for &lt;em&gt;pyenv&lt;/em&gt; and &lt;em&gt;pyvenv&lt;/em&gt; is unfortunate. If it helps, you can call the latter as &lt;code&gt;venv&lt;/code&gt; rather than &lt;code&gt;pyvenv&lt;/code&gt;. But, more importantly, one of the areas &lt;em&gt;pyenv&lt;/em&gt; is much better than &lt;em&gt;homebrew&lt;/em&gt; is its support for managing virtual environments. Install &lt;a href="https://github.com/yyuu/pyenv-virtualenv"&gt;&lt;em&gt;pyenv-virtualenv&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ brew install pyenv-virtualenv
$ echo &amp;#39;eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.profile&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you’re off to the races: you’ll never have to type &lt;code&gt;pyvenv &amp;lt;path to a virtual environment&amp;gt;&lt;/code&gt;, because instead you can just type &lt;code&gt;pyenv virtualenv &amp;lt;version&amp;gt; &amp;lt;name&amp;gt;&lt;/code&gt; and &lt;em&gt;pyenv&lt;/em&gt; will take care of setting it up for you. Even better: all the nice tricks I listed above about setting directory-specific and global preferences for which Python version to use work equally well with virtual environments managed via &lt;em&gt;pyenv&lt;/em&gt;. In other words, you can do something like this:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ pyenv install 2.7.9
$ pyenv install 3.4.3
$ pyenv global 3.4.3
$ pyenv virtualenv 2.7.9 my-virtual-environment
$ cd path/to/my/project
$ pyenv local my-virtual-environment&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.python-version&lt;/code&gt; file will contain &lt;code&gt;my-virtual-environment&lt;/code&gt;. The Python version will be 2.7.9. The environment will be isolated, just as if you had run &lt;code&gt;pyvenv&lt;/code&gt; to set up a virtual environment. Everything works together beautifully! Moreover, you can easily reuse virtual environments this way, because you can set the &lt;code&gt;local&lt;/code&gt; value in more than one place. For example, I use the same virtual environment for this site and &lt;a href="//www.winningslowly.org/" title="A podcast: taking the long view on technology, religion, ethics, and art."&gt;Winning Slowly&lt;/a&gt;, because they have slightly different site configurations but all the same Python dependencies. Creating it was simple:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ pyenv install 3.4.3
$ pyenv virtualenv 3.4.3 pelican
$ cd ~/Sites/chriskrycho.com
$ pyenv local pelican
$ cd ~/Sites/winningslowly.org
$ pyenv local pelican&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I named the virtual environment after &lt;a href="//docs.getpelican.com/"&gt;the tool I use to generate the sites&lt;/a&gt;, and reused it in both sites. Both now have a &lt;code&gt;.python-version&lt;/code&gt; file that reads &lt;code&gt;pelican&lt;/code&gt;. Now, anytime I’m working anywhere under &lt;code&gt;~/Sites/chriskrycho.com&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code&gt;~/Sites/winningslowly.org&lt;/code&gt;, I have the same tooling in place.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The combination of &lt;em&gt;pip&lt;/em&gt;, &lt;em&gt;pyenv&lt;/em&gt; and virtual environments makes for a very simple, straightforward process to manage Python environments these days:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install Python versions with &lt;em&gt;pyenv&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Install Python packages with &lt;em&gt;pip&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Set up virtual environments with &lt;em&gt;pyenv-virtualenv&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you stick to those basic rules, Python itself shouldn’t give you any trouble at all.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;All the usual caveats apply, of course: this may or may not work well for you; it’s just what works for me, and I make no claim or warranty on the tools below—they’re working well for &lt;em&gt;me&lt;/em&gt;, but I don’t maintain them, so if they break, please tell the people who maintain them! Also, because I do nearly all my development on a Mac (I test on Windows, but that’s it), the following is necessarily &lt;em&gt;fairly&lt;/em&gt; specific to OS X. You can readily adapt most of it to Linux, though, or even to a &lt;a href="https://www.cygwin.com"&gt;Cygwin&lt;/a&gt; install on Windows—I do just that when I have cause. But my main tool is a Mac, so that’s what I’ve specialized for.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Lucky me, I know!&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Yes, I know that those are wrappers around Debian and Arch, and I know about &lt;em&gt;apt-get&lt;/em&gt; and &lt;em&gt;rpm&lt;/em&gt;. No, that information isn’t especially relevant for the rest of this post.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;For example, if you upgrade your Python installation using homebrew and then cleanup the old version (e.g., by running the typical &lt;code&gt;brew update &amp;amp;&amp;amp; brew upgrade &amp;amp;&amp;amp; brew cleanup&lt;/code&gt; sequence)—say, from 3.4.2 to 3.4.3—and you have virtual environments which depended on 3.4.2… well, you’re in a bad spot now. A &lt;em&gt;very&lt;/em&gt; bad spot. Have fun getting back to a working state!&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;You can of course drop it directly in &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bash_profile&lt;/code&gt; or wherever else. &lt;a href="//github.com/chriskrycho/profile"&gt;My setup&lt;/a&gt; puts all common handling in &lt;code&gt;.profile&lt;/code&gt; and runs &lt;code&gt;source .profile&lt;/code&gt; as the first action in any other shell configurations.&lt;a href="#fnref5"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="Software Development"></category></entry><entry><title>Tolle Lege!</title><link href="http://www.chriskrycho.com/2015/tolle-lege.html" rel="alternate"></link><updated>2015-05-01T10:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-01:2015/tolle-lege.html</id><summary type="html">&lt;p&gt;I was delighted to be able to give a talk at &lt;a href="http://bibletechconference.com/"&gt;BibleTech&lt;/a&gt; this year. I spoke for almost exactly 40 minutes on the subject of digital typography, with a focus on some of the nitty-gritty details that make texts readable… or not. Here is the screen capture and audio from the talk!&lt;/p&gt;
&lt;div class="iframe-wrapper four-to-three"&gt;
&lt;iframe src="https://player.vimeo.com/video/126655499" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;You can also access the &lt;a href="/talks/bibletech2015/"&gt;slides&lt;/a&gt; whenever you like (though note that they were designed to be complements to the talk, &lt;em&gt;not&lt;/em&gt; the content of the talk, and as such they elide a great deal of the content).&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="design"></category><category term="typography"></category><category term="talks"></category></entry><entry><title>Lessons Learned</title><link href="http://www.chriskrycho.com/2015/lessons-learned.html" rel="alternate"></link><updated>2015-04-12T13:49:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-12:2015/lessons-learned.html</id><summary type="html">&lt;p&gt;Since mid July 2015, I have been working on a complete redesign and re-build of &lt;a href="//holybible.com"&gt;HolyBible.com&lt;/a&gt;. The good folks at &lt;a href="//prts.edu"&gt;Puritan Reformed Theological Seminary&lt;/a&gt; who own the site wanted to replace its previous content with a Bible reading tool. While there’s still a lot to wrap up, the project is &lt;em&gt;nearing&lt;/em&gt; its conclusion, and I thought I’d note a few things I’ve learned (in some cases, learned &lt;em&gt;again&lt;/em&gt;) along the way. I want to say up front, lest these be taken the wrong way: I’m extremely proud of the work I’ve done, and the application I’ve delivered &lt;em&gt;does&lt;/em&gt; work to the specifications I was hired to meet. More than that, it does it well. But, of course, it could do it &lt;em&gt;better&lt;/em&gt;. The following thoughts are therefore not, “How I failed” but rather “How I will do this &lt;em&gt;even better&lt;/em&gt; next time around.”&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Single page apps are great, but not always the right choice.&lt;/em&gt; I made the decision, based on my expectations and understandings of what I would need, to develop the site as a single-page web application. This was a mistake. Not the worst mistake ever: it has its upsides, including performance &lt;em&gt;once the app spins up&lt;/em&gt;, but for the kind of content I have here, I would take a different tack today. Better in this case to deliver static content and &lt;em&gt;update&lt;/em&gt; it dynamically as appropriate than to try to load all the content dynamically every time.&lt;/p&gt;
&lt;p&gt;At a technical level, that would probably mean supplementing standard HTML with &lt;a href="//backbonejs.org"&gt;Backbone&lt;/a&gt; instead of developing it as a single-page app in &lt;a href="//angularjs.org"&gt;Angular&lt;/a&gt;. For the backend, while I did it in Node.js and that would work fine, I’d probably do a straight Django app (especially with a few of the goals I learned about &lt;em&gt;after&lt;/em&gt; the project was well along in development).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Progressive enhancement or graceful degradation are hard in web applications, but they still matter.&lt;/em&gt; In the past, I’ve always taken a hard line on making sure things either degrade gracefully or are simply enhanced by JavaScript content. In the architecture decisions I made for this app, I failed to take that into account (largely because I thought it would just &lt;em&gt;need&lt;/em&gt; to work as a web app, but see above). I regret that enormously at this point; it would be much better in this particular case to have content available even if the additional functionality doesn’t work. Even if you &lt;em&gt;are&lt;/em&gt; doing something where you are building an &lt;em&gt;app&lt;/em&gt;, finding ways to make it work on poor connections, older browsers, etc. matters. I’m still thinking a &lt;em&gt;lot&lt;/em&gt; about the best way to do this in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;More popular doesn’t mean better.&lt;/em&gt; Angular has a ton of traction and uptake, and that was deceptive early on. I won’t so easily be fooled in the future. Angular is so very popular in part because Google can put serious money behind its development—and its marketing. But it’s &lt;em&gt;not&lt;/em&gt; the best for many applications; if you’re not in the business of developing your own custom framework, it’s not even &lt;em&gt;close&lt;/em&gt; to the best. Use Ember or Knockout or any number of other full-stack frameworks rather than a meta-framework.&lt;/p&gt;
&lt;p&gt;How to avoid making that mistake? Well, for my part since then, I’ve learned to look not just as the &lt;em&gt;quantity&lt;/em&gt; of material in a given community, but its &lt;em&gt;quality&lt;/em&gt;. For example, &lt;a href="//emberjs.com"&gt;Ember&lt;/a&gt; has &lt;em&gt;incredible&lt;/em&gt; documentation (far better than Angular’s), and they also have a much clearer vision and a more dependable approach to development (strict semantic versioning, etc.). Had I taken the time to read &lt;em&gt;both&lt;/em&gt; sets of docs more carefully and think through the consequences of their designs more thoroughly, I could have recognized this before starting. Next time, I will do just that.&lt;/p&gt;
&lt;p&gt;I will also look at the way the community behaves. The Ember community is &lt;em&gt;far&lt;/em&gt; friendlier for newcomers from what I’ve seen than the Angular community—no slam meant on the Angular crowd, but the Ember folks are just doing that really well. That matters, too. (I can’t speak for other communities, of course; these are just the groups I’ve watched the most.)&lt;/p&gt;
&lt;p&gt;All in all, Ember would have been the better fit between these two (even though, as noted above, it also wouldn’t have been the &lt;em&gt;best&lt;/em&gt; fit).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Unit tests really are the best.&lt;/em&gt; I did a vast majority of this project with unit tests—the first time I’ve ever been able to do that for a whole project. In other projects, I’ve been able to do it for parts, but never this much. It saved my bacon a &lt;em&gt;lot&lt;/em&gt;. Where I got in a hurry and felt like I didn’t have time to write the tests, I (inevitably and predictably!) ended up spending a lot of time chasing down hard-to-isolate bugs—time I could have avoided by writing well-tested (and therefore better-factored) code in the first place. Lesson learned &lt;em&gt;very&lt;/em&gt; thoroughly. Server- and client-side unit tests are &lt;em&gt;really&lt;/em&gt; good. They’re also sometimes &lt;em&gt;hard&lt;/em&gt;; getting mocks set up correctly for dealing with databases, etc. can take a while. That difficulty pays for itself, though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Unit tests &lt;strong&gt;really&lt;/strong&gt; don’t replace API documentation.&lt;/em&gt; I have seen people advocate test-driven-development as a way of obviating the need to do major documentation of an API. This is, in a word, ridiculous. Having to read unit tests if you want to remember how you structured an API call is a pain in the neck. Don’t believe it. Design your API and document it, &lt;em&gt;then&lt;/em&gt; do test-driven development against that contract.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Sometimes ‘good enough’ is enough.&lt;/em&gt; There is always more to be done, and inevitably you can see a thousand things that could be improved. But ‘good’ shipping code is far more valuable than ‘perfect’ code that never ships. You should never ship &lt;em&gt;bad&lt;/em&gt; code, but sometimes you do have to recognize ‘good enough’ and push it out the door.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Full-stack development is fun, but it’s also really hard.&lt;/em&gt; I wrote every scrap of code in HolyBible.com proper (though of course it relies on a lot of third-party code). It was very, very difficult to manage that all by myself; it’s a lot to hold in one’s head. (One of the reasons I chose Node was because keeping my implementation and testing all in one language helped reduce that load somewhat.) Would I do it again? Sure. But very much chastened about the difficulties involved. It has been enormously rewarding, and I &lt;em&gt;like&lt;/em&gt; being a full-stack developer. But it’s a lot of work, and now I know more clearly just how much.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I could say a great deal more about the technical side of things especially, but my biggest takeaway here is that a lot of the hardest and most important work in developing software has nothing to do with the code itself. Architecture and approach shape &lt;em&gt;far&lt;/em&gt; more than the implementation details (even if those details still matter an awful lot). And popularity is not at all the same as either &lt;em&gt;quality&lt;/em&gt; or (especially) &lt;em&gt;suitability for a given task&lt;/em&gt;. In the future, I will be better equipped for the necessary kinds of evaluation, and will hopefully make still better decisions accordingly.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="software development"></category><category term="javascript"></category><category term="angularjs"></category></entry><entry><title>The NSA wants tech companies to give it 'front door' access to encrypted data</title><link href="http://www.chriskrycho.com/2015/the-nsa-wants-tech-companies-to-give-it-front-door-access-to-encrypted-data.html" rel="alternate"></link><updated>2015-04-12T13:16:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-12:2015/the-nsa-wants-tech-companies-to-give-it-front-door-access-to-encrypted-data.html</id><summary type="html">&lt;p&gt;The Verge:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I don’t want a back door,” Rogers said. “I want a front door. And I want the front door to have multiple locks. Big locks….”&lt;/p&gt;
&lt;p&gt;Rogers suggests the adoption of “front door” access will allow for essential security measures while keeping data safe from hackers or an outside attack. But opponents of the idea note that even broken into pieces, a master digital key creates security flaws. “There’s no way to do this where you don’t have unintentional vulnerabilities,” Donna Dodson, chief cyber­security adviser at the Commerce Department’s National Institute of Standards and Technologies, told the Post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That last bit is absolutely true. The government basically wants to make sure it can spy on anyone, any time it wants. That’s a bad, bad plan.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="links"></category></entry><entry><title>Unsurprisingly, In Flux</title><link href="http://www.chriskrycho.com/2015/unsurprisingly-in-flux.html" rel="alternate"></link><updated>2015-08-28T19:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-08:2015/unsurprisingly-in-flux.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;This started as a &lt;a href="https://alpha.app.net/chriskrycho/post/57102562"&gt;series of posts&lt;/a&gt; on App.net. I &lt;a href="http://www.chriskrycho.com/2014/a-few-theses-on-blogging.html"&gt;resolved&lt;/a&gt; a while ago that if I was tempted to do that, I should just write a blog post instead. I failed at that resolution, but at a friend’s &lt;a href="https://alpha.app.net/jws/post/57108281"&gt;suggestion&lt;/a&gt;, am adapting it into a blog post anyway. You can see the posts that prompted it &lt;a href="https://alpha.app.net/keita/post/57096585"&gt;here&lt;/a&gt; and &lt;a href="https://alpha.app.net/jws/post/57096838"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The state of JavaScript frameworks today is a scale, really, from not-at-all-monolithic to totally-monolithic, in roughly this order: Backbone – React &amp;amp; Angular – Ember – Meteor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backbone and related library Underscore are really collections of common JS tools and patterns you can use to write apps, but they’re not &lt;em&gt;frameworks&lt;/em&gt;, per se. You’ll write all your own boilerplate there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React and Angular supply much &lt;em&gt;more&lt;/em&gt; of the functionality, but Angular is a “meta-framework” that aims to do &lt;em&gt;some&lt;/em&gt; boilerplate but let you construct your own custom app framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is very powerful, but it’s kind of like Git: wires are exposed; you have to understand a &lt;em&gt;lot&lt;/em&gt; about the internals to get it to do what you want. Its routing functionality is pretty limited out of the box, too—so much so that there’s a near-standard third-party router.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React, as I understand it, supplies a paradigm and associated tools oriented primarily at view state management, though with capabilities via extensions for routing, etc. These tools are &lt;em&gt;extremely&lt;/em&gt; powerful for performance in particular. It’s not a full framework, and the docs expressly note that you can &lt;em&gt;just&lt;/em&gt; use React for the view layer with other tools if you want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In any case, Angular and React do &lt;em&gt;different&lt;/em&gt; things from each other, but both do substantially more than Backbone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember is a full framework, strongly emphasizing shared conventions (with a lot of common developers from Rails). It’s perhaps less adaptable than React or Angular, but is much more full-featured; you have very little boilerplate to do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meteor is like Ember, but does server-side Node as well as client-side stuff, with the goal being to minimize code duplication, sharing assets as much as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of all of those, Ember has easily (easily!) the best-explained roadmap, most articulate leadership, and best development path. They are also aggressively adopting the best features of other frameworks wherever it makes sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is currently in flux, as Google has announced Angular 2.0 will be basically a completely different framework; there will be &lt;em&gt;no&lt;/em&gt; direct migration path for Angular 1.x apps to Angular 2.0+. Total rewrite required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember uses a steady 6-week release schedule with very careful regression testing and semantic versioning, with clear deprecation notices and upgrade paths, and is therefore both rapidly iterating &lt;em&gt;and&lt;/em&gt; relatively stable for use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you just need a set of tools for enhance functionality on otherwise relatively static pages, Backbone+Underscore is a great combo. If you already have a bunch of things in place but want a dedicated view layer, React is good.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re writing a new, full-on web &lt;em&gt;application&lt;/em&gt; (SPA, or organized in whatever other way), I think Ember is the very clear winner at this point. I have good confidence in their leadership and they’re firing on all cylinders.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Angular, &lt;a href="https://alpha.app.net/mikehoss"&gt;@mikehoss&lt;/a&gt; &lt;a href="https://alpha.app.net/mikehoss/post/57105656"&gt;posted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record they are doing that to make it more mobile-friendly. The Ang1 has abysmal performance on mobile. Besides a time machine, this maybe the best option. And Miško is a bit of a jerk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can’t speak to his comment about Miško (Miško Hevery, one of the leads on AngularJS), but I agree about Angular itself: the rewrite needs to happen. Angular 1.x is a mess—as are its docs. It’s just not a good time to be using 1.x for any new projects.&lt;/p&gt;
&lt;p&gt;I’ll add to these points that I’ve used Angular for the last 9 months on HolyBible.com development. As I noted: the documentation is pretty rough, and in a lot of cases you really do have to understand what the framework is doing and how before you can get it to do the things you want. This is, in one sense, exactly the &lt;em&gt;opposite&lt;/em&gt; of what I’m looking for in a framework—but it makes sense given Angular’s goal of being a meta-framework.&lt;/p&gt;
&lt;p&gt;Rather like Git, though, which was originally going to be infrastructure for version control systems which would have their own interface, but eventually just had a “good enough” interface that we’re all now stuck with, Angular is being used &lt;em&gt;as&lt;/em&gt; a framework, not just as a &lt;em&gt;meta-framework&lt;/em&gt;, and it’s unsurprisingly not great for that.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class="editorial"&gt;Take this for what it’s worth: not the final word (by a long stretch) on JavaScript frameworks, but rather the perspective of one guy who notably &lt;em&gt;hasn’t used all of the frameworks&lt;/em&gt;, but has spent some time looking at them. Moreover, I haven’t particularly edited this; it’s more a summary in the kind of short-form posts that I originally created than a detailed analysis. The only things I’ve done are expand some of the notes on Angular and React, and add the footnote on React.&lt;/i&gt;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; don’t know a ton about React, but I do think a lot of what I do know about it is cool from a programming perspective. From a designer perspective, however, it’s a bit of a pain: React’s “JSX” domain-specific language is &lt;em&gt;much&lt;/em&gt; less friendly to developers than standard HTML, and therefore than either Ember or Angular, both of which implement their templating via HTML templating languages. There’s a substantil tradeoff there: React’s model is interesting not only academically but in practice because of the performance results it produces. It’s worth note, though, that others have recognized this and are adopting it to varying degrees; notably, Ember is incorporating the idea of minimizing changes to the DOM by keeping track of state and updating only differences, rather than refreshing the whole tree, in the new rendering engine (HTMLBars) they’re rolling out over the past several and future several releases.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category><category term="javascript"></category><category term="angularjs"></category><category term="emberjs"></category><category term="react"></category></entry><entry><title>The New Macbook</title><link href="http://www.chriskrycho.com/2015/the-new-macbook.html" rel="alternate"></link><updated>2015-03-13T08:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-03-13:2015/the-new-macbook.html</id><summary type="html">&lt;p&gt;I have seen and heard lots of discussion of the &lt;a href="http://www.apple.com/macbook/"&gt;new Macbook&lt;/a&gt; this week, and have been thinking about its appeal and Apple’s strategy a bit along the way. At first I was extremely skeptical of the only-one-port approach, but the more I’ve thought about it, the more sense it makes to me. Why? &lt;em&gt;Market segmentation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a MacBook, not a MacBook Pro. &lt;em&gt;I&lt;/em&gt; need more ports than this. But &lt;a href="http://jaimiekrycho.com/"&gt;Jaimie&lt;/a&gt;? I don’t remember the last time I saw her plug anything into the machine besides its power cord. This is a MacBook for ordinary users, not a machine for power-users. Now, I still think that the loss of MagSafe is a bit sad; it has saved us more than once (especially with young children in the house). But in terms of the needs of ordinary users, a single port that &lt;em&gt;can&lt;/em&gt; double as video out or USB input really is perfect.&lt;/p&gt;
&lt;p&gt;In the meantime, it lets Apple cleanly differentiate between its MacBook and MacBook Pro lines. If you need the ports for expandability—because you’re a power user—you get a Pro. If you don’t, you get the MacBook. The tradeoffs with CPU make sense here, too: a computer that performs about like a 2012 MacBook Air would not be my favorite for development work. But for the writing work that Jaimie does? Again, the performance levels there are perfectly reasonable. It’ll do everything she needs, and do it &lt;em&gt;well&lt;/em&gt;. Throw in the retina screen, and it’ll be really nice for her purposes.&lt;/p&gt;
&lt;p&gt;In fact, I fully expect that we’ll end up getting her a 2nd or 3rd generation machine when we need to replace her current (a 2010 white MacBook) sometime in 2016–17.&lt;/p&gt;
&lt;p&gt;So: better done than I initially thought, Apple.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary></entry><entry><title>The Tablet “Productivity” Problem</title><link href="http://www.chriskrycho.com/2015/the-tablet-productivity-problem.html" rel="alternate"></link><updated>2015-02-25T21:35:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-02-25:2015/the-tablet-productivity-problem.html</id><summary type="html">&lt;p&gt;I’m thinking this one through out loud. I rather hope that I can take these nascent thoughts and turn them into a more fully-fledged essay over the course of this year, so if you have thoughts, I’d &lt;em&gt;love&lt;/em&gt; to hear them. Hit me up on &lt;a href="https://twitter.com/chriskrycho"&gt;Twitter&lt;/a&gt;, &lt;a href="https://alpha.app.net/chriskrycho"&gt;ADN&lt;/a&gt;, or via &lt;script type="text/javascript"&gt;
&lt;!--
h='&amp;#x6b;&amp;#114;&amp;#x79;&amp;#x63;&amp;#104;&amp;#x6f;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;';a='&amp;#64;';n='&amp;#x63;&amp;#104;&amp;#114;&amp;#x69;&amp;#x73;';e=n+a+h;
document.write('&lt;a h'+'ref'+'="ma'+'ilto'+':'+e+'" clas'+'s="em' + 'ail"&gt;'+'&amp;#x65;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;'+'&lt;\/'+'a'+'&gt;');
// --&gt;
&lt;/script&gt;&lt;noscript&gt;&amp;#x65;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#32;&amp;#40;&amp;#x63;&amp;#104;&amp;#114;&amp;#x69;&amp;#x73;&amp;#32;&amp;#x61;&amp;#116;&amp;#32;&amp;#x6b;&amp;#114;&amp;#x79;&amp;#x63;&amp;#104;&amp;#x6f;&amp;#32;&amp;#100;&amp;#x6f;&amp;#116;&amp;#32;&amp;#x63;&amp;#x6f;&amp;#x6d;&amp;#x29;&lt;/noscript&gt;. In the meantime… consider this a rough draft of a larger idea I’m working out.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I saw a &lt;a href="https://jasonirwin.ca/2015/02/24/whats-a-tablet-for/"&gt;post&lt;/a&gt; by internet acquaintance Jason Irwin (&lt;a href="https://alpha.app.net/matigo"&gt;@matigo&lt;/a&gt; on ADN) yesterday about how he doesn’t find tablets especially compelling. There were quite a few things he said in the piece that did &lt;em&gt;not&lt;/em&gt; resonate with me (and even a few suspicions I think are out and out incorrect), but generally on technology things like this I simply say: to each his own. So what follows is not so much a response to Jason’s post as some thoughts inspired by it.&lt;/p&gt;
&lt;p&gt;Jason hit on a meme that’s been extremely common about tablets in general and iPads in particular: that you cannot do real work on them, only “consumption”. What is meant, nearly always, in such discussions, is that it is harder to write, develop software, and other keyboard-intensive activities using an iPad than a traditional laptop or desktop form factor. This is certainly true of &lt;em&gt;those&lt;/em&gt; activities. Even of a few other activities Jason mentions, iPads do &lt;em&gt;very&lt;/em&gt; well.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; But there is another, more important issue here.&lt;/p&gt;
&lt;p&gt;We (quite readonably) tend to define productivity poorly in terms of output. In that sense, there are many categories for which the iPad is &lt;em&gt;not&lt;/em&gt; as capable as a laptop. It is true, for example, that I do not do a lot of writing or software development on my iPad (a retina Mini)—I’ll start drafts of blog posts (part of this was dictated on my iPhone!), and occasionally log into and do administrative work on a server via SSH using an iPad client. That doesn’t mean it isn’t a valuable device for me, though. It simply means that “valuable” and “productive” are not synonyms.&lt;/p&gt;
&lt;p&gt;Less helpfully, however, we also tends to define “value” in terms of “productivity”. People say that iPads are not valuable to them because they do not specifically allow them to be &lt;em&gt;productive&lt;/em&gt; in the sense outlined above… but then, there are a great many valuable things that are not producing content. I use my iPad daily for a wide array of things, and find it enormously preferable to a laptop for nearly all of them. True, many of them are “consumptive”—but since when did that become a bad thing?&lt;/p&gt;
&lt;p&gt;I recognize that the answer may seem obvious against the backdrop of a consumerist culture against which many an anti-consumerism critique has rightly been levied. But think about what we mean by “consumption” in this case. Nearly every day I use my iPad both for reading and for displaying (and for learning) music. To be sure, I also watch the occasional YouTube video, interact on Twitter and App.net, and so on. But the vast majority of what I do with an iPad is best summed up as &lt;em&gt;learning&lt;/em&gt;.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Whether it is reading through a few carefully selected RSS feeds in &lt;a href="http://supertop.co/unread/"&gt;Unread&lt;/a&gt;, reading the news in &lt;a href="http://cir.ca"&gt;Circa&lt;/a&gt;,&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; working through reading for school in iBooks,&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; perusing the &lt;a href="http://emberjs.com"&gt;EmberJS&lt;/a&gt; docs in preparation for a major project I’ll be starting with the tool in a few months, or reading the Bible every morning, I do a &lt;em&gt;lot&lt;/em&gt; of reading on my iPad. Add in the fact that I use it for music as I practice piano, and I get an awful lot of mileage out of it every day.&lt;/p&gt;
&lt;p&gt;Now, none of this negates Jason’s post in particular. If he doesn’t get that kind of traction out of an iPad, that’s no skin off my back. But I do think that the criticism of devices which are primarily “consumptive”—perhaps implied in Jason’s post; certainly stated outright in many other responses to the iPad—is misplaced. Whether simply for entertainment (joy in the arts is good!) or in reading (joy in the arts &lt;em&gt;or&lt;/em&gt; in self-betterment is good!) or in the myriad other ways that people put the iPad&lt;a href="#fn5" class="footnoteRef" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; to use that are not making something new, there is value in the kinds of consumption done with it.&lt;/p&gt;
&lt;p&gt;Are there valid critiques to be offered of tablets, including that certain kinds of consumptive habits are problematic? Of course. But reducing things to their productive utility is ethically flawed, and reducing human pursuits to their productive output even more so. It is just fine if &lt;a href="https://alpha.app.net/matigo"&gt;@matigo&lt;/a&gt; isn’t the sort of guy who loves an iPad. It is &lt;em&gt;not&lt;/em&gt; fine if tech pundits want to slam the iPad and other tablets because they have a misanthropic view of human flourishing—and make no mistake, the utilitarian calculus so often levied against tablets is just that. People are more than what they make; their time is valuable even (and sometimes especially) when not producing anything tangible at all.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Notably, his point about keyboards that differ for different applications has been addressed quite thoroughly in that market! Most music apps ship with music-oriented interfaces, &lt;em&gt;not&lt;/em&gt; traditional QUERTY-style keyboards.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Yes, in theory I could do that on another, less expensive device—but I had a Nexus 7 and nothing I have seen about Android tablets since then convinces me the Android tablet ecosystem has meaningfully improved in the last couple years. The experience factor in using things really does matter to me, and iOS gives me an enormously better experience in every category, even with its foibles and flaws, and nowhere more so than in the massively better app ecosystem.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;An app my friend &lt;a href="http://independentclauses.com/"&gt;Stephen Carradini&lt;/a&gt; and I like so much that we did a &lt;a href="http://www.winningslowly.org/2015/01/take-my-money-now/"&gt;whole episode&lt;/a&gt; of &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt; on it!&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;I like ePUB way better than Kindle’s proprietary, and haven’t gotten around to finding a replacement for &lt;a href="http://readmill.com"&gt;Readmill&lt;/a&gt; yet.&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;And yes, with plenty of other tablets, too! If you’re a Microsoft Surface person, that’s splendid as well.&lt;a href="#fnref5"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary></entry><entry><title>Facebook's "Security" Requirements</title><link href="http://www.chriskrycho.com/2015/facebooks-security-requirements.html" rel="alternate"></link><updated>2015-02-21T12:35:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-02-21:2015/facebooks-security-requirements.html</id><summary type="html">&lt;p&gt;I went to set up 2-step login (AKA 2-factor authentication, or what Facebook calls “Login Approvals”) on Facebook yesterday morning, and was greeted with this lovely message when I clicked “enable”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your current Firefox settings might make it hard to use Login Approvals. It’s probably because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You sometimes clear your cookies.&lt;/li&gt;
&lt;li&gt;Your browser is set to automatically clear cookies whenever it closes.&lt;/li&gt;
&lt;li&gt;You use your browser’s “private browsing” or “incognito” mode.&lt;/li&gt;
&lt;li&gt;You’re using a new browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It may take a few days after fixing these issues before you will be able to enable Login Approvals. You also may need to log out and then log in again after fixing these settings for the changes to take effect.&lt;/p&gt;
&lt;p&gt;Visit the Help Center for step-by-step directions on how to fix these settings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I use Firefox for the social media access I do online—and because I don’t like being tracked, I tell Firefox not to remember history and to delete cookies as soon as I close the browser, and I run &lt;a href="https://github.com/gorhill/uBlock"&gt;μBlock&lt;/a&gt;&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and &lt;a href="https://disconnect.me/"&gt;Disconnect&lt;/a&gt;.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you attempt to enable 2-step login, Facebook checks your security policy… and &lt;em&gt;will not let you turn it on&lt;/em&gt; if your settings are like mine. They supply the message above, with no option to proceed anyway. Of course, there is no technical issue with using 2-step login with a browser configured this way. I use it for GitHub, Google, my domain registrar, and every other service with 2-step login.&lt;/p&gt;
&lt;p&gt;Facebook probably has two motives here. The better one is user experience: it &lt;em&gt;would&lt;/em&gt; be frustrating if you are a non-tech-savvy user who doesn’t understand the consequences of setting this given the browser settings I have. But of course, if they were primarily just concerned with that, they could give the warning and then let users say, “Go ahead; I know what I’m getting into.” The second, less obvious but almost certainly more important motive from Facebook’s point of view, is to discourage people from using a browser the way I do. They want to be able to monetize my Facebook use better, and this means not just my time on Facebook, but my time all over the web. Facebook wants to know what I’m looking at any time I’m surfing &lt;em&gt;anywhere&lt;/em&gt; so that they can tailor their ads to me.&lt;/p&gt;
&lt;p&gt;I’m not interested in being tracked that way.&lt;/p&gt;
&lt;p&gt;Apparently, Facebook isn’t interested in letting people have actual, modern security unless they’re willing to be tracked that way.&lt;/p&gt;
&lt;p&gt;We have a problem here.&lt;/p&gt;
&lt;p&gt;As it turns out, of course, people like me aren’t particularly valuable customers to Facebook anyway, so they probably don’t mind the fact that they’re losing more and more of our time. But losing that time they are. My use of Facebook is diminishing at an ever-increasing rate, for countless little reasons like this, where Facebook’s ad-driven motivations push them to treat me poorly. Too bad for them.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If anyone tells you that blocking ads is “stealing”, they’re talking up nonsense. The Internet is built in such a way that if nothing else you can always just request the plain text version of a website, and that’s extremely important for many reasons, including accessibility. I &lt;em&gt;choose&lt;/em&gt; to leave ads on for any number of sites I want to support, but at the end of the day it’s every publisher’s choice how theyw ant to make money. If a newspaper supports itself with ads and coupons, I have every right to throw them in the trash without a glance; the same is true online.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Yes, I know this isn’t foolproof and I’m still being tracked. It’s impossible &lt;em&gt;not&lt;/em&gt; to be tracked to some degree or another. What I am doing here is &lt;em&gt;decreasing&lt;/em&gt; the degree to which companies can track me.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary></entry><entry><title>Growing Up Together</title><link href="http://www.chriskrycho.com/2014/growing-up-together.html" rel="alternate"></link><updated>2014-11-15T00:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-11-15:2014/growing-up-together.html</id><summary type="html">&lt;p&gt;A few years ago, you might have caught me in a grumpy moment grousing about JavaScript. I distinctly did &lt;em&gt;not&lt;/em&gt; like writing it. Every time I sat down to deal with it, I found myself in a tangled mess of plain JavaScript, jQuery, and DOM manipulations that inevitably left me tearing my hair out.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I found it difficult to write in the first place, and even harder to maintain in the long run. I could not come up with good ways to organize it, especially because so much of what I was doing was so thoroughly &lt;em&gt;ad hoc&lt;/em&gt; in nature. Cobble this together over here; scrounge together those things over there; hope nothing collides in the middle.&lt;/p&gt;
&lt;p&gt;In the last four months, I have written several thousand lines of JavaScript, and I have &lt;em&gt;loved&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;For my latest major project, relaunching &lt;a href="https://holybible.com"&gt;HolyBible.com&lt;/a&gt;, I wrote the front end in &lt;a href="https://angularjs.org"&gt;AngularJS&lt;/a&gt; and the back end as an &lt;a href="http://expressjs.com"&gt;Express&lt;/a&gt; app (the most popular &lt;a href="http://nodejs.org"&gt;NodeJS&lt;/a&gt; web framework). I’ve written gobs of tests in &lt;a href="http://jasmine.github.io"&gt;Jasmine&lt;/a&gt; (using &lt;a href="https://github.com/mhevery/jasmine-node"&gt;jasmine-node&lt;/a&gt; for server-side tests) and drawn on tons of other open-source packages.&lt;/p&gt;
&lt;p&gt;And I have &lt;em&gt;loved&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;A small example: a moment ago, looking up the link for Jasmine, I noted that the latest version released today. My response was, “Ooh—cool!”&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What changed? Well, mostly I changed, but also JavaScript changed a bit. We both grew up over the last four years. On the JavaScript side of things, a lot of good design patterns and tools have come into play in that span. I’m sure there were plenty of good, disciplined web developers writing clear, careful, well-organized client-side JavaScript four years go. But in the interval, that kind of JavaScript got a lot more prominent, in part because it has had help from the rapid rise of server-side JavaScript in the form of Node.js and its flourishing ecosystem of components and tools. Build tools like &lt;a href="http://browserify.org"&gt;Browserify&lt;/a&gt; and development tools like &lt;a href="http://livereload.com"&gt;LiveReload&lt;/a&gt; and &lt;a href="https://incident57.com/codekit/"&gt;Codekit&lt;/a&gt; have combined with best practices learned from those long years of jQuery/DOM-manipulation hell so that these days, good JavaScript is a lot like good programming in any other language: highly modular, carefully designed, and well-organized.&lt;/p&gt;
&lt;p&gt;In the same period of time, I have matured enormously as a developer (just enough to see how far I still have to go, of course). At the point where I most hated JavaScript, I also really struggled to see the utility of callbacks. Frankly, it took me the better part of a month just to get my head around it—most of the tutorials out there just assumed you understood them already, and, well: I didn’t. Functions as first-class members of a language was new to me at that point. Fast-forward through several years of full-time Python development, lots of time spent reading about software development and some harder computer science concepts, and my perspective on JavaScript has shifted more than a little. Closures are beautiful, wonderful things now. Functions as arguments to other functions are delightful and extremely expressive. Prototypal inheritance—trip me up though it sometimes still does—is a fascinating variation on the idea of inheritance and one that I think I like rather better than classical inheritance.&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are still things I don’t love about JavaScript. Its syntax owes far too much to the C family of languages to make me happy; I quite like the way that CoffeeScript borrows from Python (white-space-delimited blocks, use of equality words like &lt;code&gt;is&lt;/code&gt; and boolean rules like &lt;code&gt;and&lt;/code&gt; rather than &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; respectively, etc.). And I am looking forward to a number of features coming in the next version of JavaScript—especially generators and the &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; keywords, which will allow for &lt;em&gt;much&lt;/em&gt; saner patterns.&lt;/p&gt;
&lt;p&gt;But all of that is simply to say that I am now starting to know JavaScript enough to know that its &lt;em&gt;real&lt;/em&gt; issues aren’t the surface-level differences from the other languages with which I’m familiar. They’re not even the warts I noted here. They’re things like the mix of classical and prototypal inheritance in the way the language keywords and object instantiation work. But I don’t mind those. Every language has tradeoffs. Python’s support for lambdas is pretty minimal, despite the utility of anonymous functions, for example. But I &lt;em&gt;like&lt;/em&gt; the tradeoffs JavaScript makes.&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In other words, I discovered the same thing so many other people have over the last few years: JavaScript isn’t just a good choice for utilitarian reasons. Beneath that messy exterior is a gem of a language. I’m having a lot of fun with it.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Thus the early balding starting by my temples.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;My wife’s bemused response: “Is that &lt;em&gt;another&lt;/em&gt; language?” Take that as you will.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;The couple weeks I got to spend &lt;a href="http://www.chriskrycho.com/2014/a-little-crazy.html"&gt;playing&lt;/a&gt; with &lt;a href="http://iolanguage.org"&gt;Io&lt;/a&gt; certainly helped! Io’s prototypal inheritance is semantically “purer” than JavaScript’s, which is quite an improvement in my view. JavaScript’s &lt;code&gt;new&lt;/code&gt; keyword and the pseudo-classical object pattern it brings along can go rot in a bog.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Truth be told, I like them even better from the perspective of CoffeeScript, which hides a lot of the rough edges of JavaScript and, as noted above, brings in quite a few things I like from Python. For my part, I intend to write as much CoffeeScript as possible going forward.&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category></entry><entry><title>A Ridiculous Situation</title><link href="http://www.chriskrycho.com/2014/a-ridiculous-situation.html" rel="alternate"></link><updated>2014-11-07T21:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-11-07:2014/a-ridiculous-situation.html</id><summary type="html">&lt;p&gt;One of the pieces of code I’m maintaining has an &lt;em&gt;absurd&lt;/em&gt; situation in its build structure—honestly, I’m not sure how it ever compiled. For simplicity’s sake, let us assume the four following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secondary.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writer.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calculator.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The project has many more files than this, of course, but these are the important ones for demonstrating this particular piece of insanity (which shows up &lt;em&gt;many&lt;/em&gt; places in the codebase).&lt;/p&gt;
&lt;p&gt;I’m reproducing here some dummy code representing an &lt;em&gt;actual set of relationships in the codebase&lt;/em&gt;. The functions and module nameshave been changed; the relationships between the pieces of code have not.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; When I started trying to build the program that included what I am representing as &lt;code&gt;main.c&lt;/code&gt; below, this is the basic structure I found:&lt;/p&gt;
&lt;section id="main.cpp" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;main.cpp&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is the main module of the program. In the actual code in which I found this particular morass, it was actually code generated by the UI builder in Visual Studio 6&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and then turned into an unholy mess by a developer whose idea of good programming involved coupling the various parts of the code as tightly as possible.&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;#include &amp;quot;calculator.h&amp;quot;
#include &amp;quot;secondary.h&amp;quot;

int a=0, int b=0;

int addNumbers(a, b) {
    return a+b;
}

void doBadThingsWithGlobals(int * someNumber) {
    a = 6;
    *someOtherNumber = 5;
}

#include &amp;quot;writer.h&amp;quot;

void main() {
    a = 3;
    doBadThingsWithGlobals(&amp;amp;b);
    addNumbers(a, b);
    doStuffWithNumbers(a,b);
    subtractNumbers(b, a);
}

// More insanity follows...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, the main function and the &lt;code&gt;doBadThingsWithGlobals&lt;/code&gt; function are both modifying global state, and yes, there is an include statement midway down through the module. (Just wait till you see what it does.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="secondary" class="level3"&gt;
&lt;h3&gt;“secondary”&lt;/h3&gt;
&lt;p&gt;Here is a secondary module which has been somewhat cleaned up. It has normal relationships between header and source files, and includes all its dependency headers at the top of the file. It has a header which defines the public API for the module, and that even has inclusion guards on it.&lt;/p&gt;
&lt;section id="secondary.h" class="level4"&gt;
&lt;h4&gt;&lt;code&gt;secondary.h&lt;/code&gt;&lt;/h4&gt;
&lt;pre class="c"&gt;&lt;code&gt;#ifndef SECONDARY_H
#define SECONDARY_H

int doStuffWithNumbers();

#endif SECONDARY_H&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="secondary.c" class="level4"&gt;
&lt;h4&gt;&lt;code&gt;secondary.c&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;doStuffWithNumbers&lt;/code&gt; function here calls &lt;code&gt;addNumbers&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;#include &amp;quot;secondary.h&amp;quot;
#include &amp;quot;calculator.h&amp;quot;

int doStuffWithNumbers(int x, int y) {
    addNumbers(x, y);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;But wait!&lt;/em&gt; you say, &lt;em&gt;That function isn’t defined here!&lt;/em&gt; Ah, and you would be right, except that it doesn’t refer to the &lt;code&gt;addNumbers&lt;/code&gt; function in &lt;code&gt;main.c&lt;/code&gt;. It refers to a function implementation in &lt;code&gt;calculator.h&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="calculator.h" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;calculator.h&lt;/code&gt;&lt;/h3&gt;
&lt;pre class="c"&gt;&lt;code&gt;int addNumbers(int p, int q) {
    return p + q;
}

int subtractNumbers(int r, int s) {
    return r - s;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Strangely, this &lt;code&gt;addNumbers&lt;/code&gt; function is identical to the one in &lt;code&gt;main.c&lt;/code&gt;. Even &lt;em&gt;more&lt;/em&gt; strangely, it is defined—not merely declared, actually defined—in the header file! Nor is this the only such function. Look at the details of &lt;code&gt;writer.h&lt;/code&gt;, which was mysteriously included above in the middle of the main module.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="writer.h" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;writer.h&lt;/code&gt;&lt;/h3&gt;
&lt;pre class="c"&gt;&lt;code&gt;void writeStuff() {
    fprintf(stdout, &amp;quot;a: %d, b: %d&amp;quot;, a, b);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again, we have a full-fledged implementation in the header file. Why, you ask? Presumably because the developer responsible for writing this code never quite got his head around how C’s build system works. The entirety of one of the central components of this software—an element that in any normal build would be a common library—was a single, approximately 2,000-line &lt;em&gt;header file&lt;/em&gt;. (Say hello to &lt;code&gt;calculator.h&lt;/code&gt; up there; that’s what I’m abstracting away for this example.)&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Worse: it is printing the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and no, I am not skipping some part of &lt;code&gt;writer.h&lt;/code&gt;. It is getting those from &lt;code&gt;main.c&lt;/code&gt;, because it was included after they were defined, and the build process essentially drops this header inline into &lt;code&gt;main.c&lt;/code&gt; before it compilation.&lt;a href="#fn5" class="footnoteRef" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; So here we have a header file with the implementation of a given piece of code, included in a specific location and defined in such a way that if you change where it is included, it will no longer function properly (since the variables will not have been defined!)&lt;/p&gt;
&lt;p&gt;Worse, there are conflicting definitions for one of the functions used in &lt;code&gt;main.c&lt;/code&gt;, and because of its dependency on &lt;em&gt;other&lt;/em&gt; functions in &lt;code&gt;calculator.h&lt;/code&gt; (e.g. &lt;code&gt;subtractNumbers&lt;/code&gt; in this mock-up), it cannot be removed! Moreover, given the many places &lt;code&gt;calculator.h&lt;/code&gt; is referenced throughout the code base, it is non-trivial to refactor it.&lt;a href="#fn6" class="footnoteRef" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If this sounds insane… that’s because it is.&lt;/p&gt;
&lt;p&gt;If you’re curious how I dealt with it, well… I renamed the &lt;code&gt;addNumbers()&lt;/code&gt; function in &lt;code&gt;main.c&lt;/code&gt; to &lt;code&gt;_addNumbers()&lt;/code&gt; and put a loud, angry &lt;code&gt;TODO&lt;/code&gt; on it for the current release, because the only way to fix it is to refactor this whole giant mess.&lt;/p&gt;
&lt;p&gt;The takeaway of the story, if there is one, is that people will do crazier, weirder, worse things than you can possibly imagine when they don’t understand the tools they are using and just hack at them till they can make them work. The moral of the story? I’m not sure. Run away from crazy code like this? Be prepared to spend your life refactoring?&lt;/p&gt;
&lt;p&gt;How about: try desperately &lt;em&gt;not&lt;/em&gt; to leave this kind of thing for the person following you.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;That’s actually not &lt;em&gt;wholly&lt;/em&gt; true, because these pieces of code are also duplicated in numerous places throughout the codebase. We’ve eliminated as many as possible at present… but not all of them, courtesy of the crazy dependency chains that exist. Toss in a dependency on Visual Studio 6 for some of those components, and, well… suffice it to say that we’re just happy there are only two versions floating around instead of the seven that were present when I started working with this codebase two and a half years ago.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Yes, &lt;a href="http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_6.0_.281998.29"&gt;&lt;em&gt;that&lt;/em&gt;&lt;/a&gt; Visual Studio 6. The one from 1998. Yes, that’s insane. No, we haven’t managed to get rid of it yet, though we’re close. So close.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I am not joking. Multi-thousand line functions constituting the entirety of a program are not just &lt;em&gt;normal&lt;/em&gt;, they are pretty much the only way that programmer ever wrote. When you see the code samples below, you will see why: someone was lacking an understanding of C’s build system.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Also, that’s the piece of code of which I found seven different versions in various places when I started. Seven!&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;I once ran into some code working on a different project for an entirely different client where there had been a strict 1,000-line limit to C source files, as part of an attempt to enforce some discipline in modularizing the code. Instead of embracing modularity, the developers just got in the habit of splitting the source file and adding &lt;code&gt;#include&lt;/code&gt; statements at the end of each file so that they could just keep writing their non-modular code.&lt;a href="#fnref5"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;I have tried. Twice. I’m hoping that the third time &lt;em&gt;will&lt;/em&gt; be the charm.&lt;a href="#fnref6"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category></entry><entry><title>Nailed It</title><link href="http://www.chriskrycho.com/2014/nailed-it.html" rel="alternate"></link><updated>2014-10-22T22:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-10-22:2014/nailed-it.html</id><summary type="html">&lt;p&gt;Yesterday, something rather remarkable happened. Someone leaked a copy of the trailer for &lt;em&gt;Avengers: Age of Ultron&lt;/em&gt;… and Marvel, rather than throwing a hissy fit, just tweeted:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dammit, Hydra. (&lt;a href="https://twitter.com/Marvel/status/525071656306626560"&gt;October 22, 7:50 PM EST&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pitch perfect. It’s self-aware, self-&lt;em&gt;referential&lt;/em&gt; in a funny way without being too clever-seeming or coming off like it’s trying too hard, and just a generally good response. The team could have fought it (though ultimately that would have just made things worse), but instead Marvel played its hand perfectly. The response was was funny &lt;em&gt;and&lt;/em&gt; demonstrated that the folks who work there actually understand how the internet works.&lt;/p&gt;
&lt;p&gt;That alone would have been good enough to put Marvel in a league of its own when it comes to managing things &lt;em&gt;not&lt;/em&gt; going the way hoped for. But (after what I’m sure was considerable back-room wrangling), they followed it up an hour and a half later with another, equally fantastic tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here it is! Watch the &lt;a href="https://twitter.com/Avengers"&gt;@Avengers&lt;/a&gt;: &lt;a href="https://twitter.com/hashtag/AgeofUltron?src=hash"&gt;#AgeofUltron&lt;/a&gt; Teaser Trailer right NOW: &lt;a href="http://youtu.be/tmeOjFno6Do" class="uri"&gt;http://youtu.be/tmeOjFno6Do&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Avengers?src=hash"&gt;#Avengers&lt;/a&gt; (&lt;a href="https://twitter.com/Marvel/status/525093857772318720"&gt;October 22, 9:18 PM EST&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Your average old-media company these days would have thrown a fit and made a stink about the release of their media. They would have done everything in their power to get the video taken down. Many companies &lt;em&gt;have&lt;/em&gt; done just that under similar circumstances, aiming to get the trailer, snippets of the movie, music, or the like removed from the internet. But that simply isn’t how the internet works: it famously “treats censorship like damage and routes around it” (&lt;a href="http://www.chemie.fu-berlin.de/outerspace/internet-article.html"&gt;John Gilmore&lt;/a&gt;). Once a video is online, it’s online. Someone, somewhere, still has a copy of it and can put it back up. So rather than fight it… Marvel just rolled with it and made the best of the situation. They cracked a joke, went ahead and put the trailer out themselves, and earned general approval from the internet. Again.&lt;/p&gt;
&lt;p&gt;Despite being a decades-old company, Marvel is clearly a new media company through and through at this point. They managed to dodge the &lt;a href="http://www.economist.com/blogs/economist-explains/2013/04/economist-explains-what-streisand-effect"&gt;Streisand effect&lt;/a&gt; quite nicely, turning what could have been an opportunity for hostility all around into a PR coup and a win that they couldn’t have scored on their own.&lt;/p&gt;
&lt;p&gt;Other old (and new!) media companies, take note. &lt;em&gt;This&lt;/em&gt; is the way you play the game. You recognize when the cat is out of the bag and you run with it. Own it. Make it your own somehow. Don’t let it own you. The internet is a big, crazy, chaotic place, and you can never hope to control it—nor even the narrative about you and your stuff, whatever that may be—like you might have been able to do twenty-five years ago. But that’s okay. If you can roll with the punches, you can still come out ahead, and you’ll look a little more human doing it. I call that winning.&lt;/p&gt;
&lt;p&gt;(Go Marvel.)&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary></entry><entry><title>The Next Generation of Version Control</title><link href="http://www.chriskrycho.com/2014/next-gen-vcs.html" rel="alternate"></link><updated>2014-10-20T07:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-10-16:2014/next-gen-vcs.html</id><summary type="html">&lt;p&gt;The current state of affairs in version control systems is a mess. To be sure, software development is &lt;em&gt;far&lt;/em&gt; better with &lt;em&gt;any&lt;/em&gt; of the distributed version control systems in play—the three big ones being &lt;a href="http://git-scm.com"&gt;Git&lt;/a&gt;, &lt;a href="http://mercurial.selenic.com"&gt;Mercurial&lt;/a&gt; (&lt;code&gt;hg&lt;/code&gt;), and &lt;a href="http://bazaar.canonical.com/en/"&gt;Bazaar&lt;/a&gt; (&lt;code&gt;bzr&lt;/code&gt;), with a few other names like &lt;a href="http://www.fossil-scm.org"&gt;Fossil&lt;/a&gt; floating around the periphery—than it ever was in a centralized version control system. There are definitely a few downsides for people converting over from some standard centralized version control systems, notably the increased number of steps in play to accomplish the same tasks.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; But on the whole, the advantages of being able to commit locally, have multiple complete copies of the repository, and share work without touching a centralized server far outweigh any downsides compared to the old centralized system.&lt;/p&gt;
&lt;p&gt;That being so, my opening statement remains true, I think: &lt;em&gt;The current state of affairs in version control is a mess.&lt;/em&gt; Here is what I mean: of those three major players (Git, Hg, and Bazaar), each has significant downsides relative to the others. Git is famously complex (even arcane), with a user interface design philosphy closely matching the UI sensibilities of Linus Torvalds—which is to say, all the wires are exposed, and it is about as user-hostile as it could be.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; It often outperforms Hg or Bazaar, but it has quirks, to say the very least. Hg and Bazaar both have &lt;em&gt;much&lt;/em&gt; better designed user interfaces. They also have saner defaults (especially before the arrival of Git 2.0), and they have better branching models and approaches to history.&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; They have substantially better documentation—perhaps especially so with Bazaar, but with either one a user can understand how to use the tool &lt;em&gt;without having to understand the mechanics of the tool&lt;/em&gt;. This is simply not the case with Git, and while I &lt;em&gt;enjoy&lt;/em&gt; knowing the mechanics of Git because I find them interesting, &lt;em&gt;having&lt;/em&gt; to understand the mechanics of a tool to be able to use it is a problem.&lt;/p&gt;
&lt;p&gt;But the other systems have their downsides relative, to Git, too. (I will focus on Hg because I have never used Bazaar beyond playing with it, though I have read a good bit of the documentation.) Mutable history in Git is valuable and useful at times; I have rewritten whole sequences of commits when I realized I committed the wrong things but hadn’t yet pushed.&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Being able to commit chunks instead of having to commit whole files at a go is good; I feel the lack of this every time I use Hg.&lt;a href="#fn5" class="footnoteRef" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; (Needing to understand the &lt;em&gt;file system&lt;/em&gt; that Git invented to make sure you do not inadvertently destroy your repository is… not so good.) A staging area is nice,&lt;a href="#fn6" class="footnoteRef" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; (even if &lt;em&gt;having&lt;/em&gt; to stage everything manually can be in the pain in the neck&lt;a href="#fn7" class="footnoteRef" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In short, then, there was no clear winner for this generation. Each of the tools has significant upsides and downsides relative to the others. Git has become the &lt;em&gt;de facto&lt;/em&gt; standard, but &lt;em&gt;not&lt;/em&gt; because of its own superiority over the alternatives. Rather, it won because of other forces in the community. Mostly I mean &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;, which is a &lt;em&gt;fantastic&lt;/em&gt; piece of software and easily the most significant driving factor in the wider adoption of Git as a tool. The competition (&lt;a href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt; and &lt;a href="https://launchpad.net"&gt;Launchpad&lt;/a&gt;) are nowhere near the same level of sophistication or elegance, and they certainly have not managed to foster the sorts of community that GitHub has. The result has been wide adoption of Git, and a degree of Stockholm Syndrome among developers who have adopted it and concluded that the way Git works is the way a distributed version control system &lt;em&gt;should&lt;/em&gt; work.&lt;/p&gt;
&lt;p&gt;It is not. Git is complicated to use and in need of tools for managing its complexity; the same is true of Hg and Bazaar, though perhaps to a slightly lesser extent because of their saner branching models. This is what has given rise to the &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;plethora&lt;/a&gt; of &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;different&lt;/a&gt; formal &lt;a href="https://about.gitlab.com/2014/09/29/gitlab-flow/"&gt;workflows&lt;/a&gt; representing various attempts to manage that complexity (which have been &lt;a href="https://bitbucket.org/yujiewu/hgflow/wiki/Home"&gt;applied&lt;/a&gt; to other systems &lt;a href="https://andy.mehalick.com/2011/12/24/an-introduction-to-hgflow"&gt;as well&lt;/a&gt;). Managing branching, linking that workflow to issues, and supplying associated documentation for projects have also cropped up as closely associated tasks— thus the popularity of GitHub issues and Bitbucket wikis, not to mention &lt;a href="http://www.fossil-scm.org"&gt;Fossil’s&lt;/a&gt; integration of both into the DVCS tool itself. None of the tools handle differences between file systems very elegantly (and indeed, it took &lt;em&gt;years&lt;/em&gt; for Git even to be useable on Windows). All of them especially struggle to manage symlinks and executable flags.&lt;/p&gt;
&lt;p&gt;So there is an enormous opportunity for the &lt;em&gt;next&lt;/em&gt; generation of tools. Git, Hg, and so on are huge steps forward for developers from CVS, Visual SourceSafe, or SVN. But they still have major weaknesses, and there are many things that not only can but should be better. In brief, I would love for the next-generation version control system to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distributed (this is now a non-negotiable);&lt;/li&gt;
&lt;li&gt;fast;&lt;/li&gt;
&lt;li&gt;well-documented—&lt;em&gt;at least&lt;/em&gt; as well as Hg is, and preferably as well as Bazaar is;&lt;/li&gt;
&lt;li&gt;well-designed, which is to say having a user interface that is actually a user-interface (like Hg’s) and not an extremely leaky abstraction around the mechanics;&lt;a href="#fn8" class="footnoteRef" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fast;&lt;/li&gt;
&lt;li&gt;file-system oriented, &lt;em&gt;not&lt;/em&gt; diff-oriented: this is one of Git’s great strengths and the reason for a lot of its performance advantages;&lt;/li&gt;
&lt;li&gt;extensible, with a good public API so that it is straightforward to add functionality like wikis, documentation, social interaction, and issue tracking in a way that actually integrates the tool;&lt;a href="#fn9" class="footnoteRef" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and last but not least, truly cross-platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is a non-trivial task, but the first DVCS that manages to hit even a sizeable majority of these desires will gain a lot of traction in a hurry. The second generation of distributed version control has been good for us. The third could be magical.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;A point that was highlighted for me in a conversation a few months ago with my father, a programmer who has been using SVN for a &lt;em&gt;long&lt;/em&gt; time and found the transition to Git distinctly less than wonderful.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Anyone who feels like arguing with me on this point should go spend five minutes laughing at the &lt;a href="http://git-man-page-generator.lokaltog.net"&gt;fake man pages&lt;/a&gt; instead.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Few things are as hotly debated as the relative merits of the different systems’ branching models and approaches to history. At the least, I can say that Hg and Bazaar’s branching models are &lt;em&gt;more to my taste&lt;/em&gt;.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Yes, there are extensions that let you do this with Hg, but they are fragile at best in my experience, and substantially less capable than Git’s.&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Yes, I know about Hg’s record extension. No, it is &lt;em&gt;not&lt;/em&gt; quite the same, especially because given the way it is implemented major GUI tools cannot support it without major chicanery.&lt;a href="#fnref5"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Yes, I know about Hg’s queue extension, too. There is a reason it is not turned on by default, and using it is substantially more arcane than Git’s staging are. Think about that for a minute.&lt;a href="#fnref6"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;Yes, there is the &lt;code&gt;-a&lt;/code&gt; flag. No, I do not want to have to remember it for every commit.&lt;a href="#fnref7"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;Let’s be honest: if Git’s abstraction were a boat, it would sink. It’s just that leaky.&lt;a href="#fnref8"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;GitHub does all of this quite well… but they have had to write heaps and gobs of software &lt;em&gt;around&lt;/em&gt; Git to make it work.&lt;a href="#fnref9"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category></entry><entry><title>Pushing Into C's Corner Cases</title><link href="http://www.chriskrycho.com/2014/pushing-into-cs-corner-cases.html" rel="alternate"></link><updated>2014-08-12T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-08-12:2014/pushing-into-cs-corner-cases.html</id><summary type="html">&lt;p&gt;I’m working on a project that is all in C because of its long history and legacy. We’re slowly modernizing the codebase and writing all our new code in Python (using NumPy, C extensions, and so on for performance where necessary). Occasionally, I just want to bang my head against the wall because there are things we can do so simply in any modern language that you just can’t do in any straightforward way in C. For example, I have file writers that all work &lt;em&gt;exactly&lt;/em&gt; the same way, with the single exception that the format string and the data that you put into it vary for each file.&lt;/p&gt;
&lt;p&gt;In Python, this would be straightforward to handle with the class machinery: you could simply specify the format string in each inheriting class and define the data points to be supplied at the top of an overriding function, call the parent function with &lt;code&gt;super()&lt;/code&gt; and be done.&lt;/p&gt;
&lt;p&gt;To do something similar in pure C is nearly impossible. You can supply a format string with each function (or module, or however you separate out the code), and if you feel especially clever you could convert all your data types to strings and pass them as a list to be printed by the standard function. The net result would be &lt;em&gt;longer&lt;/em&gt; and &lt;em&gt;less maintainable&lt;/em&gt; than simply having a set of essentially-duplicate functions, though.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="software development"></category></entry><entry><title>Don't Be Rude</title><link href="http://www.chriskrycho.com/2014/dont-be-rude.html" rel="alternate"></link><updated>2014-07-12T15:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-12:2014/dont-be-rude.html</id><summary type="html">&lt;section id="note" class="level6"&gt;
&lt;h6&gt;Note&lt;/h6&gt;
&lt;p&gt;I have left the original post here as I wrote it, but there is an important &lt;a href="#edit-and-addendum"&gt;addendum&lt;/a&gt; at the bottom of the post that you should make sure to read (and note in particular the &lt;a href="#further-addendum"&gt;further addendum&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This post came off as pretty critical of MarketCircle, and that &lt;em&gt;really&lt;/em&gt; wasn’t my point. I wanted to use a bad experience I had with MarketCircle to illustrate a general principle, &lt;em&gt;not&lt;/em&gt; to poke at any particular company. I did that poorly in this particular piece; for some follow-up on that see &lt;a href="http://www.chriskrycho.com/2014/i-wrote-it-wrong.html"&gt;this post&lt;/a&gt; which I wrote later that day, analyzing how and why this piece so spectacularly failed to accomplish my desired goals.&lt;/p&gt;
&lt;p&gt;In any case, I do not want this piece to turn people off of using MarketCircle’s software. I leave the unedited version below because I believe in having the intellectual integrity to own one’s mistakes. This was one of mine.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The quickest way to make me bid your company or product farewell is to patronize me. Don’t talk down to me. Never treat me like anything but an adult. The moment you do, I am gone.&lt;/p&gt;
&lt;p&gt;Given which: farewell &lt;a href="https://www.marketcircle.com"&gt;MarketCircle&lt;/a&gt;, and adieu &lt;a href="https://www.marketcircle.com/billingspro/"&gt;Billings&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A story: When I started working as a freelance software developer on the side a few years ago,&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I looked at my options for tracking time and invoicing clients. I eventually settled on &lt;a href="https://www.marketcircle.com/billingspro/"&gt;Billings&lt;/a&gt;, by &lt;a href="https://www.marketcircle.com"&gt;MarketCircle&lt;/a&gt;. It’s solid software: it is reliable, works well, and does everything I need it to, including tracking different clients and projects easily and sending them estimates or invoices. Best of all, from my perspective, it was a local app. You &lt;em&gt;could&lt;/em&gt; sync with a server out in the cloud somewhere via Billings Pro, but you did not have to, and you could use the Mac-native application, not some web app out there. Last but not least, it had a &lt;em&gt;great&lt;/em&gt; menubar app. I was sold, and I gladly dropped $40 for a single-user license.&lt;/p&gt;
&lt;p&gt;Fast forward to June 2013. MarketCircle, like a lot of software development companies, came to the conclusion that it is &lt;em&gt;really&lt;/em&gt; hard to develop software as a series of discrete releases, for which you get people to pay over and over again. Perfectly sensibly, they &lt;a href="https://www.marketcircle.com/blog/streamlining-the-billings-product-line/"&gt;discontinued development&lt;/a&gt; on and support for their standalone software and provided &lt;a href="https://www.marketcircle.com/billingspro/offer/"&gt;a (discounted!) migration path&lt;/a&gt; for users to upgrade to the Pro (syncing, etc.) version of the software. Note that they did &lt;em&gt;not&lt;/em&gt; do anything to disable functionality in existing Billings installations—just provided an upgrade path and stopped developing it. That is the right way to handle it. So far so good.&lt;/p&gt;
&lt;p&gt;I am a software developer, and I have seen the pressures that exist in this industry. This move made good business sense to me, and I liked Billings as a product. I was quite willing to look at their Pro plan, and possibly even to invest in it, despite the fact that I did not &lt;em&gt;need&lt;/em&gt; it, because I believe in supporting the developers of the software I use.&lt;/p&gt;
&lt;p&gt;I emailed them a couple follow-up questions. One of them, and among the most important to me because of how I work for one particular client:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I note that in Billings Pro, unlike in Billings, I can’t track multiple slips simultaneously. This is problematic for me, as I often do this to keep track of hours worked against a “Personal projects” bit so I can see my hourly variations. That’s a make-or-break kind of thing for me—any chance you guys will change that behavior?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To elaborate: I like to track my total hours worked every week in a simple way, so I have a “Personal” timer going alongside the project timer for whatever I am doing. The fact that Billings let me do this was one of the selling points for me. Even so, I did not necessarily expect them to support the functionality going forward. The response I got started out reasonably enough:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We allow you to have multiple active timers, but you can only time one task at a time in both applications. In Billings, there was a bug with this, however, this was corrected in Billings Pro.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus far, fair enough: they saw this as a bug. I disagreed, but I understand.&lt;/p&gt;
&lt;p&gt;Then this, though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While we all multi-task we cannot work on two billable items at once.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Whoops.&lt;/em&gt; You just talked down to me.&lt;/p&gt;
&lt;p&gt;You also clearly didn’t read the original email, because you followed up by asking this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you explain a little more about what you track and how and I can see if there’s a different way to do this in Billings Pro that will give you the same result?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hmm. Let me get this straight: I told you what I track and how I use your software, and you thought the appropriate response was to instruct me on what I can and cannot do with it? Clearly not having even read the original question carefully?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nope.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let me explain: you don’t tell your customers that they can’t use your software in ways peculiar to them. You particularly do not do so as though explaining to a child that we simply cannot do certain things. If a user has a quirky way of using your software, you can of course say you don’t intend to support that quirky behavior—but you do not get to tell them that their unanticipated usage is &lt;em&gt;wrong&lt;/em&gt;, and especially not in a condescending tone&lt;/p&gt;
&lt;p&gt;I cancelled my Billings Pro trial within five minutes of receiving that email. The original software I kept: I was at a busy time in the year, switching time- tracking software is non-trivial, and it wasn’t hurting me a bit to keep using the original software anyway. As I am evaluating time tracking software again, not least because I do not know through how many OS X upgrades Billings will continue to perform properly, MarketCircle isn’t on the list. It only took one bad experience to leave a bad taste in my mouth and convince me to move on.&lt;/p&gt;
&lt;p&gt;At this point, it looks like I’m headed to &lt;a href="http://www.getharvest.com/"&gt;Harvest&lt;/a&gt;. It turns out they don’t support multiple timers, either. But they haven’t talked down to me, and that makes all the difference in the world.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There is a takeaway here for anyone paying attention. Namely: respect your customers. Do not talk down to them. Do not assume their uses for your software are wrong, or stupid, even if they are not what you intended. (If anything, that means your users have thought of use cases you didn’t.)&lt;/p&gt;
&lt;p&gt;It is going to far to say that the customer is always right. Sometimes, the customer is wrong. Sometimes, &lt;em&gt;I&lt;/em&gt; am wrong as a customer. But the customer &lt;em&gt;is&lt;/em&gt; always someone to respect. The moment you stop treating your customer with respect is the moment you cross the line into being a company with which I want to do business to one I will avoid.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;section id="edit-and-addendum" class="level6"&gt;
&lt;h6&gt;Edit and Addendum&lt;/h6&gt;
&lt;p&gt;When I posted this on App.net, a few thoughtful acquaintances &lt;a href="https://alpha.app.net/chriskrycho/post/34459957"&gt;pushed back&lt;/a&gt;, noting that the customer service interactions did &lt;em&gt;not&lt;/em&gt; read as condescending to them. It is possible that I misread the original customer service rep’s tone in interacting in me. This is a constant danger in dealing with text-only communication. I take some responsibility for that—but I also note that the frustration had already built up in the course of a conversation that had already included a number of failures to respond to address or respond to my questions and concerns.&lt;/p&gt;
&lt;p&gt;I should also note that I didn’t mean this as a critique of MarketCircle in particular, though re-reading the post in light of the response, it is clear it comes off more that way than I intended. My interactions with MarketCircle were meant simply to illustrate the broader point: customer service matters, and even one bad customer experience can turn off a customer.&lt;/p&gt;
&lt;p&gt;But the takeaway from this addendum is a bit different: I can sympathize with the difficulties facing the customer service rep. I failed at precisely the same task of communicating my intent in writing effectively. Now, whether that rep meant it the way I took it or the way others took it in reading the post, he certainly did not accomplish what he meant to with the exchange. My sympathies are with him. I am perfectly willing (though not perhaps &lt;em&gt;happy&lt;/em&gt;; humility is rarely particularly pleasant) to say that I got it wrong here.&lt;/p&gt;
&lt;p&gt;All that being said… I still have a bad taste in my mouth, and I am still leery of doing further business with MarketCircle. And that &lt;em&gt;does&lt;/em&gt; make the original point in a way, because the emotional response from a bad experience, even one you did not intend, doesn’t fade quickly or at all, even in the face of reasonable articulations of alternative explanations for the bad experience. You have to work at a good customer experience continually.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="further-addendum" class="level6"&gt;
&lt;h6&gt;Further Addendum&lt;/h6&gt;
&lt;p&gt;MarketCircle actually saw this piece—presumably via my link on Twitter—and got back to me, looking to fix this issue, which I really appreciated. In some sense, then, they &lt;em&gt;are&lt;/em&gt; doing exactly what I advocated in this piece.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Early 2010, if you’re curious.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary></entry><entry><title>Goodbye, Notifications</title><link href="http://www.chriskrycho.com/2014/goodbye-notifications.html" rel="alternate"></link><updated>2014-07-11T18:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-11:2014/goodbye-notifications.html</id><summary type="html">&lt;p&gt;In &lt;a href="http://atp.fm/episodes/73" title="73: Notifications Duck"&gt;this week’s episode&lt;/a&gt; of &lt;a href="http://atp.fm"&gt;Accidental Tech Podcast&lt;/a&gt;, hosts Casey Liss and John Siracusa mentioned that they have the sound aspect of notifications disabled on their iDevices (Liss’ iPhone, Siracusa’s iPod Touch). Strange though it might seem, the thought hadn’t occurred to me. I like getting the notice of things having happened on my social media accounts, but I’d concluded recently that I actively disliked having the interruption even of a buzz in my pocket: it forces a mental context shift which inevitably degrades my concentration on whatever task I am about.&lt;/p&gt;
&lt;p&gt;I spent ten minutes this evening and went through my iPhone’s notification settings. The only things which have audible or vibrating notifications now are phone calls (including FaceTime) and text messages. Everything else I disabled. Now, I still have notifications on a number of other items: they can show up in Notification Center, and they can put markers on the home screen apps. After all: if I already have my phone out, it is almost certainly no problem to see a notification come in, and I definitely want to be able to glance at the app on my home screen and see that someone has interacted with me in some way. But when I &lt;em&gt;don’t&lt;/em&gt; have my phone out? It is unhelpful. It is distracting.&lt;/p&gt;
&lt;p&gt;I actually turned on app badges for a number of apps for which I had previously disabled them, because they had been extraneous when I was getting noises or buzzes for the apps and services in question. I also tweaked a number of other apps: some can show app badges but not appear in notification center. Most cannot show anything on the lock screen at all. If I want to check on notifications, I can look explicitly.&lt;/p&gt;
&lt;p&gt;We will see how the experiment goes. Even just a few hours in, though, I can already say I like it. I did &lt;em&gt;not&lt;/em&gt; get any buzzing in my pocket when a few people interacted with me on App.net, or Instagram, or anywhere else. And, social media being what it is, none of those interactions are temporally important (however much it might feel otherwise). They will still be there waiting when I get back.&lt;/p&gt;
&lt;p&gt;Now, this does not automatically make me more productive. I still need self control to be most effective in using my time. It does take away a few of the most obvious distractions and interruptions that make it hard to focus, though, and that is &lt;em&gt;definitely&lt;/em&gt; a win.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary></entry><entry><title>Economies of Scale</title><link href="http://www.chriskrycho.com/2014/economies-of-scale.html" rel="alternate"></link><updated>2014-07-11T10:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-11:2014/economies-of-scale.html</id><summary type="html">&lt;p&gt;I was reading through an interesting Ars Technica &lt;a href=""&gt;article&lt;/a&gt; on the new Long Range Strike Bomber (LRS-B) proposal the Air Force is soliciting. It’s generally interesting to me in part because I’ve worked on a related project in the past, and we talked fairly often about how the LRS-B program might impact it. The article is worth your time. This quote from Robert Gates in the middle of the article, which touches on the program the LRS-B would replace, caught my attention, though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What we must not do is repeat what happened with our last manned bomber. By the time the research, development, and requirements processes ran their course, the aircraft, despite its great capability, turned out to be so expensive—$2 billion each in the case of the B-2—that less than one-sixth of the planned fleet of 132 was ever built.&lt;/p&gt;
&lt;p&gt;Looking ahead, it makes little sense to pursue a future bomber—a prospective B-3, if you will—in a way that repeats this history. We must avoid a situation in which the loss of even one aircraft—by accident, or in combat—results in a loss of a significant portion of the fleet, a national disaster akin to the sinking of a capital ship. This scenario raises our costs of action and shrinks our strategic options, when we should be looking to the kind of weapons systems that limit the costs of action and expand our options.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, in one sense, Gates was absolutely right. On the other hand, he seems to have committed a classic blunder in dealing with these kinds of costs: economies of scale matter. Part of the reason the per-unit price of the B-2 was so high was precisely that we only bought 20 of them. While the units were individually expensive to manufacture and maintain, because of unique materials used in their construction and so on, they were much &lt;em&gt;more&lt;/em&gt; expensive to manufacture in small numbers than they would have been in large numbers. There are basically two reasons for this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;The manufacturing process couldn’t do what it does best (turn out large numbers of standardized parts and thereby reduce costs).&lt;/li&gt;
&lt;li&gt;The costs of development—research, software development, etc.—were all distributed over a much smaller pool than they would have been had the government purchased more aircraft.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This second point is incredibly important to understand. It is certainly true that the absolute cost of buying 132 B-2s would have been high, possibly astronomically and unaffordably high. What it would &lt;em&gt;not&lt;/em&gt; have been is $264 billion. Even assuming that manufacture costs were fully half of the cost-per- plane (almost certainly not the case), it would have been barely over half that. Assume that the B-2 cost $1B per plane to build, and that the other $10B was research. Well, that’s still an expensive plan… but the total cost is something like $144B, not $264B. Those economies of scale matter.&lt;/p&gt;
&lt;p&gt;This same reality is a point made later in the article by another commentator, but I couldn’t let it go. Things like this drive me nuts, because they’re such a common failing in our political discourse. Ignorance of basic economics from the people making decisions with this kind of economic impact is profoundly unhelpful.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary></entry><entry><title>Bundling!</title><link href="http://www.chriskrycho.com/2014/bundling.html" rel="alternate"></link><updated>2014-05-13T14:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-13:2014/bundling.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.digitalbookworld.com/2012/why-do-we-have-to-choose-between-print-and-digital/"&gt;“Why do we have to choose between print and digital?”&lt;/a&gt; asked Richard Curtis at Digital Book World last week, before tackling the topic of bundling—getting ebooks at reduced cost or even free when buying a physical copy of the book. Drawing an analogy from music purchases that have moved in the same direction, he suggests that publishers &lt;em&gt;ought&lt;/em&gt; to be bundling, and then poses the query: When you purchase a print book you should be able to get the e-book for…&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;the full combined retail prices of print and e-book editions&lt;/li&gt;
&lt;li&gt;an additional 50% of the retail price of the print edition&lt;/li&gt;
&lt;li&gt;an additional 25% of the retail price of the print edition&lt;/li&gt;
&lt;li&gt;$1.00 more than the retail price of the print edition&lt;/li&gt;
&lt;li&gt;free&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;He suggests that this proves to be something of a conundrum for decision-makers in the publishing industry. With respect, and while recognizing that it probably &lt;em&gt;feels&lt;/em&gt; like a conundrum to the publishers, I think the answer is really quite simple. Publishers can dramatically increase their profits, and do it in a way that readers will &lt;em&gt;love&lt;/em&gt;. (This is the part where you call me crazy. Up next is the part where I show you why I’m not.)&lt;/p&gt;
&lt;section id="all-or-nothing" class="level2"&gt;
&lt;h2&gt;All or nothing&lt;/h2&gt;
&lt;p&gt;First, we should note that while readers would always choose (e) and publishers would love it if they could get away with (a), the reality is that both of these leave one party out in the cold. Publishers need readers, and readers need publishers. Publishers need readers or they die. Readers need publishers as providers of quality content—not only as the gatekeepers but also as polishers who take good books and make them great. Any system that will pan out well must therefore respect &lt;em&gt;both&lt;/em&gt; sides of that equation. Both (a) and (e) fail that test immediately.&lt;/p&gt;
&lt;p&gt;In the case of (a), the consumer can rightly point out that the cost of distribution of a book is minimal, trivial even, in the grand scheme of book production. That goes double for ebooks: the cost of running a server is a pittance compared to the cost of writing, editing, and proofing a book. “So,” any smart reader says, “I’ve already paid for the book. Why should I have to pay &lt;em&gt;just as much again&lt;/em&gt; for the ebook?”&lt;/p&gt;
&lt;p&gt;In the case of (e), the consumer is getting something of real value—the ebook, with its associated portability, the ability to create [communal interactions][craigmod] around the content through shared marginalia, and so forth—but without recognizing any infrastructure costs this poses to the publisher. As always, there is no free lunch, and that is as it should be.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The worker deserves his wages, and that includes the editor who turns a manuscript into ebook form—especially for &lt;em&gt;good&lt;/em&gt; ebooks, which entail a great deal of work beyond simply running the print manuscript through a conversion script. That involves real people’s time, and therefore costs real money.&lt;/p&gt;
&lt;p&gt;Neither of these options, then, is ultimately good for the market. The readers will rightly reject paying the full price again for a book in a different form; they’ve been conditioned by too many interactions on the internet not to recognize that digital transmission of files the size of a book is, while not costless, not costly either. On the other hand, publishers still need to make money, and they do sink real time and money into the ebook—not at the distribution point, but in the infrastructure involved in the preparation of the manuscript and readying it for digital and physical publication.&lt;/p&gt;
&lt;p&gt;Again: publishers need readers and readers need publishers.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="percentage-games" class="level2"&gt;
&lt;h2&gt;Percentage games&lt;/h2&gt;
&lt;p&gt;Percentage-based cuts—like Curtis’ options (b) and (c)—are much more sensible and reasonable from the perspective of both the consumer and the publisher. In each of these cases, the publisher is granting that the customer has already made a purchase—perhaps a significant one, in the case of a hardcover fiction book. Indeed, when we move out into the realm of reference books or textbooks, the consumer has already given the publisher quite a lot of money. Thus, options (b) and (c) are much friendlier to the consumer than choice (a), while still affording the publisher some profits, unlike (e). This is clearly a step in the right direction.&lt;/p&gt;
&lt;p&gt;The percentage option quickly runs into issues when we start thinking about how such a scheme would work in practice, though. Is it 25% of the hardcover but 50% of the paperback, so that the publisher can recoup more of the costs? In this scheme, it is difficult to match the actual cost of the ebook sale to its relative value compared to the physical copy. Moreover, it’s difficult to standardize. When purchasing a textbook at $150, should someone have to pay another $37.50 or $75 to have a digital copy? It seems unlikely that preparing an ebook of a textbook is really 5-6 times more costly than the preparation of a fiction ebook, which on a percentage basis would come out around $6.50 or $13 for the hardcover at those rates, or $2 or $4 for paperbacks.&lt;/p&gt;
&lt;p&gt;Equally important: &lt;em&gt;will&lt;/em&gt; people pay that much for a digital copy? Publishers may want to study the question in depth by testing the market, but this is a waste of time. The answer is obvious to anyone under the age of 30: &lt;em&gt;no&lt;/em&gt;. The market simply won’t support those kinds of costs on the upper end of the spectrum.&lt;/p&gt;
&lt;p&gt;Again, customers may recognize that they are subsidizing more than simply the cost of distribution, but the preparation and distribution of the ebook don’t justify an additional percentage on these scales beyond some point. I suspect that most customers are willing to pay extra to get the ebook in addition to the physical copy—just not, in most cases, &lt;em&gt;that&lt;/em&gt; much extra.&lt;/p&gt;
&lt;section id="aside-on-reasonability-and-trained-markets" class="level3"&gt;
&lt;h3&gt;Aside: on reasonability and trained markets&lt;/h3&gt;
&lt;p&gt;We must recognize that markets can be &lt;em&gt;trained&lt;/em&gt;. People have come to see $0.99 as a reasonable price for individual songs. There was nothing inevitable about that outcome; it is a direct result of the success of the iTunes store. Had prices been set at $1.49 or $0.33, it’s likely we would have settled on that number as a reasonable price. Similarly, TV show episodes sell at $1.99,&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and people seem to treat that as a reasonable price: the perceived value matches the cost well. They could have been $1 or $2.50, and consumers probably would have settled in with those numbers equally well.&lt;/p&gt;
&lt;p&gt;Of course, had the price been too high, we would have rejected it entirely: markets can be trained, but they’re not capable of stretching into just any shape at all.&lt;/p&gt;
&lt;p&gt;Admittedly, the music market remains volatile, but consumers on the whole don’t seem to balk at spending a dollar on a song. While the piracy rate remains high, iTunes and similar markets provide an outlet for those who are interested in purchasing their music legitimately.&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This outcome results from the combination of a trained market and a sensible cost/value relationship that allowed the training to occur in the first place. Book publishers should aim for the same outcome: profitability on the basis of perceived reasonability of their prices. This will require training the market, but that is possible so long as their expectations are reasonable.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="a-reasonable-target" class="level2"&gt;
&lt;h2&gt;A reasonable target&lt;/h2&gt;
&lt;section id="price-points" class="level3"&gt;
&lt;h3&gt;Price points&lt;/h3&gt;
&lt;p&gt;Curtis’ final suggested price point is close to the mark, but I think some revision is in order. Remember: the aim is to buoy both customer satisfaction &lt;em&gt;and&lt;/em&gt; publisher profitability. Here’s my proposed pricing scheme for fiction (which could be adapted to other parts of the market fairly straightforwardly):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standalone ebook: $4.99&lt;/li&gt;
&lt;li&gt;Paperback:
&lt;ul&gt;
&lt;li&gt;Book: $7.99&lt;/li&gt;
&lt;li&gt;Bundle: $9.99&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Trade paperback:&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Book: $14.99&lt;/li&gt;
&lt;li&gt;Bundle: $15.99&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hardcover:
&lt;ul&gt;
&lt;li&gt;Book: $26.99&lt;/li&gt;
&lt;li&gt;Bundle: $26.99&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m basing these on the current pricing schemes in the market—these are the normal suggested retail prices for paperbacks, trade paperbacks, and hard covers—and on the assumption that the publisher’s goal is to maximize revenue, while the consumer’s goal is to get the most content at a price he feels is reasonable. I’m also taking into account the existing profit curves for publishers: paperbooks are relatively low margin, while hardcovers are the major profit points, at least when they’re successful.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="rationale" class="level3"&gt;
&lt;h3&gt;Rationale&lt;/h3&gt;
&lt;p&gt;First, and most importantly, I believe the market will support these price points. The standalone ebook is less expensive than the paperback, as it should be, since its distribution costs are much lower than the costs of printing and shipping paperbacks. At the same time, ebooks sales will still generate revenue for the publisher; $5 is not a meaningless amount of money.&lt;/p&gt;
&lt;p&gt;For each tier upwards, the cost of the bundled ebook drops. The publisher thus acknowledges the increasing profitability of each tier as well as the increasing cost to the reader. At the same time, the lowered bundling cost incentivizes the user toward the higher profit items. In each case, the bundling cost is sufficiently low as to be in the “impulse purchase” range for most users.&lt;a href="#fn5" class="footnoteRef" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Readers will be far more likely to front the cost of a hardcover if an ebook comes bundled with it, because the value proposition is so much better. At the same time, this is unlikely to decrease the profits of the publisher, because the margins are much higher for hardcovers.&lt;/p&gt;
&lt;p&gt;In fact, bundling at these rates will likely increase publisher profits from ebooks, as most readers currently choose between ebook and physical books. The price of a hardcover is simply too high to allow for the purchase of both. (Even when this is not actually true, it &lt;em&gt;seems&lt;/em&gt; true to consumers, which is equally important in determining their behavior.) With a sufficiently lower barrier to getting the additional content, the likelihood that the reader purchases both goes up substantially.&lt;a href="#fn6" class="footnoteRef" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This potential for increased profitability is compounded by the availability of the bundle at initial purchase time. A consumer who has already committed to spending $8 on a book is unlikely to balk at $10, and even less to balk at the transition from $15 to $16. In many cases, the publisher will earn more money from the book purchase than before, but the reader is still getting a good deal on the ebook. This is &lt;em&gt;exactly&lt;/em&gt; the combination that makes for a flourishing market.&lt;/p&gt;
&lt;p&gt;Finally, the simplicity of these numbers is extremely helpful. Standardizing these prices will decrease the friction inherent in making the purchase decision, which increases the likelihood that a purchase will be made. I’m not suggesting a cartel—price standardization is natural in this sort of market—and I believe the price points I’ve suggested are where the market will settle in the long run. The publishers who get there first will earn enormous goodwill from their readers in the short term, as well as demonstrating their leadership in the industry in ways that set them up for long term success.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="bundle-up" class="level2"&gt;
&lt;h2&gt;Bundle up&lt;/h2&gt;
&lt;p&gt;A smart approach to bundling could be enormously beneficial to the publishing industry. In addition to the pure numerical profitability of the approach outlined above—no small detail in an industry struggling to adapt to the realities of the new economy—it establishes that the publishers are responsive to customers in a way that other large media have not seemed to be. Nothing is so helpful to a company’s long-term sustainability as for consumers to &lt;em&gt;like&lt;/em&gt; it. Reasonable bundling prices would go a long way toward helping readers see publishers as friends, rather than enemies.&lt;/p&gt;
&lt;p&gt;Obviously these numbers work best in the context of fiction. The value propositions are entirely different in other contexts; a cookbook is an entirely different thing than a copy of &lt;em&gt;The Hobbit&lt;/em&gt;. Across the board, though, publishers should keep the same goals in mind: profitability by means of reasonability and approachability. Be allies of the readers, not their enemies. Make it easy and affordable for them to pay you for your work, and they will.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;My thanks to &lt;a href="http://stephencarradini.com"&gt;Stephen Carradini&lt;/a&gt; for invaluable contributions to this piece in two forms: many long conversations about this very topic, and a helpful edit of the actual content.&lt;/p&gt;
&lt;p&gt;[craigmod]: http://craigmod.com/journal/post_artifact/#section_4 “Post Artifact Books and Publishing, Section 4: The post-artifact system” from Craig Mod&amp;quot;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Additionally, there is a signaling problem here: “free” suggests “low value” in a way that publishers rightly want to avoid. See &lt;a href="http://informationarchitects.net/blog/ia-writer-on-prices-and-features/"&gt;“iA Writer: On Prices and Features”&lt;/a&gt;, Section 2: Cost, by Oliver Richtenstein for a lengthy and sensible exploration of this issue. The issue of signaling value should be taken into account in my suggestions later, as well. But more on that below.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;When they sell at all, of course. I’ve written about this problem [before][piracy]: piracy explodes when there is demand without supply. It also tends to grow at a higher rate when the cost is perceived as unreasonable. TV shows priced at $5/episode wouldn’t do well; they seem to sell quite briskly at $1.99. Publishers run the risk of fomenting piracy by setting their prices too high.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I have never seen someone complain that a song is too expensive at a dollar who was willing to pay &lt;em&gt;anything&lt;/em&gt;. A penny would be too pricey from the pirates’ point of view.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Trade paperbacks (TPBs) are similar in size to hardcovers, but have soft covers similar to those in a paperback. Fiction TPBs typically go for around $15. Over the last few years, publishers have started shifting away from the low-margin paperback market into these trade paperbacks, which provide a bit higher profit for them. Personally, I don’t mind, because these books tend to be higher quality paper and bindings. If I’m sitting down with a monster like one of the books in &lt;cite&gt;The Wheel of Time&lt;/cite&gt;, this is far and away the best format for a physical copy.&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;On the signaling issue: the price of the ebook is sufficiently high as to continue to signal real value here, I think. However, in the case of other kinds of books, this scheme should be revisited. A complex EPUB3 with embedded videos or interactive content should signal that it offers a higher value proposition than other ebooks with a higher price point; in some cases, if that content is sufficiently central to the value proposition of the book, it might be more expensive than the physical copies.&lt;/p&gt;
&lt;p&gt;Similarly, a textbook might sell for $150, its ebook at $50, and the bundle at $165—because the cost of preparing a textbook ebook may be substantially higher than that of preparing a fiction ebook. Signaling matters, but overpricing is as much a risk here as underpricing.&lt;a href="#fnref5"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;This has the added benefit of making the purchase of new books over used books more attractive to the consumer: if the coupon for ebook at reduced rate is only available at new book purchase, a $3 used book suddenly has a much lower value proposition relative to the original when the reader is interested in having an ebook copy as well, since the cost of having both is still $8.&lt;/p&gt;
&lt;p&gt;Of course, this leads us to the question of ebook resale, which is currently a legally murky area at best, and requires considerable legal and intellectual development.&lt;a href="#fnref6"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary></entry><entry><title>Why the Smart Reading Device of the Future May Be … Paper</title><link href="http://www.chriskrycho.com/2014/why-the-smart-reading-device-of-the-future-may-be-paper.html" rel="alternate"></link><updated>2014-05-03T10:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-03:2014/why-the-smart-reading-device-of-the-future-may-be-paper.html</id><summary type="html">&lt;p&gt;One thing I didn’t talk about in comparing reading experiences on a Kindle and on an iPad the other day is the elephant in the room: old-fashioned books. I enjoy Kindle and iPad, but I still love books best. Turns out I’m not alone… and there might just be reason for it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wired.com/2014/05/reading-on-screen-versus-paper/"&gt;Brandon Keim at Wired:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Paper books were supposed to be dead by now. For years, information theorists, marketers, and early adopters have told us their demise was imminent. Ikea even redesigned a bookshelf to hold something other than books. Yet in a world of screen ubiquity, many people still prefer to do their serious reading on paper.&lt;/p&gt;
&lt;p&gt;Count me among them. When I need to read deeply—when I want to lose myself in a story or an intellectual journey, when focus and comprehension are paramount—I still turn to paper. Something just feels fundamentally richer about reading on it. And researchers are starting to think there’s something to this feeling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="links"></category></entry><entry><title>iPad vs. Kindle</title><link href="http://www.chriskrycho.com/2014/ipad-vs-kindle.html" rel="alternate"></link><updated>2014-04-30T21:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-30:2014/ipad-vs-kindle.html</id><summary type="html">&lt;p&gt;I’ve been a happy owner of both a Kindle and an iPad Mini for the last several months, and it occurred to me tonight that I use them &lt;em&gt;very&lt;/em&gt; similarly in some ways. Both are primarily reading devices for me. What is different is the kinds of material I read on each.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My Kindle is a first generation Paperwhite, in fairly good condition. (It has one significant quirk in that it sometimes turns on without the power button being pushed. Alas.) I use it nearly every day right now. I have most of my school books on it, and several of my favorite novels. I’m rereading Patrick Rothfuss’ &lt;em&gt;The Wise Man’s Fear&lt;/em&gt; right now, and so I spend a good half a hour a day on the Kindle for that alone. I also get a lot of my seminary reading done on the device.&lt;/p&gt;
&lt;p&gt;On the iPad, on the other hand, I read a lot of web pages, nearly all via &lt;a href="https://www.instapaper.com"&gt;Instapaper&lt;/a&gt;. I had sometimes had Instapaper items delivered to my Kindle, and that worked &lt;em&gt;fairly&lt;/em&gt; well, but I much prefer the experience of using the app on the iPad. I opt to do pretty much any technical reading on the device: its screen just works much better for dealing with things like code samples embedded in a blog post—not least because I can scroll easily if I need to! I also do basically all my Bible reading on the iPad. It is far easier to navigate to different parts of the text, switch translations (or original languages!) while keeping my place there on any of the top-tier iPad apps than on the Kindle. And I sometimes read comics on the iPad—something I would not try in a million years on the current Kindle screen!&lt;/p&gt;
&lt;p&gt;A friend asked a few months ago if I thought one would obviate the other. Given the qualification that neither is in any sense truly a &lt;em&gt;necessity&lt;/em&gt;—we could quite easily get along without either—my answer after several months with both is &lt;em&gt;no&lt;/em&gt;. Though the devices are similar in a number of ways, they fit into very different niches. The things I actively enjoy on each are very different. The Kindle is good for much longer-form reading, and its lack of distractions is nice (though I often take advantage of the Do Not Disturb mode on the iPad when I actually want to accomplish things besides talking on social media). The iPad is better for anything with color, for technical documents, and for anything where navigation more complex than one-page-after-another is important. I would not particularly want to read a novel on it, though!&lt;/p&gt;
&lt;p&gt;I will be curious to see if the devices converge at some point in the future.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; At present, no technology gives both the responsiveness and gorgeous color of the iPad &lt;em&gt;and&lt;/em&gt; the low-contrast, pleasant long-form reading experience offered by the Kindle’s e-ink. If at some point we get a technology that does both, it will be pretty amazing. In the meantime… we still have pretty amazing pieces of technology, and I enjoy them both a lot.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I also use the iPad for a number of other things: App.net and Twitter and so on, &lt;a href="http://www.fiftythree.com"&gt;Paper&lt;/a&gt;, starting some ideas for blog posts, etc. But mainly I read on it!&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;No, Amazon’s Kindle Fire series of tablets are nothing like that convergence: they are &lt;em&gt;functionally&lt;/em&gt; just poor-man’s-iPads hooked into Amazon’s ecosystem. Note that I’m not making a comment about the quality or lack thereof on the devices—only that they’re much reduced in capabilities compared to an iPad or Android (e.g. Nexus 7).&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary></entry><entry><title>A Little Crazy</title><link href="http://www.chriskrycho.com/2014/a-little-crazy.html" rel="alternate"></link><updated>2014-04-29T19:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-29:2014/a-little-crazy.html</id><summary type="html">&lt;p&gt;I’m going to do something a little crazy, I’ve decided. I’m going to go ahead and do like I wrote &lt;a href="http://www.chriskrycho.com/2014/doing-it-myself.html"&gt;a bit back&lt;/a&gt;, and make &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt; actually a thing over the course of the rest of the year. Not so crazy. What is a bit nuts is the way I’ve decided to go about that process. In short: as close to the hardest way possible as I can conceive.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Over the last couple weeks, I’ve been spending a fair bit of time toying with &lt;a href="http://iolanguage.org"&gt;Io&lt;/a&gt;. It’s a neat little language, very different in its approach to a &lt;em&gt;lot&lt;/em&gt; of things than the languages I’ve used previously. My programming language history is very focused on the “normal” languages. The vast majority of real- world code I’ve written has been in one of C, PHP, or Python. I’ve done a good bit of Javascript along the way, more Fortran than anyone my age has any business having done, and a little each of Java and Ruby. Like I said: the normal ones. With the exception of Javascript, all of those are either standard imperative, object-oriented, or mixed imperative and object-oriented languages. Python and Ruby both let you mix in a fair bit of functional-style programming, and Javascript does a &lt;em&gt;lot&lt;/em&gt; of that and tosses in prototypal inheritance to boot.&lt;/p&gt;
&lt;p&gt;But still: they’re all pretty mainstream, “normal” languages. Io isn’t like that at all. For one thing, it’s hardly popular in any sense at all. Well-known among the hackers&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I know, perhaps, but not popular by any measure. It’s small. And it’s very &lt;em&gt;alien&lt;/em&gt; in some ways. It’s &lt;a href="http://en.wikipedia.org/wiki/Prototype-based_programming"&gt;prototypal inheritance&lt;/a&gt;, not normal inheritance. Courtesy of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain"&gt;Javascript&lt;/a&gt;, I have a &lt;em&gt;little&lt;/em&gt; familiarity with that, but it’s definitely still not my default way of thinking about inheritance. Python’s inheritance model (the one I use most frequently) is &lt;em&gt;essentially&lt;/em&gt; the same as that in C++, Java, PHP, and so on—it’s normal class-driven inheritance. Io goes off and does full-blown prototypal inheritance; even just the little I’ve played with it has been fun.&lt;/p&gt;
&lt;p&gt;Io also does a bunch of other things a &lt;em&gt;lot&lt;/em&gt; different from the other languages I’ve used. First, there are no keywords or—formally speaking—even operators in the language. Every action (including ones like &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;) is simply a message. Every value is an object (so &lt;code&gt;1.0&lt;/code&gt; is just as fully an object as an arbitrarily-defined &lt;code&gt;Person&lt;/code&gt;). The combination means that writing &lt;code&gt;1 + 2&lt;/code&gt; is actually just interpreted as the object &lt;code&gt;1&lt;/code&gt; receiving the &lt;code&gt;+&lt;/code&gt; message carrying as its “argument” the &lt;code&gt;2&lt;/code&gt; object (really just the message contents). This is &lt;em&gt;completely&lt;/em&gt; different at a deep paradigm level from the normal object-oriented approach with object methods, even in a language like Python where all elements are objects (including functions). The net result isn’t necessarily particularly different from calling methods on objects, but it is a &lt;em&gt;little&lt;/em&gt; different, with have some interesting consequences. Notably (though trivially—or at least, so it seems to me at this point), you can pass a message to the null object without it being an error. More importantly, the paradigm shift is illuminating.&lt;/p&gt;
&lt;p&gt;Io also has far more capabilities in terms of concurrency than any of the other languagues with which I’m familiar, because it actively implements the &lt;a href="http://en.wikipedia.org/wiki/Actor_model"&gt;Actor Model&lt;/a&gt;, which means its implementation of messaging instead of object method calls can behave in concurrent ways. (I’d say more if I understood it better. I don’t yet, which is one of the reasons I want to study the language. Concurrency is very powerful, but it’s also fairly foreign to me.) It’s also like Lisp in that its code can be inspected and modified at runtime. I’ve wanted to learn a Lisp for several years for this kind of mental challenge, but the syntax has always just annoyed me too much ever to get there. Io will give me a lot of its benefits with a much more pleasant syntax. It has coroutines, which are new to me, and also helpful for concurrency.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The long and short of it is that the language has a ton of features not present in the languages I have used, and—more importantly—is &lt;em&gt;paradigmatically&lt;/em&gt; different from them. Just getting familiar with it by writing a goodly amount of code in it would be a good way to learn in practice a bunch of computer science concepts I never had a chance to learn formally.&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;By now, as long as I’ve rambled about Io, you’ve probably figured out where I was going in that first paragraph. I’ve decided to stretch my brain a bit and write Step Stool in Io. There are bunches of static site generators out there in Python already, many of them quite mature. (This site is running on &lt;a href="https://github.com/getpelican"&gt;one of them&lt;/a&gt; as of the time I write this post—it’s quite solid, even its quirks and limitations occasionally annoy me.) The point of Step Stool has always been twofold, though. First, I’ve wanted to get to a spot where I was really running my own software to manage my site, letting me do whatever I want with it and guaranteeing I always understand it well enough to make those kinds of changes. Second, I’ve just wanted to &lt;em&gt;learn&lt;/em&gt; a whole bunch along the way. Third, it’s right there in the website link: &lt;a href="http://step-stool.io"&gt;step-stool.io&lt;/a&gt;! How could I pass up such an opportunity?&lt;/p&gt;
&lt;p&gt;It is that second goal that has pushed me to do this crazy project this crazy way. It’s crazier than just teaching myself a language in order to do the static site generator itself, too, because there are a few other pieces missing that I’ll need to write to make this work… like a Markdown implementation and an HTML templating language. I’ve never written anything remotely like either before, so I’m going to take the chance to learn a &lt;em&gt;lot&lt;/em&gt; of new things. For the Markdown implementation, rather than relying on regular expression parsing (like most Markdowns do), I’m going to use a Parsing Expression Grammar. That will certainly be more efficient and reliable, but—more importantly—it is also outside my experience. I have yet to start thinking through how to tackle the HTML templating language implementation (though I know I am going to make it an Io implementation of &lt;a href="http://slim-lang.com"&gt;Slim&lt;/a&gt;, which I quite like).&lt;/p&gt;
&lt;p&gt;In any case, I’m going to be taking a good bit longer to get Step Stool finished. That is all right: I am going to learn a ton along the way, and I am quite sure I will have a blast doing it. And that is &lt;em&gt;exactly&lt;/em&gt; what these kinds of projects are for.&lt;/p&gt;
&lt;p&gt;I’ll post updates as I go, with the things I’m learning along the way. Hopefully they’ll be interesting (or at least entertaining).&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Hackers in the original sense of the world. Not “crackers”, but people who like hacking on code, figuring things out the hard way.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Python 3.5 is actually adding coroutines, and I’m excited about that. I’ll feel much more comfortable with them there having used them in Io, I’m sure!&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I got here backwards, as it were—by way of an undergraduate degree in physics. I don’t regret that for a second: I got a much broader education than I could have managed while getting an engineering degree, and most importantly learned &lt;em&gt;how to learn&lt;/em&gt;: easily the most important skill anyone gains from any engineering degree.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category></entry><entry><title>Learning QML, Part 1</title><link href="http://www.chriskrycho.com/2014/learning-qml-part-1.html" rel="alternate"></link><updated>2014-04-11T15:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-11:2014/learning-qml-part-1.html</id><summary type="html">&lt;p&gt;For part of my work with Quest Consultants, I’ve been picking up Qt’s QML toolkit to use in building out the UI. The declarative syntax and ability to define one’s own model in non-C++- or Python-specific ways is quite nice. That said, the learning process has had more than a few bumps along the way. I decided to go ahead and write those up as I go, both for my own reference and in the hope that it may prove useful to others as I go.&lt;/p&gt;
&lt;p&gt;QML is a &lt;em&gt;Javascript-like&lt;/em&gt; language for &lt;em&gt;declarative programming&lt;/em&gt; of a user interface. So it’s a Javascript-based language that sort of behaves like HTML. In fact, it behaves like Javascript in terms of how you define, access, and update properties, and you can embed full-featured (mostly) Javascript functions and objects in it.&lt;/p&gt;
&lt;p&gt;But when you have nested QML Types, you end up with them behaving more like HTML.&lt;/p&gt;
&lt;p&gt;The weirdest bit, and the thing that I’m having the hardest time adjusting to, is that you can only edit properties of root Types when you’re working with an instance of that Type. And those Types are defined by &lt;em&gt;documents&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, to give the simplest possible example, let’s say I defined a new type called &lt;code&gt;Monkey&lt;/code&gt;, in the &lt;code&gt;Monkey.qml&lt;/code&gt; file, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Monkey.qml
import QtQuick 1.1

Item {
    id: monkey_root
    property int monkey_id: -1
    property string monkey_name: &amp;quot;I don&amp;#39;t have a name!&amp;quot;

    Item {
        id: monkey_foot
        property string monkey_foot_desc: &amp;quot;The monkey has a foot!&amp;quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can use that in another file. If they’re in the same directory, it’s automatically imported, so I can just do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//main.qml
import QtQuick 1.1

// Rectangle is exactly what it sounds like. Here we can display things.
Rectangle {
    id: the_basic_shape
    height: 400
    width: 400
    color: green

    Monkey {
        id: monkey_instance
        monkey_id = 42
        monkey_name = &amp;quot;George&amp;quot;  // he&amp;#39;s kind of a curious little guy
    }

    Text {
        text: monkey_instance.monkey_name
        color: &amp;quot;red&amp;quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That creates a (really ugly) rectangle that prints the &lt;code&gt;Monkey&lt;/code&gt;’s name in red text on a green background. It’s impossible to access directly the &lt;code&gt;monkey_foot&lt;/code&gt; element, though, which means that composing more complex objects in reusable ways is difficult. In fact, I haven’t come up with a particularly good way to do it yet. At least, I should say that I haven’t come up with a good way to create high-level reusable components yet. I can see pretty easily how to create low-level reusable components, but once you start putting them together in any &lt;em&gt;specific&lt;/em&gt; way, you can’t recompose them in other ways.&lt;/p&gt;
&lt;p&gt;From what I’ve gotten my head around so far, this ends up being less flexible than either HTML templating languages (which are, or at least can be, completely declarative) or normal Javascript (which is obviously &lt;em&gt;not&lt;/em&gt; declarative). Mind you, it’s all sorts of &lt;em&gt;interesting&lt;/em&gt;, and I have a pretty decent idea what I’m going to do to implement our UI with it, but it’s taken me most of the day to get a good handle on that, and my head still feels a bit funny whenever I’m trying to see how best to create composable components.&lt;/p&gt;
&lt;p&gt;Note, too, that this is the &lt;em&gt;only&lt;/em&gt; way to create a new basic type of object in QML: it has to be the root level object in a QML document. I would &lt;em&gt;really&lt;/em&gt; like to be able to access internal declarations—to have named internal types/objects. Unfortunately, QML doesn’t let you do this. I suspect this has to do with how the QML type system works: it actually binds these types to C++ objects behind the scenes. This is a non-trivially helpful decision in terms of the performance of the application, but it certainly makes my brain a little bit twitchy.&lt;/p&gt;
&lt;p&gt;There are two basic consequences of this structure. First, any types you need to be able to use in other QML objects have to be defined in their own QML documents. Second, it is (as near as I can see so far, at least) difficult to create good generic QML types of more complex structures that you can then use to implement specific variations. For example: if you want to create accordions, you can create a fair number of the low-level elements in generic ways that you can reuse, but once you get to the relationships between the actual model, delegate, and view elements, you will need to create them in custom forms for each distinct approach.&lt;/p&gt;
&lt;p&gt;This is more like creating HTML documents than Javascript, which makes sense, &lt;em&gt;if&lt;/em&gt; you remember that QML is Javascript-based but &lt;em&gt;declarative&lt;/em&gt;. You just have to remember that while you can define some reusable components, the full-fledged elements are like full HTML pages with a templating system: you can include elements, but not override their internal contents. In QML, you can override &lt;em&gt;some&lt;/em&gt; of their contents, which is nice—but that is not the primary way to go about it.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="software development"></category></entry><entry><title>Feels Right</title><link href="http://www.chriskrycho.com/2014/feels-right.html" rel="alternate"></link><updated>2014-04-04T21:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-04:2014/feels-right.html</id><summary type="html">&lt;p&gt;I had spent most of the last week and a half working on getting &lt;a href="http://www.firebirdsql.org"&gt;FirebirdSQL&lt;/a&gt; configured and ready to use for a project I’m working on with &lt;a href="http://www.questconsult.com"&gt;Quest Consultants&lt;/a&gt;. It was slow going. The tool is decent, but the documentation is spotty and it felt like everything was just a bit of a slog—to get it working correctly, to get it playing nicely with other pieces of the development puzzle, to get it working across platforms.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Then, because I had done something a &lt;em&gt;little&lt;/em&gt; bit silly in my eagerness to get up and going last week and written code without a testable configuration, I hit a wall today. The queries weren’t working. I had made a &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception"&gt;bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I spent a substantial part of the day chasing down that bug, and then a conversation with user &lt;em&gt;agronholm&lt;/em&gt; on the &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/"&gt;SQLAlchemy&lt;/a&gt; IRC channel (&lt;a href="irc://irc.freenode.net/sqlalchemy"&gt;freenode/#sqlalchemy&lt;/a&gt;) got me thinking. The Firebird team describes one of their options as an “embedded” server, but &lt;em&gt;agronholm&lt;/em&gt; pointed out that what they really mean is &lt;em&gt;portable&lt;/em&gt;. It’s running a standalone server and client, but it’s not part of the same thread/process (like SQLite is). Then &lt;em&gt;agronholm&lt;/em&gt; very helpfully asked—my having mentioned my preference for &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; earlier—“Does Postgres not have a portable version?” Two minutes later, we had both found &lt;a href="http://sourceforge.net/projects/postgresqlportable/"&gt;PostgreSQL Portable&lt;/a&gt;, and I rejoiced.&lt;/p&gt;
&lt;p&gt;It took me less than half an hour to get it downloaded and set up and to confirm that it would work the way we need for this particular piece of software. (Firebird had taken me a good three hours, what with digging through badly organized and not terribly clear documentation.) It took me less than half an hour more to get PostgreSQL to the same point that I’d finally gotten Firebird to after multiple hours working with it. And I was so &lt;em&gt;very&lt;/em&gt; happy. What had been an especially frustrating work day now had me quietly smiling to myself constantly for the last two and a half hours as I &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception/22872598#22872598"&gt;finished&lt;/a&gt; tracking down the bug that had set me on this path in the first place.&lt;/p&gt;
&lt;p&gt;Several years ago, when I first started doing web development, I got my feet wet in database work with MySQL—probably the single most common starting point for anyone going that route, courtesy of the ubiquity of the standard Linux-Apache- MySQL-PHP stack.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; A year after that, I picked up some work that was already using PostgreSQL and fell in love almost immediately.&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Something just felt &lt;em&gt;better&lt;/em&gt; about running &lt;code&gt;psql&lt;/code&gt; than running &lt;code&gt;mysql&lt;/code&gt; on the command line. Postgres’ implementation of the SQL standard felt more natural. Even the tiniest little details like the way tables display when you query them in &lt;code&gt;psql&lt;/code&gt; was nicer. In less than a week, I was sold and haven’t looked back. While I’ve used MySQL out of convenience on shared hosting from time to time, PostgreSQL is unquestionably my preferred database target.&lt;/p&gt;
&lt;p&gt;Today’s experience brought that all home again. That grin on my face all afternoon felt a bit silly, but it highlights the difference that really good software design makes. I am not just talking about how it looks here—though, to be sure, PostgreSQL is prettier than FirebirdSQL—but how it works. PostgreSQL feels responsive, its command set makes a lot of sense and is easy to use, and it is &lt;em&gt;extremely&lt;/em&gt; well documented. In fact, I would go so far as to say that it is the best documented open source software I have ever used, as well as among the very most robust. (The only other open source software I find to be as incredibly rock-solid and reliable as PostgreSQL is the Linux kernel. I am by no means an expert on either, or on open source software in general, but the Linux kernel is an unarguably amazing piece of work. So is PostgreSQL.) All those tiny little details add up.&lt;/p&gt;
&lt;p&gt;It’s a good reminder for me as I write software that yes, the things I care about—the small matters that would be so easy to overlook when customers express no interest in them—really do matter. People may not know that things like typography make a difference in their experience, but those subtle, often imperceptible things matter. They may not consciously notice the differences in your interface design (even a command line interface), but it will change their experience of the software. Do it poorly, or even in a just-good-enough-to-get- by fashion, and you’ll annoy or simply bore them. Do it well, and you might just delight them—even if they can’t tell you why.&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="examples" class="level2"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;To make my point a little more visible, I thought it might be useful to post samples of SQL to accomplish the same task in the two different database dialects.&lt;/p&gt;
&lt;section id="firebirdsql4" class="level3"&gt;
&lt;h3&gt;FirebirdSQL:&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id INT NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);
CREATE SEQUENCE project_id_sequence;
SET TERM + ;
CREATE TRIGGER project_id_sequence_update
  ACTIVE BEFORE INSERT OR UPDATE POSITION 0
  ON projects
AS
BEGIN
  IF ((new.id IS NULL) OR (new.id = 0))
    THEN new.id = NEXT VALUE FOR project_id_sequence;
END+
SET TERM ; +&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="postgresql" class="level3"&gt;
&lt;h3&gt;PostgreSQL&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id SERIAL NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not just that the PostgreSQL example is shorter and clearer—it is that it is shorter and clearer because its designers and developers have taken the time to make sure that the shorter, cleaner way works well, and have documented it so you can know how to use that shorter cleaner way without too much difficulty.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I do most of my development on a Mac, but do all the testing on the target platform (Windows) in a VM.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;At this point, I would only use one of those by default if I were building a web app: Linux. I’d use &lt;a href="http://wiki.nginx.org/Main"&gt;nginx&lt;/a&gt; instead of Apache, &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; instead of MySQL, and &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt; (though &lt;a href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;, Javascript via &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/vstudio/hh341490"&gt;C# and the .NET stack&lt;/a&gt;, or just about anything &lt;em&gt;but&lt;/em&gt; PHP would do fine).&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;&lt;em&gt;Almost&lt;/em&gt; immediately because at that point configuration on OS X was a bit of a pain. That is &lt;a href="http://postgresapp.com" title="Postgres.app"&gt;no longer the case&lt;/a&gt;.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;To be perfectly fair to Firebird, it is improving. The upcoming 3.0 series release will make these two a lot more similar than they are at present, and clean up a number of other issues. What it won’t do is get the &lt;em&gt;feel&lt;/em&gt; of using Firebird more like that of using Postgres, or make the installation procedure smoother or easier, or make the documentation more complete.&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category><category term="design"></category></entry><entry><title>FirebirdSQL and IntelliJ IDEA (etc.)</title><link href="http://www.chriskrycho.com/2014/firebirdsql-and-intellij-idea-etc.html" rel="alternate"></link><updated>2014-03-28T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-28:2014/firebirdsql-and-intellij-idea-etc.html</id><summary type="html">&lt;p&gt;Setting up IntelliJ IDEA’s built-in database tools to work with FirebirdSQL requires a particular setup configuration, which I’m documenting here for public consumption.&lt;/p&gt;
&lt;p&gt;These setup tools &lt;em&gt;should&lt;/em&gt; be applicable to any of JetBrains’ other Java-based IDEs which include database support (e.g. PyCharm, RubyMine, WebStorm, etc.). &lt;em&gt;Note:&lt;/em&gt; the following apply to IntelliJ IDEA 12 and the associated platforms, but &lt;em&gt;not&lt;/em&gt; to the IDEA 13 platform, which made substantial changes to how databases are configured. The underlying details are consistent, but the interface has changed. I have tested on PyCharm 3.1 to confirm that.&lt;/p&gt;
&lt;p&gt;This was all done on OS X 10.9, so I also make no guarantees that this works on other platforms, though the likelihood that it behaves the same on Linux is fairly good. I will update the post if and when I have confirmed that it does.&lt;/p&gt;
&lt;p&gt;Steps to configuring a database correctly for use with IDEA/etc. Note that steps 1–3 are fairly obvious; the real point of interest is in steps 4 and 5, which took me the longest time to figure out.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Download the latest version of the Firebird &lt;a href="http://www.firebirdsql.org/en/jdbc-driver/"&gt;Java drivers&lt;/a&gt; for your operating system and your Java version. (You can check your Java version by running &lt;code&gt;java -version&lt;/code&gt; at the command line.) Extract the downloaded zip file. The extracted folder should include a file named &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt; (&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is currently 2.2.4).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In IDEA, in the database view, add a new data source: in the Database view (accessible via a menu button on the right side of the screen), right click and choose &lt;strong&gt;New -&amp;gt; Data Source&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;strong&gt;JDBC driver files&lt;/strong&gt;, browse to the location where you extracted the Jaybird driver files and select &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;strong&gt;JDBC driver class&lt;/strong&gt;, choose &lt;code&gt;org.firebirdsql.jdbc.FBDriver&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;strong&gt;Database URL&lt;/strong&gt;, specify &lt;code&gt;jdbc:firebirdsql://localhost:3050/&lt;/code&gt; followed by &lt;em&gt;either&lt;/em&gt; the full path to the database in question or a corresponding alias.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; A full path might look like this on Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/C:/my_project/the_database.db&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With an alias, you would instead have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/the_alias&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then specify valid values for the &lt;strong&gt;User&lt;/strong&gt; and &lt;strong&gt;Password&lt;/strong&gt; fields from your existing configuration of the database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;strong&gt;Test Connection&lt;/strong&gt; button and make sure the configuration works.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That should do it. Note that the driver choice and path configuration both matter. On OS X, I found that only the &lt;code&gt;FBDriver&lt;/code&gt; with this (and one other, older-style and therefore not recommended) path setup worked successfully.&lt;/p&gt;
&lt;p&gt;Observations, corrections, additional information, and miscellaneous comments welcomed on &lt;a href="https://alpha.app.net/chriskrycho"&gt;App.net&lt;/a&gt; or &lt;a href="https://www.twitter.com/chriskrycho"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I strongly recommend configuring an alias in the aliases.conf file in the Firebird home directory (usually set as &lt;code&gt;$FIREBIRD_HOME&lt;/code&gt; during installation on *nix systems). This lets you move the database around at will, update just the configuration file, and not have to update any references to the database file whatsoever.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="Software Development"></category></entry><entry><title>The End of Surfing</title><link href="http://www.chriskrycho.com/2014/the-end-of-surfing.html" rel="alternate"></link><updated>2014-03-26T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-26:2014/the-end-of-surfing.html</id><summary type="html">&lt;p&gt;Sometime in the last few months it occurred to me that I no longer “surf” the internet. I read, to be sure, and every once in a long while I even go on a spree where I follow links from one site to another (or just in a long trail on Wikipedia). In general, however, I no longer surf. I suspect I am not alone in this: if we took a straw poll I would venture that most of my friends offline and acquaintances online alike spend rather less time in “browsing” mode than they do reading Facebook or Twitter or Instagram. Motion from link to link has been replaced by individual hops out onto Buzzfeed or a viral cat picture website.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The obvious explanation for all of this is already there in what I’ve written: Facebook and Twitter and all the rest of the social media web. To be sure, the advent of social media and the increasing degree to which social media have captured user attention on the web are a significant factor in the end of the old surfing/browsing behavior. This is a dream come true for those social media giants which have found ways to deliver ads to their many millions of users and thereby turn enormous profits.&lt;/p&gt;
&lt;p&gt;At the same time, I think there is an oft-overlooked factor in the shifting nature of the web over the last decade: the browser. In fact, if there is any single cause behind the death of old-fashioned surfing, I would point to Firefox 1.0: the browser which popularized tabbed browsing to increasingly large sections of the internet-using public.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The open-source browser steadily ate away at Internet Explorer’s then absurd levels of dominance, until Internet Explorer 8 included of tabs itself. By the time that Chrome came on the scene, tabbed browsing had long since become a given.&lt;/p&gt;
&lt;p&gt;So why do I think that &lt;em&gt;tabbed browsing&lt;/em&gt; of all things contributed to the end of “browsing” and “surfing” as our dominant mode of reading the internet? Simply put: it broke linearity. Previously,&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; one’s experience of the web was single- stranded, leaping from one point to another in a line that however contorted was always connected by the forward and backward buttons on the browser. The moment tabbed browsing came on the scene, that line was broken. Following a link might mean it opened in a new tab instead of moving the whole view forward to it.&lt;/p&gt;
&lt;p&gt;Surfing as I remember it in the late ’90s and early ’00s was inherently the experience of getting lost along that timeline, finding myself dozens of links along the chain and wondering how I had ended up there, and then being able to trace my way back. With tabs, that traceability was gone. With it went the inherent tension that we faced with every link: to follow, or not? To get sucked down into &lt;em&gt;this&lt;/em&gt; vortex or &lt;em&gt;that&lt;/em&gt;? Because in all likelihood, we knew, we were not going to be coming back to this page. With tabs, though, I could open both of those pages without ever leaving this one. I could start new journeys without ending the old. But there was a hidden cost: that newly opened tab had no history. It was a clean slate; before that newly opened link there was only a blank page. If I closed the original from which I had opened it, there was no going back.&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; If I closed this new tabs, there was no going forward to them. The line was broken.&lt;/p&gt;
&lt;p&gt;From there it was only a short step to the idea of a single site being the center from which one ventured out to other points on the web before returning: the Facebooks and Twitters of the world. In some sense, Facebook’s entire model is predicated on the idea that it is natural to open a new tab with that juicy Buzzfeed content while keeping Facebook itself open in a background tab. Would it work in that old linear model? Sort of. Would it feel natural? Never.&lt;/p&gt;
&lt;p&gt;All of this because of tabs. Invention’s most significant results are rarely those the minds behind it expect. When we are designing things—whether a piece of furniture or a piece of the web—we have to remember that design decisions all have repercussions that we may not see. Technology is never neutral. Particular innovations may or may not be &lt;em&gt;morally&lt;/em&gt; significant, but they always produce changes in people’s behavior. Design has consequences.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For the record, lots of that hopping from link to link was on Buzzfeed- like and viral-cat-picture-like sites, too. I am not concerned with the &lt;em&gt;kind&lt;/em&gt; of content being read here, so much as the way it is being read.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Note that I am not crediting Firefox 1.0 with &lt;em&gt;creating&lt;/em&gt; the tabbed browser—only with popularizing it. That distinction matters.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Excepting having multiple browser windows open, which I am sure people did—but to a much lesser extent.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Yes, yes, browser history and re-open closed tab commands. But the &lt;em&gt;experience&lt;/em&gt; of those is different, and that’s what we’re talking about here.&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="design"></category><category term="software development"></category></entry><entry><title>Doing It Myself</title><link href="http://www.chriskrycho.com/2014/doing-it-myself.html" rel="alternate"></link><updated>2014-03-21T22:14:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-21:2014/doing-it-myself.html</id><summary type="html">&lt;p&gt;Last summer, I started work on a project I named &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;—aiming to make a static site generator that would tick of all the little boxes marking my desires for a website generator. In due time, the project got put on hold, as I started up classes again and needed to focus more on my family than on fun side projects.&lt;/p&gt;
&lt;p&gt;Come the beginning of 2014, I was ready to bit WordPress farewell once and for all, though. While &lt;a href="https://ghost.org"&gt;Ghost&lt;/a&gt; looks interesting, since I do all my writing in Markdown files, there is something tempting about the canonical version of the documents being the version on my computer (and thus also on my iPad and iPhone and anywhere I have Dropbox and/or Git access). I did not have time at the beginning of the year to finish writing Step Stool, and I knew as much,&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; so instead I moved to &lt;a href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt; as a stop-gap. There were lots of good reasons to pick Pelican: it has an active development community, fairly thorough documentation,&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and it’s in Python and uses Jinja2 templates—the same basic approach I had taken with Step Stool, and the same toolset.&lt;/p&gt;
&lt;p&gt;Unfortunately, while I have been glad to be away from WordPress, my experience with Pelican so far has only reinforced my desire to get Step Stool done. There are &lt;em&gt;lots&lt;/em&gt; of little things that it does in ways that just annoy me. Many of them have to do with configuration and documentation. On the latter, while the documentation is &lt;em&gt;fairly&lt;/em&gt; complete, there are quite a few holes and gaps. (Yes, yes, open source software and anyone can add to the docs. That’s great—it really is—but if I’m going to use someone else’s solution, it had better &lt;em&gt;just work&lt;/em&gt;. Otherwise, I’d rather spend my time getting my own going.)&lt;/p&gt;
&lt;p&gt;For example, if you want to see how the pagination actually works, good luck figuring it out from the documentation. You’ll need to go looking at the way the sample themes (yes, both of them) are implemented to start getting a feel for it. Along the same lines, many of the objects that get handed to the templates are not fully documented, so it is difficult to know what one can or cannot do. I do not particularly want to spend my time adding debug print statements to my templates just to figure out what options I have available.&lt;/p&gt;
&lt;p&gt;The same kinds of things hold true for configuration options. Moreover, the configuration is done through a Python module. While that makes the module easier to integrate on the code side of things, it makes its actual content much less transparent than one might hope. Python is not really well optimized for writing configuration files—nor is any normal programming language. Configuration is inherently declarative, rather than imperative.&lt;/p&gt;
&lt;p&gt;This is not to say that Pelican is bad software. It is not. It is, however, a fairly typical example of open source software implemented by committee. It has holes (some of them serious), bumps, and quirks. Here is the reality: so will Step Stool, though they will be the quirks that come from an individual developer’s approach rather than a group’s. But the one thing I can guarantee, and the reason I am increasingly motivated to get back to working on Step Stool. And yes, I do have a couple other projects on my plate as well—contributions to the Smartypants and Typogrify modules, my own &lt;a href="https://bitbucket.org/chriskrycho/spacewell"&gt;Spacewell typography project&lt;/a&gt;, and quite possibly a &lt;a href="https://bitbucket.org/chriskrycho/markdown-poetry/"&gt;Markdown Poetry extension&lt;/a&gt;. But I would like very much to just get back to doing this myself. There is freedom in rolling my own solution to things. I will not always have time to do these kinds of things; I figure I should do them when I can.&lt;/p&gt;
&lt;p&gt;So here’s to &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;, and—more importantly—to writing your own software just to scratch that itch.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I spent quite a bit of time tweaking my friend Vernon King’s &lt;a href="http://www.vernonking.org"&gt;Jekyll-powered site&lt;/a&gt;, I got Winning Slowly off the ground, including designing the site from scratch and implementing it (also in Pelican), and I did some substantial redesign work on this site. That was more than enough for my three week break—as evidenced by the fact that I didn’t get to the sort of 1.0 version of this site until just a week or so ago.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Emphasis on “fairly.” More on &lt;em&gt;that&lt;/em&gt; in a moment as well.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</summary><category term="software development"></category></entry><entry><title>Why Is American Internet So Slow?</title><link href="http://www.chriskrycho.com/2014/why-is-american-internet-so-slow.html" rel="alternate"></link><updated>2014-03-07T19:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-07:2014/why-is-american-internet-so-slow.html</id><summary type="html">&lt;p&gt;Pretty damning of the current (lack of a) regulatory regime, if you ask me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;According to a recent study by Ookla Speedtest, the U.S. ranks a shocking 31st in the world in terms of average download speeds. The leaders in the world are Hong Kong at 72.49 Mbps and Singapore on 58.84 Mbps. And America? Averaging speeds of 20.77 Mbps, it falls behind countries like Estonia, Hungary, Slovakia, and Uruguay.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary><category term="links"></category></entry><entry><title>Goodbye, Chrome</title><link href="http://www.chriskrycho.com/2014/goodbye-chrome.html" rel="alternate"></link><updated>2014-02-24T15:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-24:2014/goodbye-chrome.html</id><summary type="html">&lt;p&gt;Last week, Chrome crossed the line for me. I deleted it from my system to clean up its many hooks into my system—I searched out every trace of it I could find—and will put it back on my system only for testing websites. Why? Because it’s just too creepy now.&lt;/p&gt;
&lt;p&gt;Here’s the story: two weekends ago, I was sitting at a coffee shop working on a friend’s website, when up popped a series of Google Now OS X desktop notifications from Chrome, informing me of the weather, a package having recently shipped, and so on.&lt;/p&gt;
&lt;p&gt;There were just two problems with this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I never gave Chrome permission to do anything of the sort.&lt;/li&gt;
&lt;li&gt;I was not signed into Chrome or any Google service at the time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Number 1 is bothersome. Number 2 is so far beyond bothersome that I took the nuclear option. Let’s walk through them.&lt;/p&gt;
&lt;p&gt;Google apparently decided to start opting people into Google Now on the Chrome 33 Beta. Opting people into anything new is nearly always a bad idea in my view; opting someone into something that actively integrates with email, calendar, etc. without asking them is just creepy. Now, full disclosure: I had previously granted Google access to some of this data for Google Now on my Android phone (though I have since moved to an iPhone). However, as is usual for Google these days, the company took that permission in one context and treated it as global permission in all contexts.&lt;/p&gt;
&lt;p&gt;No doubt the box I checked when I gave them access to that data in the first place legally allowed them to continue touching it. That did not particularly bother me. Rather, it was the assumption that I wanted the same kind of interactions from the service in a different context. This is typical of Google —typically un-human-friendly, that is. People do different things with their phones than with their browsers, and have different expectations of what each will do. More importantly, though, even if we might &lt;em&gt;want&lt;/em&gt; our browsers to start supplying us the kinds of sometimes-valuable information that we get from Google Now (or Apple or Microsoft’s similar tools), we generally want the opportunity to make that decision. Increasingly, Google is making that decision for its users, leaving them to opt out and turn it off if they so desire. That is not a policy I particularly like. So: strike one. Or rather: strike several dozen, of the sort that had me moving away from Google’s services for quite some time— but it probably still wouldn’t have pushed me across the line to this kind of hard kill-it-with-fire mentality.&lt;/p&gt;
&lt;p&gt;What did? That would be the part where Chrome started sending me desktop Google Now notifications. Without asking me. In a browser to which I was not logged in, nor logged into any Google services.&lt;/p&gt;
&lt;p&gt;I will say that again to be clear: I was not signed into Chrome. I was not signed into any Google services in the browser. I had not allowed the browser to create desktop notifications. And it started sending me Google Now notifications for my main Google account. Worse: nothing I could do with the browser itself changed that behavior. (Unsurprising: there was no way Chrome should have been able to do that in the first place, logged out of all Google services as I was.)&lt;/p&gt;
&lt;p&gt;Goodbye, Chrome. You’re just too creepy.&lt;/p&gt;
&lt;p&gt;This was not the first time I have seen Chrome engage in behavior that does not respect its users. I have repeatedly run into cases where clearing the cache and deleting browsers… doesn’t. Cookies sometimes still stick around. Private browsing sessions inherit cookies from the main window (and sometimes vice versa). Closing a private session and launching a new one would sometimes still include cookies and cache from a previous session (bank accounts still logged in, etc.). Chrome had thus long been untrustworthy to me. But this was a bridge too far. This was not just slightly unnerving. It was creepy.&lt;/p&gt;
&lt;p&gt;Call it a bug if you like. It is likely that it was, in fact, a bug. So, most likely, were the other cases I saw above. But these are the kinds of bugs that make a browser fundamentally untrustworthy, and they are the kinds of bugs that are that much creepier coming from a company whose profit comes almost entirely from selling advertising—that is, from selling user information to advertising companies. The deal was that we trusted Google not to abuse that information. Unfortunately, that deal just keeps getting worse all the time. (Pray they do not alter it further.)&lt;/p&gt;
&lt;p&gt;I will have a copy of the browser on my system for testing purposes, but for nothing else. Goodbye, Chrome. And for that matter: goodbye, Google services. Over the course of the rest of this year, I will be moving myself completely off of all Google services (mail, calendar, etc.), with the sole exception of (non- logged-in) search. You’re just too creepy now.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</summary></entry></feed>