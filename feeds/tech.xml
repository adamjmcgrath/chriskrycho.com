<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Chris Krycho</title><link href="http://www.chriskrycho.com/" rel="alternate"></link><link href="http://www.chriskrycho.com/feeds/tech.xml" rel="self"></link><id>http://www.chriskrycho.com/</id><updated>2014-10-22T22:15:00-04:00</updated><entry><title>Nailed It</title><link href="http://www.chriskrycho.com/2014/nailed-it.html" rel="alternate"></link><updated>2014-10-22T22:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-10-22:2014/nailed-it.html</id><summary type="html">&lt;p&gt;Yesterday, something rather remarkable happened. Someone leaked a copy of the
trailer for &lt;em&gt;Avengers: Age of Ultron&lt;/em&gt;&amp;#8230; and the company behind the movie,
rather than throwing a hissy fit (and ultimately just making things worse),
played its hand perfectly in a response that was funny &lt;em&gt;and&lt;/em&gt; demonstrated that
the folks who work there actually understand how the internet works. Marvel&amp;#8217;s
response to the leak came primarily in the form of two tweets, just a few hours&amp;nbsp;apart.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dammit, Hydra. (&lt;a href="https://twitter.com/Marvel/status/525071656306626560"&gt;October 22, 7:50 &lt;span class="caps"&gt;PM&lt;/span&gt; &lt;span class="caps"&gt;EST&lt;/span&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pitch perfect. It&amp;#8217;s self-aware, self-&lt;em&gt;referential&lt;/em&gt; in a funny way without being
too clever-seeming or coming off like it&amp;#8217;s trying too hard, and just a generally
good response. That alone would have been good enough to put Marvel in a league
of its own when it comes to managing things &lt;em&gt;not&lt;/em&gt; going the way hoped for. But
(after what I&amp;#8217;m sure was considerable back-room wrangling), they followed it up
an hour and a half later with another different&amp;nbsp;tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here it is! Watch the &lt;a href="https://twitter.com/Avengers"&gt;@Avengers&lt;/a&gt;: &lt;a href="https://twitter.com/hashtag/AgeofUltron?src=hash"&gt;#AgeofUltron&lt;/a&gt; Teaser
Trailer right &lt;span class="caps"&gt;NOW&lt;/span&gt;: &lt;a href="http://youtu.be/tmeOjFno6Do"&gt;http://youtu.be/tmeOjFno6Do&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Avengers?src=hash"&gt;#Avengers&lt;/a&gt;
(&lt;a href="https://twitter.com/Marvel/status/525093857772318720"&gt;October 22, 9:18 &lt;span class="caps"&gt;PM&lt;/span&gt; &lt;span class="caps"&gt;EST&lt;/span&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Your average old-media company these days would have thrown a fit and made a
stink about the release of their media. Many companies &lt;em&gt;have&lt;/em&gt; done just that
under similar circumstances, aiming to get the trailer, snippets of the movie,
music, or the like removed from the internet. But that simply isn&amp;#8217;t how the
internet works: it famously &amp;#8220;treats censorship like damage and routes around it&amp;#8221;
(&lt;a href="http://www.chemie.fu-berlin.de/outerspace/internet-article.html"&gt;John Gilmore&lt;/a&gt;). So rather than fight it&amp;#8230; Marvel just rolled with
it and made the best of the situation. They cracked a joke, went ahead and put
the trailer out themselves, and earned general approval from the internet.
Again. In short, despite being a decades-old company, Marvel is now &lt;em&gt;thoroughly&lt;/em&gt;
a new media company. They managed to dodge the &lt;a href="http://www.economist.com/blogs/economist-explains/2013/04/economist-explains-what-streisand-effect"&gt;Streisand effect&lt;/a&gt;
quite nicely, turning what could have been an opportunity for hostility all
around into a &lt;span class="caps"&gt;PR&lt;/span&gt; coup and a win that they couldn&amp;#8217;t have scored on their&amp;nbsp;own.&lt;/p&gt;
&lt;p&gt;Other old (and new!) media companies, take note. &lt;em&gt;This&lt;/em&gt; is the way you play the
game. You recognize when the cat is out of the bag and you run with it. Own it.
Make it your own somehow. Don&amp;#8217;t let it own you. The internet is a big, crazy,
chaotic place, and you can never hope to control it&amp;#8212;nor even the narrative
about you and your stuff, whatever that may be&amp;#8212;like you might have been able
to do twenty-five years ago. But that&amp;#8217;s okay. If you can roll with the punches,
you can still come out ahead, and you&amp;#8217;ll look a little more human doing it. I
call that&amp;nbsp;winning.&lt;/p&gt;
&lt;p&gt;(Go&amp;nbsp;Marvel.)&lt;/p&gt;</summary></entry><entry><title>The Next Generation of Version Control</title><link href="http://www.chriskrycho.com/2014/next-gen-vcs.html" rel="alternate"></link><updated>2014-10-16T21:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-10-16:2014/next-gen-vcs.html</id><summary type="html">&lt;p&gt;The current state of affairs in version control systems is a mess. To be sure,
software development is &lt;em&gt;far&lt;/em&gt; better with &lt;em&gt;any&lt;/em&gt; of the distributed version
control systems in play&amp;#8212;the three big ones being &lt;a href="http://git-scm.com"&gt;Git&lt;/a&gt;, &lt;a href="http://mercurial.selenic.com"&gt;Mercurial&lt;/a&gt;
(&lt;code&gt;hg&lt;/code&gt;), and &lt;a href="http://bazaar.canonical.com/en/"&gt;Bazaar&lt;/a&gt; (&lt;code&gt;bzr&lt;/code&gt;), with a few other names like &lt;a href="http://www.fossil-scm.org"&gt;Fossil&lt;/a&gt;
floating around the periphery&amp;#8212;than it ever was in a centralized version
control system. There are definitely a few downsides for people converting over
from some standard centralized version control systems, notably the increased
number of steps in play to accomplish the same tasks.&lt;sup id="fnref:dad"&gt;&lt;a class="footnote-ref" href="#fn:dad" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; But on the whole,
the advantages of being able to commit locally, have multiple complete copies of
the repository, and share work without touching a centralized server far
outweigh any downsides compared to the old centralized&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;That being so, my opening statement remains true, I think: &lt;em&gt;The current state of
affairs in version control is a mess.&lt;/em&gt; Here is what I mean: of those three major
players (Git, Hg, and Bazaar), each has significant downsides relative to the
others. Git is famously complex (even arcane), with a user interface design
philosphy closely matching the &lt;span class="caps"&gt;UI&lt;/span&gt; sensibilities of Linus Torvalds&amp;#8212;which is to
say, all the wires are exposed, and it is about as user-hostile as it could
be.&lt;sup id="fnref:hostile"&gt;&lt;a class="footnote-ref" href="#fn:hostile" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; It often outperforms Hg or Bazaar, but it has quirks, to say the
very least. Hg and Bazaar both have &lt;em&gt;much&lt;/em&gt; better designed user interfaces. They
also have saner defaults (especially before the arrival of Git 2.0), and they
have better branching models and approaches to history.&lt;sup id="fnref:history"&gt;&lt;a class="footnote-ref" href="#fn:history" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; They have
substantially better documentation&amp;#8212;perhaps especially so with Bazaar, but with
either one a user can understand how to use the tool &lt;em&gt;without having to
understand the mechanics of the tool&lt;/em&gt;. This is simply not the case with Git, and
while I &lt;em&gt;enjoy&lt;/em&gt; knowing the mechanics of Git because I find them interesting,
&lt;em&gt;having&lt;/em&gt; to understand the mechanics of a tool to be able to use it is a&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;But the other systems have their downsides relative, to Git, too. (I will focus
on Hg because I have never used Bazaar beyond playing with it, though I have
read a good bit of the documentation.) Mutable history in Git is valuable and
useful at times; I have rewritten whole sequences of commits when I realized I
committed the wrong things but hadn&amp;#8217;t yet pushed.&lt;sup id="fnref:mutable"&gt;&lt;a class="footnote-ref" href="#fn:mutable" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; Being able to commit
chunks instead of having to commit whole files at a go is good; I feel the lack
of this every time I use Hg.&lt;sup id="fnref:patch"&gt;&lt;a class="footnote-ref" href="#fn:patch" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; (Needing to understand the &lt;em&gt;file system&lt;/em&gt;
that Git invented to make sure you do not inadvertently destroy your repository
is&amp;#8230; not so good.) A staging area is nice,&lt;sup id="fnref:queues"&gt;&lt;a class="footnote-ref" href="#fn:queues" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt; (even if &lt;em&gt;having&lt;/em&gt; to stage
everything manually can be in the pain in the neck&lt;sup id="fnref:dash-a"&gt;&lt;a class="footnote-ref" href="#fn:dash-a" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;
&lt;p&gt;In short, then, there was no clear winner for this generation. Each of the tools
has significant upsides and downsides relative to the others. Git has become the
&lt;em&gt;de facto&lt;/em&gt; standard, but &lt;em&gt;not&lt;/em&gt; because of its own superiority over the
alternatives. Rather, it won because of other forces in the community. Mostly I
mean &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;, which is a &lt;em&gt;fantastic&lt;/em&gt; piece of software and easily the
most significant driving factor in the wider adoption of Git as a tool. The
competition (&lt;a href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt; and &lt;a href="https://launchpad.net"&gt;Launchpad&lt;/a&gt;) are nowhere near
the same level of sophistication or elegance, and they certainly have not
managed to foster the sorts of community that GitHub has. The result has been
wide adoption of Git, and a degree of Stockholm Syndrome among developers who
have adopted it and concluded that the way Git works is the way a distributed
version control system &lt;em&gt;should&lt;/em&gt;&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;It is not. Git is complicated to use and in need of tools for managing its
complexity; the same is true of Hg and Bazaar, though perhaps to a slightly
lesser extent because of their saner branching models. This is what has given
rise to the &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;plethora&lt;/a&gt; of &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;different&lt;/a&gt; formal
&lt;a href="https://about.gitlab.com/2014/09/29/gitlab-flow/"&gt;workflows&lt;/a&gt; representing various attempts to manage that complexity
(which have been &lt;a href="https://bitbucket.org/yujiewu/hgflow/wiki/Home"&gt;applied&lt;/a&gt; to other systems &lt;a href="https://andy.mehalick.com/2011/12/24/an-introduction-to-hgflow"&gt;as well&lt;/a&gt;).
Managing branching, linking that workflow to issues, and supplying associated
documentation for projects have also cropped up as closely associated tasks&amp;#8212;
thus the popularity of GitHub issues and Bitbucket wikis, not to mention
&lt;a href="http://www.fossil-scm.org"&gt;Fossil&amp;#8217;s&lt;/a&gt; integration of both into the &lt;span class="caps"&gt;DVCS&lt;/span&gt; tool itself. None of the
tools handle differences between file systems very elegantly (and indeed, it
took &lt;em&gt;years&lt;/em&gt; for Git even to be useable on Windows). All of them especially
struggle to manage symlinks and executable&amp;nbsp;flags.&lt;/p&gt;
&lt;p&gt;So there is an enormous opportunity for the &lt;em&gt;next&lt;/em&gt; generation of tools. Git, Hg,
and so on are huge steps forward for developers from &lt;span class="caps"&gt;CVS&lt;/span&gt;, Visual SourceSafe, or
&lt;span class="caps"&gt;SVN&lt;/span&gt;. But they still have major weaknesses, and there are many things that not
only can but should be better. In brief, I would love for the next-generation
version control system to&amp;nbsp;be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distributed (this is now a&amp;nbsp;non-negotiable);&lt;/li&gt;
&lt;li&gt;fast;&lt;/li&gt;
&lt;li&gt;well-documented&amp;#8212;&lt;em&gt;at least&lt;/em&gt; as well as Hg is, and preferably as well as
    Bazaar&amp;nbsp;is;&lt;/li&gt;
&lt;li&gt;well-designed, which is to say having a user interface that is actually a
    user-interface (like Hg&amp;#8217;s) and not an extremely leaky abstraction around the
    mechanics;&lt;sup id="fnref:leaky"&gt;&lt;a class="footnote-ref" href="#fn:leaky" rel="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;fast;&lt;/li&gt;
&lt;li&gt;file-system oriented, &lt;em&gt;not&lt;/em&gt; diff-oriented: this is one of Git&amp;#8217;s great
    strengths and the reason for a lot of its performance&amp;nbsp;advantages;&lt;/li&gt;
&lt;li&gt;extensible, with a good public &lt;span class="caps"&gt;API&lt;/span&gt; so that it is straightforward to add
    functionality like wikis, documentation, social interaction,  and issue
    tracking in a way that actually integrates the tool;&lt;sup id="fnref:integrates"&gt;&lt;a class="footnote-ref" href="#fn:integrates" rel="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;and last but not least, truly&amp;nbsp;cross-platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is a non-trivial task, but the first &lt;span class="caps"&gt;DVCS&lt;/span&gt; that manages to hit even a
sizeable majority of these desires will gain a lot of traction in a hurry. The
second generation of distributed version control has been good for us. The third
could be&amp;nbsp;magical.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:dad"&gt;
&lt;p&gt;A point that was highlighted for me in a conversation a few months ago
with my father, a programmer who has been using &lt;span class="caps"&gt;SVN&lt;/span&gt; for a &lt;em&gt;long&lt;/em&gt; time and
found the transition to Git distinctly less than wonderful.&amp;#160;&lt;a class="footnote-backref" href="#fnref:dad" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:hostile"&gt;
&lt;p&gt;Anyone who feels like arguing with me on this point should go spend
five minutes laughing at the &lt;a href="http://git-man-page-generator.lokaltog.net"&gt;fake man pages&lt;/a&gt; instead.&amp;#160;&lt;a class="footnote-backref" href="#fnref:hostile" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:history"&gt;
&lt;p&gt;Few things are as hotly debated as the relative merits of the
different systems&amp;#8217; branching models and approaches to history. At the least,
I can say that Hg and Bazaar&amp;#8217;s branching models are &lt;em&gt;more to my taste&lt;/em&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:history" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:mutable"&gt;
&lt;p&gt;Yes, there are extensions that let you do this with Hg, but they are
fragile at best in my experience, and substantially less capable than Git&amp;#8217;s.&amp;#160;&lt;a class="footnote-backref" href="#fnref:mutable" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:patch"&gt;
&lt;p&gt;Yes, I know about Hg&amp;#8217;s record extension. No, it is &lt;em&gt;not&lt;/em&gt; quite the
same, especially because given the way it is implemented major &lt;span class="caps"&gt;GUI&lt;/span&gt; tools
cannot support it without major chicanery.&amp;#160;&lt;a class="footnote-backref" href="#fnref:patch" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:queues"&gt;
&lt;p&gt;Yes, I know about Hg&amp;#8217;s queue extension, too. There is a reason it is
not turned on by default, and using it is substantially more arcane than
Git&amp;#8217;s staging are. Think about that for a minute.&amp;#160;&lt;a class="footnote-backref" href="#fnref:queues" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:dash-a"&gt;
&lt;p&gt;Yes, there is the &lt;code&gt;-a&lt;/code&gt; flag. No, I do not want to have to remember it
for every commit.&amp;#160;&lt;a class="footnote-backref" href="#fnref:dash-a" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:leaky"&gt;
&lt;p&gt;Let&amp;#8217;s be honest: if Git&amp;#8217;s abstraction were a boat, it would sink. It&amp;#8217;s
just that leaky.&amp;#160;&lt;a class="footnote-backref" href="#fnref:leaky" rev="footnote" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:integrates"&gt;
&lt;p&gt;GitHub does all of this quite well&amp;#8230; but they have had to write
heaps and gobs of software &lt;em&gt;around&lt;/em&gt; Git to make it work.&amp;#160;&lt;a class="footnote-backref" href="#fnref:integrates" rev="footnote" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="software development"></category></entry><entry><title>Pushing Into C’s Corner Cases</title><link href="http://www.chriskrycho.com/2014/pushing-into-cs-corner-cases.html" rel="alternate"></link><updated>2014-08-12T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-08-12:2014/pushing-into-cs-corner-cases.html</id><summary type="html">&lt;p&gt;I&amp;#8217;m working on a project that is all in C because of its long history and legacy. We&amp;#8217;re slowly modernizing the codebase and writing all our new code in Python (using NumPy, C extensions, and so on for performance where necessary). Occasionally, I just want to bang my head against the wall because there are things we can do so simply in any modern language that you just can&amp;#8217;t do in any straightforward way in C. For example, I have file writers that all work &lt;em&gt;exactly&lt;/em&gt; the same way, with the single exception that the format string and the data that you put into it vary for each&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;In Python, this would be straightforward to handle with the class machinery: you could simply specify the format string in each inheriting class and define the data points to be supplied at the top of an overriding function, call the parent function with &lt;code&gt;super()&lt;/code&gt; and be&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;To do something similar in pure C is nearly impossible. You can supply a format string with each function (or module, or however you separate out the code), and if you feel especially clever you could convert all your data types to strings and pass them as a list to be printed by the standard function. The net result would be &lt;em&gt;longer&lt;/em&gt; and &lt;em&gt;less maintainable&lt;/em&gt; than simply having a set of essentially-duplicate functions,&amp;nbsp;though.&lt;/p&gt;</summary><category term="software development"></category></entry><entry><title>Don’t Be Rude</title><link href="http://www.chriskrycho.com/2014/dont-be-rude.html" rel="alternate"></link><updated>2014-07-12T15:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-12:2014/dont-be-rude.html</id><summary type="html">&lt;h6 id="note"&gt;Note&lt;/h6&gt;
&lt;p&gt;I have left the original post here as I wrote it, but there is an important
&lt;a href="#edit-and-addendum"&gt;addendum&lt;/a&gt; at the bottom of the post that you should make
sure to read (and note in particular the &lt;a href="#further-addendum"&gt;further addendum&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This post came off as pretty critical of MarketCircle, and that &lt;em&gt;really&lt;/em&gt; wasn&amp;#8217;t
my point. I wanted to use a bad experience I had with MarketCircle to illustrate
a general principle, &lt;em&gt;not&lt;/em&gt; to poke at any particular company. I did that poorly
in this particular piece; for some follow-up on that see &lt;a href="http://www.chriskrycho.com/2014/i-wrote-it-wrong.html"&gt;this
post&lt;/a&gt; which I wrote later
that day, analyzing how and why this piece so spectacularly failed to accomplish
my desired&amp;nbsp;goals.&lt;/p&gt;
&lt;p&gt;In any case, I do not want this piece to turn people off of using MarketCircle&amp;#8217;s
software. I leave the unedited version below because I believe in having the
intellectual integrity to own one&amp;#8217;s mistakes. This was one of&amp;nbsp;mine.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The quickest way to make me bid your company or product farewell is to patronize
me. Don&amp;#8217;t talk down to me. Never treat me like anything but an adult. The moment
you do, I am&amp;nbsp;gone.&lt;/p&gt;
&lt;p&gt;Given which: farewell &lt;a href="https://www.marketcircle.com"&gt;MarketCircle&lt;/a&gt;, and adieu &lt;a href="https://www.marketcircle.com/billingspro/"&gt;Billings&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A story: When I started working as a freelance software developer on the side a
few years ago,&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I looked at my options for tracking time and invoicing
clients. I eventually settled on &lt;a href="https://www.marketcircle.com/billingspro/"&gt;Billings&lt;/a&gt;, by &lt;a href="https://www.marketcircle.com"&gt;MarketCircle&lt;/a&gt;.
It&amp;#8217;s solid software: it is reliable, works well, and does everything I need it
to, including tracking different clients and projects easily and sending them
estimates or invoices. Best of all, from my perspective, it was a local app. You
&lt;em&gt;could&lt;/em&gt; sync with a server out in the cloud somewhere via Billings Pro, but you
did not have to, and you could use the Mac-native application, not some web app
out there. Last but not least, it had a &lt;em&gt;great&lt;/em&gt; menubar app. I was sold, and I
gladly dropped $40 for a single-user&amp;nbsp;license.&lt;/p&gt;
&lt;p&gt;Fast forward to June 2013. MarketCircle, like a lot of software development
companies, came to the conclusion that it is &lt;em&gt;really&lt;/em&gt; hard to develop software
as a series of discrete releases, for which you get people to pay over and over
again. Perfectly sensibly, they &lt;a href="https://www.marketcircle.com/blog/streamlining-the-billings-product-line/"&gt;discontinued development&lt;/a&gt; on and
support for their standalone software and provided &lt;a href="https://www.marketcircle.com/billingspro/offer/"&gt;a (discounted!) migration
path&lt;/a&gt; for users to upgrade to the Pro (syncing, etc.) version of the
software. Note that they did &lt;em&gt;not&lt;/em&gt; do anything to disable functionality in
existing Billings installations&amp;#8212;just provided an upgrade path and stopped
developing it. That is the right way to handle it. So far so&amp;nbsp;good.&lt;/p&gt;
&lt;p&gt;I am a software developer, and I have seen the pressures that exist in this
industry. This move made good business sense to me, and I liked Billings as a
product. I was quite willing to look at their Pro plan, and possibly even to
invest in it, despite the fact that I did not &lt;em&gt;need&lt;/em&gt; it, because I believe in
supporting the developers of the software I&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;I emailed them a couple follow-up questions. One of them, and among the most
important to me because of how I work for one particular&amp;nbsp;client:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I note that in Billings Pro, unlike in Billings, I can&amp;#8217;t track multiple slips
simultaneously. This is problematic for me, as I often do this to keep track
of hours worked against a &amp;#8220;Personal projects&amp;#8221; bit so I can see my hourly
variations. That&amp;#8217;s a make-or-break kind of thing for me—any chance you guys
will change that&amp;nbsp;behavior?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To elaborate: I like to track my total hours worked every week in a simple way,
so I have a &amp;#8220;Personal&amp;#8221; timer going alongside the project timer for whatever I am
doing. The fact that Billings let me do this was one of the selling points for
me. Even so, I did not necessarily expect them to support the functionality
going forward. The response I got started out reasonably&amp;nbsp;enough:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We allow you to have multiple active timers, but you can only time one task at
a time in both applications. In Billings, there was a bug with this, however,
this was corrected in Billings&amp;nbsp;Pro.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus far, fair enough: they saw this as a bug. I disagreed, but I&amp;nbsp;understand.&lt;/p&gt;
&lt;p&gt;Then this,&amp;nbsp;though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While we all multi-task we cannot work on two billable items at&amp;nbsp;once.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Whoops.&lt;/em&gt; You just talked down to&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;You also clearly didn&amp;#8217;t read the original email, because you followed up by
asking&amp;nbsp;this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you explain a little more about what you track and how and I can see if
there&amp;#8217;s a different way to do this in Billings Pro that will give you the same&amp;nbsp;result?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hmm. Let me get this straight: I told you what I track and how I use your
software, and you thought the appropriate response was to instruct me on what I
can and cannot do with it? Clearly not having even read the original question&amp;nbsp;carefully?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nope.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let me explain: you don&amp;#8217;t tell your customers that they can&amp;#8217;t use your software
in ways peculiar to them. You particularly do not do so as though explaining to
a child that we simply cannot do certain things. If a user has a quirky way of
using your software, you can of course say you don&amp;#8217;t intend to support that
quirky behavior&amp;#8212;but you do not get to tell them that their unanticipated usage
is &lt;em&gt;wrong&lt;/em&gt;, and especially not in a condescending&amp;nbsp;tone&lt;/p&gt;
&lt;p&gt;I cancelled my Billings Pro trial within five minutes of receiving that email.
The original software I kept: I was at a busy time in the year, switching time-
tracking software is non-trivial, and it wasn&amp;#8217;t hurting me a bit to keep using
the original software anyway. As I am evaluating time tracking software again,
not least because I do not know through how many &lt;span class="caps"&gt;OS&lt;/span&gt; X upgrades Billings will
continue to perform properly, MarketCircle isn&amp;#8217;t on the list. It only took one
bad experience to leave a bad taste in my mouth and convince me to move&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;At this point, it looks like I&amp;#8217;m headed to &lt;a href="http://www.getharvest.com/"&gt;Harvest&lt;/a&gt;. It turns out they don&amp;#8217;t
support multiple timers, either. But they haven&amp;#8217;t talked down to me, and that
makes all the difference in the&amp;nbsp;world.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There is a takeaway here for anyone paying attention. Namely: respect your
customers. Do not talk down to them. Do not assume their uses for your software
are wrong, or stupid, even if they are not what you intended. (If anything, that
means your users have thought of use cases you&amp;nbsp;didn&amp;#8217;t.)&lt;/p&gt;
&lt;p&gt;It is going to far to say that the customer is always right. Sometimes, the
customer is wrong. Sometimes, &lt;em&gt;I&lt;/em&gt; am wrong as a customer. But the customer &lt;em&gt;is&lt;/em&gt;
always someone to respect. The moment you stop treating your customer with
respect is the moment you cross the line into being a company with which I want
to do business to one I will&amp;nbsp;avoid.&lt;/p&gt;
&lt;hr /&gt;
&lt;h6 id="edit-and-addendum"&gt;Edit and&amp;nbsp;Addendum&lt;/h6&gt;
&lt;p&gt;When I posted this on App.net, a few thoughtful acquaintances &lt;a href="https://alpha.app.net/chriskrycho/post/34459957"&gt;pushed
back&lt;/a&gt;, noting that the customer service interactions did &lt;em&gt;not&lt;/em&gt; read as
condescending to them. It is possible that I misread the original customer
service rep&amp;#8217;s tone in interacting in me. This is a constant danger in dealing
with text-only communication. I take some responsibility for that&amp;#8212;but I also
note that the frustration had already built up in the course of a conversation
that had already included a number of failures to respond to address or respond
to my questions and&amp;nbsp;concerns.&lt;/p&gt;
&lt;p&gt;I should also note that I didn&amp;#8217;t mean this as a critique of MarketCircle in
particular, though re-reading the post in light of the response, it is clear it
comes off more that way than I intended. My interactions with MarketCircle were
meant simply to illustrate the broader point: customer service matters, and
even one bad customer experience can turn off a&amp;nbsp;customer.&lt;/p&gt;
&lt;p&gt;But the takeaway from this addendum is a bit different: I can sympathize with
the difficulties facing the customer service rep. I failed at precisely the same
task of communicating my intent in writing effectively. Now, whether that rep
meant it the way I took it or the way others took it in reading the post, he
certainly did not accomplish what he meant to with the exchange. My sympathies
are with him. I am perfectly willing (though not perhaps &lt;em&gt;happy&lt;/em&gt;; humility is
rarely particularly pleasant) to say that I got it wrong&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;All that being said&amp;#8230; I still have a bad taste in my mouth, and I am still
leery of doing further business with MarketCircle. And that &lt;em&gt;does&lt;/em&gt; make the
original point in a way, because the emotional response from a bad experience,
even one you did not intend, doesn&amp;#8217;t fade quickly or at all, even in the face of
reasonable articulations of alternative explanations for the bad experience. You
have to work at a good customer experience&amp;nbsp;continually.&lt;/p&gt;
&lt;h6 id="further-addendum"&gt;Further&amp;nbsp;Addendum&lt;/h6&gt;
&lt;p&gt;MarketCircle actually saw this piece&amp;#8212;presumably via my link on Twitter&amp;#8212;and
got back to me, looking to fix this issue, which I really appreciated. In some
sense, then, they &lt;em&gt;are&lt;/em&gt; doing exactly what I advocated in this&amp;nbsp;piece.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Early 2010, if you&amp;#8217;re curious.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Goodbye, Notifications</title><link href="http://www.chriskrycho.com/2014/goodbye-notifications.html" rel="alternate"></link><updated>2014-07-11T18:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-11:2014/goodbye-notifications.html</id><summary type="html">&lt;p&gt;In &lt;a href="http://atp.fm/episodes/73" title="73: Notifications Duck"&gt;this week&amp;#8217;s episode&lt;/a&gt; of &lt;a href="http://atp.fm"&gt;Accidental Tech Podcast&lt;/a&gt;, hosts Casey Liss
and John Siracusa mentioned that they have the sound aspect of notifications
disabled on their iDevices (Liss&amp;#8217; iPhone, Siracusa&amp;#8217;s iPod Touch). Strange though
it might seem, the thought hadn&amp;#8217;t occurred to me. I like getting the notice of
things having happened on my social media accounts, but I&amp;#8217;d concluded recently
that I actively disliked having the interruption even of a buzz in my pocket: it
forces a mental context shift which inevitably degrades my concentration on
whatever task I am&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;I spent ten minutes this evening and went through my iPhone&amp;#8217;s notification
settings. The only things which have audible or vibrating notifications now are
phone calls (including FaceTime) and text messages. Everything else I disabled.
Now, I still have notifications on a number of other items: they can show up in
Notification Center, and they can put markers on the home screen apps. After
all: if I already have my phone out, it is almost certainly no problem to see a
notification come in, and I definitely want to be able to glance at the app on
my home screen and see that someone has interacted with me in some way. But when
I &lt;em&gt;don&amp;#8217;t&lt;/em&gt; have my phone out? It is unhelpful. It is&amp;nbsp;distracting.&lt;/p&gt;
&lt;p&gt;I actually turned on app badges for a number of apps for which I had previously
disabled them, because they had been extraneous when I was getting noises or
buzzes for the apps and services in question. I also tweaked a number of other
apps: some can show app badges but not appear in notification center. Most
cannot show anything on the lock screen at all. If I want to check on
notifications, I can look&amp;nbsp;explicitly.&lt;/p&gt;
&lt;p&gt;We will see how the experiment goes. Even just a few hours in, though, I can
already say I like it. I did &lt;em&gt;not&lt;/em&gt; get any buzzing in my pocket when a few
people interacted with me on App.net, or Instagram, or anywhere else. And,
social media being what it is, none of those interactions are temporally
important (however much it might feel otherwise). They will still be there
waiting when I get&amp;nbsp;back.&lt;/p&gt;
&lt;p&gt;Now, this does not automatically make me more productive. I still need self
control to be most effective in using my time. It does take away a few of the
most obvious distractions and interruptions that make it hard to focus, though,
and that is &lt;em&gt;definitely&lt;/em&gt; a&amp;nbsp;win.&lt;/p&gt;</summary></entry><entry><title>Economies of Scale</title><link href="http://www.chriskrycho.com/2014/economies-of-scale.html" rel="alternate"></link><updated>2014-07-11T10:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-11:2014/economies-of-scale.html</id><summary type="html">&lt;p&gt;I was reading through an interesting Ars Technica &lt;a href=""&gt;article&lt;/a&gt; on the new Long
Range Strike Bomber (&lt;span class="caps"&gt;LRS&lt;/span&gt;-B) proposal the Air Force is soliciting. It&amp;#8217;s generally
interesting to me in part because I&amp;#8217;ve worked on a related project in the past,
and we talked fairly often about how the &lt;span class="caps"&gt;LRS&lt;/span&gt;-B program might impact it. The
article is worth your time. This quote from Robert Gates in the middle of the
article, which touches on the program the &lt;span class="caps"&gt;LRS&lt;/span&gt;-B would replace, caught my
attention,&amp;nbsp;though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What we must not do is repeat what happened with our last manned bomber. By
the time the research, development, and requirements processes ran their
course, the aircraft, despite its great capability, turned out to be so
expensive&amp;#8212;$2 billion each in the case of the B-2&amp;#8212;that less than one-sixth
of the planned fleet of 132 was ever&amp;nbsp;built.&lt;/p&gt;
&lt;p&gt;Looking ahead, it makes little sense to pursue a future bomber&amp;#8212;a prospective
B-3, if you will&amp;#8212;in a way that repeats this history. We must avoid a
situation in which the loss of even one aircraft&amp;#8212;by accident, or in
combat&amp;#8212;results in a loss of a significant portion of the fleet, a national
disaster akin to the sinking of a capital ship. This scenario raises our costs
of action and shrinks our strategic options, when we should be looking to the
kind of weapons systems that limit the costs of action and expand our&amp;nbsp;options.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, in one sense, Gates was absolutely right. On the other hand, he seems to
have committed a classic blunder in dealing with these kinds of costs: economies
of scale matter. Part of the reason the per-unit price of the B-2 was so high
was precisely that we only bought 20 of them. While the units were individually
expensive to manufacture and maintain, because of unique materials used in their
construction and so on, they were much &lt;em&gt;more&lt;/em&gt; expensive to manufacture in small
numbers than they would have been in large numbers. There are basically two
reasons for&amp;nbsp;this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The manufacturing process couldn&amp;#8217;t do what it does best (turn out large
    numbers of standardized parts and thereby reduce&amp;nbsp;costs).&lt;/li&gt;
&lt;li&gt;The costs of development—research, software development, etc.&amp;#8212;were all
    distributed over a much smaller pool than they would have been had the
    government purchased more&amp;nbsp;aircraft.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This second point is incredibly important to understand. It is certainly true
that the absolute cost of buying 132 B-2s would have been high, possibly
astronomically and unaffordably high. What it would &lt;em&gt;not&lt;/em&gt; have been is $264
billion. Even assuming that manufacture costs were fully half of the cost-per-
plane (almost certainly not the case), it would have been barely over half that.
Assume that the B-2 cost $1B per plane to build, and that the other $10B was
research. Well, that&amp;#8217;s still an expensive plan&amp;#8230; but the total cost is
something like $144B, not $264B. Those economies of scale&amp;nbsp;matter.&lt;/p&gt;
&lt;p&gt;This same reality is a point made later in the article by another commentator,
but I couldn&amp;#8217;t let it go. Things like this drive me nuts, because they&amp;#8217;re such a
common failing in our political discourse. Ignorance of basic economics from the
people making decisions with this kind of economic impact is profoundly&amp;nbsp;unhelpful.&lt;/p&gt;</summary></entry><entry><title>Bundling!</title><link href="http://www.chriskrycho.com/2014/bundling.html" rel="alternate"></link><updated>2014-05-13T14:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-13:2014/bundling.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.digitalbookworld.com/2012/why-do-we-have-to-choose-between-print-and-digital/"&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Why do we have to choose between print and digital?&amp;#8221;&lt;/a&gt; asked Richard
Curtis at Digital Book World last week, before tackling the topic of
bundling&amp;#8212;getting ebooks at reduced cost or even free when buying a physical
copy of the book. Drawing an analogy from music purchases that have moved in the
same direction, he suggests that publishers &lt;em&gt;ought&lt;/em&gt; to be bundling, and then
poses the query: When you purchase a print book you should be able to get the
e-book&amp;nbsp;for&amp;#8230;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the full combined retail prices of print and e-book&amp;nbsp;editions&lt;/li&gt;
&lt;li&gt;an additional 50% of the retail price of the print&amp;nbsp;edition&lt;/li&gt;
&lt;li&gt;an additional 25% of the retail price of the print&amp;nbsp;edition&lt;/li&gt;
&lt;li&gt;$1.00 more than the retail price of the print&amp;nbsp;edition&lt;/li&gt;
&lt;li&gt;free&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;He suggests that this proves to be something of a conundrum for decision-makers
in the publishing industry. With respect, and while recognizing that it probably
&lt;em&gt;feels&lt;/em&gt; like a conundrum to the publishers, I think the answer is really quite
simple. Publishers can dramatically increase their profits, and do it in a way
that readers will &lt;em&gt;love&lt;/em&gt;. (This is the part where you call me crazy. Up next is
the part where I show you why I&amp;#8217;m&amp;nbsp;not.)&lt;/p&gt;
&lt;h2 id="all-or-nothing"&gt;All or&amp;nbsp;nothing&lt;/h2&gt;
&lt;p&gt;First, we should note that while readers would always choose (e) and publishers
would love it if they could get away with (a), the reality is that both of these
leave one party out in the cold. Publishers need readers, and readers need
publishers. Publishers need readers or they die. Readers need publishers as
providers of quality content&amp;#8212;not only as the gatekeepers but also as
polishers who take good books and make them great. Any system that will pan out
well must therefore respect &lt;em&gt;both&lt;/em&gt; sides of that equation. Both (a) and (e) fail
that test&amp;nbsp;immediately.&lt;/p&gt;
&lt;p&gt;In the case of (a), the consumer can rightly point out that the cost of
distribution of a book is minimal, trivial even, in the grand scheme of book
production. That goes double for ebooks: the cost of running a server is a
pittance compared to the cost of writing, editing, and proofing a book. &amp;#8220;So,&amp;#8221;
any smart reader says, &amp;#8220;I&amp;#8217;ve already paid for the book. Why should I have to pay
&lt;em&gt;just as much again&lt;/em&gt; for the&amp;nbsp;ebook?&amp;#8221;&lt;/p&gt;
&lt;p&gt;In the case of (e), the consumer is getting something of real value&amp;#8212;the
ebook, with its associated portability, the ability to create &lt;a href="http://craigmod.com/journal/post_artifact/#section_4" title="Post Artifact Books and Publishing, Section 4: The post-artifact system&amp;quot; from Craig Mod"&gt;communal
interactions&lt;/a&gt; around the content through shared marginalia, and so
forth&amp;#8212;but without recognizing any infrastructure costs this poses to the
publisher. As always, there is no free lunch, and that is as it should be.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;
The worker deserves his wages, and that includes the editor who turns a
manuscript into ebook form&amp;#8212;especially for &lt;em&gt;good&lt;/em&gt; ebooks, which entail a great
deal of work beyond simply running the print manuscript through a conversion
script. That involves real people&amp;#8217;s time, and therefore costs real&amp;nbsp;money.&lt;/p&gt;
&lt;p&gt;Neither of these options, then, is ultimately good for the market. The readers
will rightly reject paying the full price again for a book in a different form;
they&amp;#8217;ve been conditioned by too many interactions on the internet not to
recognize that digital transmission of files the size of a book is, while not
costless, not costly either. On the other hand, publishers still need to make
money, and they do sink real time and money into the ebook&amp;#8212;not at the
distribution point, but in the infrastructure involved in the preparation of the
manuscript and readying it for digital and physical&amp;nbsp;publication.&lt;/p&gt;
&lt;p&gt;Again: publishers need readers and readers need&amp;nbsp;publishers.&lt;/p&gt;
&lt;h2 id="percentage-games"&gt;Percentage&amp;nbsp;games&lt;/h2&gt;
&lt;p&gt;Percentage-based cuts&amp;#8212;like Curtis&amp;#8217; options (b) and (c)&amp;#8212;are much more
sensible and reasonable from the perspective of both the consumer and the
publisher. In each of these cases, the publisher is granting that the customer
has already made a purchase&amp;#8212;perhaps a significant one, in the case of a
hardcover fiction book. Indeed, when we move out into the realm of reference
books or textbooks, the consumer has already given the publisher quite a lot of
money. Thus, options (b) and (c) are much friendlier to the consumer than choice
(a), while still affording the publisher some profits, unlike (e). This is
clearly a step in the right&amp;nbsp;direction.&lt;/p&gt;
&lt;p&gt;The percentage option quickly runs into issues when we start thinking about how
such a scheme would work in practice, though. Is it 25% of the hardcover but 50%
of the paperback, so that the publisher can recoup more of the costs? In this
scheme, it is difficult to match the actual cost of the ebook sale to its
relative value compared to the physical copy. Moreover, it&amp;#8217;s difficult to
standardize. When purchasing a textbook at $150, should someone have to pay
another $37.50 or $75 to have a digital copy? It seems unlikely that preparing
an ebook of a textbook is really 5-6 times more costly than the preparation of a
fiction ebook, which on a percentage basis would come out around $6.50 or $13
for the hardcover at those rates, or $2 or $4 for&amp;nbsp;paperbacks.&lt;/p&gt;
&lt;p&gt;Equally important: &lt;em&gt;will&lt;/em&gt; people pay that much for a digital copy? Publishers
may want to study the question in depth by testing the market, but this is a
waste of time. The answer is obvious to anyone under the age of 30: &lt;em&gt;no&lt;/em&gt;. The
market simply won&amp;#8217;t support those kinds of costs on the upper end of the&amp;nbsp;spectrum.&lt;/p&gt;
&lt;p&gt;Again, customers may recognize that they are subsidizing more than simply the
cost of distribution, but the preparation and distribution of the ebook don&amp;#8217;t
justify an additional percentage on these scales beyond some point. I suspect
that most customers are willing to pay extra to get the ebook in addition to the
physical copy&amp;#8212;just not, in most cases, &lt;em&gt;that&lt;/em&gt; much&amp;nbsp;extra.&lt;/p&gt;
&lt;h3 id="aside-on-reasonability-and-trained-markets"&gt;Aside: on reasonability and trained&amp;nbsp;markets&lt;/h3&gt;
&lt;p&gt;We must recognize that markets can be &lt;em&gt;trained&lt;/em&gt;. People have come to see $0.99
as a reasonable price for individual songs. There was nothing inevitable about
that outcome; it is a direct result of the success of the iTunes store. Had
prices been set at $1.49 or $0.33, it&amp;#8217;s likely we would have settled on that
number as a reasonable price. Similarly, &lt;span class="caps"&gt;TV&lt;/span&gt; show episodes sell at $1.99,&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; and
people seem to treat that as a reasonable price: the perceived value matches the
cost well. They could have been $1 or $2.50, and consumers probably would have
settled in with those numbers equally&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Of course, had the price been too high, we would have rejected it entirely:
markets can be trained, but they&amp;#8217;re not capable of stretching into just any
shape at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;Admittedly, the music market remains volatile, but consumers on the whole don&amp;#8217;t
seem to balk at spending a dollar on a song. While the piracy rate remains high,
iTunes and similar markets provide an outlet for those who are interested in
purchasing their music legitimately.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;This outcome results from the combination of a trained market and a sensible
cost/value relationship that allowed the training to occur in the first place.
Book publishers should aim for the same outcome: profitability on the basis of
perceived reasonability of their prices. This will require training the market,
but that is possible so long as their expectations are&amp;nbsp;reasonable.&lt;/p&gt;
&lt;h2 id="a-reasonable-target"&gt;A reasonable&amp;nbsp;target&lt;/h2&gt;
&lt;h3 id="price-points"&gt;Price&amp;nbsp;points&lt;/h3&gt;
&lt;p&gt;Curtis&amp;#8217; final suggested price point is close to the mark, but I think some
revision is in order. Remember: the aim is to buoy both customer satisfaction
&lt;em&gt;and&lt;/em&gt; publisher profitability. Here&amp;#8217;s my proposed pricing scheme for fiction
(which could be adapted to other parts of the market fairly&amp;nbsp;straightforwardly):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standalone ebook:&amp;nbsp;$4.99&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paperback:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Book:&amp;nbsp;$7.99&lt;/li&gt;
&lt;li&gt;Bundle:&amp;nbsp;$9.99&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trade paperback:&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Book:&amp;nbsp;$14.99&lt;/li&gt;
&lt;li&gt;Bundle:&amp;nbsp;$15.99&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hardcover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Book:&amp;nbsp;$26.99&lt;/li&gt;
&lt;li&gt;Bundle:&amp;nbsp;$26.99&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;m basing these on the current pricing schemes in the market&amp;#8212;these are the
normal suggested retail prices for paperbacks, trade paperbacks, and hard
covers&amp;#8212;and on the assumption that the publisher&amp;#8217;s goal is to maximize revenue,
while the consumer&amp;#8217;s goal is to get the most content at a price he feels is
reasonable. I&amp;#8217;m also taking into account the existing profit curves for
publishers: paperbooks are relatively low margin, while hardcovers are the major
profit points, at least when they&amp;#8217;re&amp;nbsp;successful.&lt;/p&gt;
&lt;h3 id="rationale"&gt;Rationale&lt;/h3&gt;
&lt;p&gt;First, and most importantly, I believe the market will support these price
points. The standalone ebook is less expensive than the paperback, as it should
be, since its distribution costs are much lower than the costs of printing and
shipping paperbacks. At the same time, ebooks sales will still generate revenue
for the publisher; $5 is not a meaningless amount of&amp;nbsp;money.&lt;/p&gt;
&lt;p&gt;For each tier upwards, the cost of the bundled ebook drops. The publisher thus
acknowledges the increasing profitability of each tier as well as the increasing
cost to the reader. At the same time, the lowered bundling cost incentivizes the
user toward the higher profit items. In each case, the bundling cost is
sufficiently low as to be in the &amp;#8220;impulse purchase&amp;#8221; range for most users.&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Readers will be far more likely to front the cost of a hardcover if an ebook
comes bundled with it, because the value proposition is so much better. At the
same time, this is unlikely to decrease the profits of the publisher, because
the margins are much higher for&amp;nbsp;hardcovers.&lt;/p&gt;
&lt;p&gt;In fact, bundling at these rates will likely increase publisher profits from
ebooks, as most readers currently choose between ebook and physical books. The
price of a hardcover is simply too high to allow for the purchase of both. (Even
when this is not actually true, it &lt;em&gt;seems&lt;/em&gt; true to consumers, which is equally
important in determining their behavior.) With a sufficiently lower barrier to
getting the additional content, the likelihood that the reader purchases both
goes up substantially.&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;This potential for increased profitability is compounded by the availability of
the bundle at initial purchase time. A consumer who has already committed to
spending $8 on a book is unlikely to balk at $10, and even less to balk at the
transition from $15 to $16. In many cases, the publisher will earn more money
from the book purchase than before, but the reader is still getting a good deal
on the ebook. This is &lt;em&gt;exactly&lt;/em&gt; the combination that makes for a flourishing&amp;nbsp;market.&lt;/p&gt;
&lt;p&gt;Finally, the simplicity of these numbers is extremely helpful. Standardizing
these prices will decrease the friction inherent in making the purchase
decision, which increases the likelihood that a purchase will be made. I&amp;#8217;m not
suggesting a cartel&amp;#8212;price standardization is natural in this sort of
market&amp;#8212;and I believe the price points I&amp;#8217;ve suggested are where the market will
settle in the long run. The publishers who get there first will earn enormous
goodwill from their readers in the short term, as well as demonstrating their
leadership in the industry in ways that set them up for long term&amp;nbsp;success.&lt;/p&gt;
&lt;h2 id="bundle-up"&gt;Bundle&amp;nbsp;up&lt;/h2&gt;
&lt;p&gt;A smart approach to bundling could be enormously beneficial to the publishing
industry. In addition to the pure numerical profitability of the approach
outlined above&amp;#8212;no small detail in an industry struggling to adapt to the
realities of the new economy&amp;#8212;it establishes that the publishers are responsive
to customers in a way that other large media have not seemed to be. Nothing is
so helpful to a company&amp;#8217;s long-term sustainability as for consumers to &lt;em&gt;like&lt;/em&gt;
it. Reasonable bundling prices would go a long way toward helping readers see
publishers as friends, rather than&amp;nbsp;enemies.&lt;/p&gt;
&lt;p&gt;Obviously these numbers work best in the context of fiction. The value
propositions are entirely different in other contexts; a cookbook is an entirely
different thing than a copy of &lt;em&gt;The Hobbit&lt;/em&gt;. Across the board, though,
publishers should keep the same goals in mind: profitability by means of
reasonability and approachability. Be allies of the readers, not their enemies.
Make it easy and affordable for them to pay you for your work, and they&amp;nbsp;will.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;My thanks to &lt;a href="http://stephencarradini.com"&gt;Stephen Carradini&lt;/a&gt; for invaluable contributions to this piece
in two forms: many long conversations about this very topic, and a helpful edit
of the actual&amp;nbsp;content.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Additionally, there is a signaling problem here: &amp;#8220;free&amp;#8221; suggests &amp;#8220;low
value&amp;#8221; in a way that publishers rightly want to avoid. See &lt;a href="http://informationarchitects.net/blog/ia-writer-on-prices-and-features/"&gt;&amp;#8220;iA Writer: On
Prices and Features&amp;#8221;&lt;/a&gt;, Section 2: Cost, by Oliver Richtenstein for a
lengthy and sensible exploration of this issue. The issue of signaling value
should be taken into account in my suggestions later, as well. But more on
that below.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;When they sell at all, of course. I&amp;#8217;ve written about this problem
[before][piracy]: piracy explodes when there is demand without supply. It
also tends to grow at a higher rate when the cost is perceived as
unreasonable. &lt;span class="caps"&gt;TV&lt;/span&gt; shows priced at $5/episode wouldn&amp;#8217;t do well; they seem to
sell quite briskly at $1.99. Publishers run the risk of fomenting piracy by
setting their prices too high.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;I have never seen someone complain that a song is too expensive at a
dollar who was willing to pay &lt;em&gt;anything&lt;/em&gt;. A penny would be too pricey from
the pirates&amp;#8217; point of view.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Trade paperbacks (TPBs) are similar in size to hardcovers, but have soft
covers similar to those in a paperback. Fiction TPBs typically go for around
$15. Over the last few years, publishers have started shifting away from the
low-margin paperback market into these trade paperbacks, which provide a bit
higher profit for them. Personally, I don&amp;#8217;t mind, because these books tend
to be higher quality paper and bindings. If I&amp;#8217;m sitting down with a monster
like one of the books in &lt;cite&gt;The Wheel of Time&lt;/cite&gt;, this is far and
away the best format for a physical copy.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;On the signaling issue: the price of the ebook is sufficiently high as to
continue to signal real value here, I think. However, in the case of other
kinds of books, this scheme should be revisited. A complex &lt;span class="caps"&gt;EPUB3&lt;/span&gt; with
embedded videos or interactive content should signal that it offers a higher
value proposition than other ebooks with a higher price point; in some
cases, if that content is sufficiently central to the value proposition of
the book, it might be more expensive than the physical&amp;nbsp;copies.&lt;/p&gt;
&lt;p&gt;Similarly, a textbook might sell for $150, its ebook at $50, and the bundle
at $165&amp;#8212;because the cost of preparing a textbook ebook may be
substantially higher than that of preparing a fiction ebook. Signaling
matters, but overpricing is as much a risk here as underpricing.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;This has the added benefit of making the purchase of new books over used
books more attractive to the consumer: if the coupon for ebook at reduced
rate is only available at new book purchase, a $3 used book suddenly has a
much lower value proposition relative to the original when the reader is
interested in having an ebook copy as well, since the cost of having both is
still&amp;nbsp;$8.&lt;/p&gt;
&lt;p&gt;Of course, this leads us to the question of ebook resale, which is
currently a legally murky area at best, and requires considerable
legal and intellectual development.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Why the Smart Reading Device of the Future May Be … Paper</title><link href="http://www.chriskrycho.com/2014/why-the-smart-reading-device-of-the-future-may-be-paper.html" rel="alternate"></link><updated>2014-05-03T10:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-03:2014/why-the-smart-reading-device-of-the-future-may-be-paper.html</id><summary type="html">&lt;p&gt;One thing I didn&amp;#8217;t talk about in comparing reading experiences on a Kindle and on an iPad the other day is the elephant in the room: old-fashioned books. I enjoy Kindle and iPad, but I still love books best. Turns out I&amp;#8217;m not alone&amp;#8230; and there might just be reason for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wired.com/2014/05/reading-on-screen-versus-paper/"&gt;Brandon Keim at&amp;nbsp;Wired:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Paper books were supposed to be dead by now. For years, information theorists, marketers, and early adopters have told us their demise was imminent. Ikea even redesigned a bookshelf to hold something other than books. Yet in a world of screen ubiquity, many people still prefer to do their serious reading on&amp;nbsp;paper.&lt;/p&gt;
&lt;p&gt;Count me among them. When I need to read deeply&amp;#8212;when I want to lose myself in a story or an intellectual journey, when focus and comprehension are paramount&amp;#8212;I still turn to paper. Something just feels fundamentally richer about reading on it. And researchers are starting to think there’s something to this&amp;nbsp;feeling.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="links"></category></entry><entry><title>iPad vs. Kindle</title><link href="http://www.chriskrycho.com/2014/ipad-vs-kindle.html" rel="alternate"></link><updated>2014-04-30T21:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-30:2014/ipad-vs-kindle.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been a happy owner of both a Kindle and an iPad Mini for the last several
months, and it occurred to me tonight that I use them &lt;em&gt;very&lt;/em&gt; similarly in some
ways. Both are primarily reading devices for me. What is different is the kinds
of material I read on each.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;My Kindle is a first generation Paperwhite, in fairly good condition. (It has
one significant quirk in that it sometimes turns on without the power button
being pushed. Alas.) I use it nearly every day right now. I have most of my
school books on it, and several of my favorite novels. I&amp;#8217;m rereading Patrick
Rothfuss&amp;#8217; &lt;em&gt;The Wise Man&amp;#8217;s Fear&lt;/em&gt; right now, and so I spend a good half a hour a
day on the Kindle for that alone. I also get a lot of my seminary reading done
on the&amp;nbsp;device.&lt;/p&gt;
&lt;p&gt;On the iPad, on the other hand, I read a lot of web pages, nearly all via
&lt;a href="https://www.instapaper.com"&gt;Instapaper&lt;/a&gt;. I had sometimes had Instapaper items
delivered to my Kindle, and that worked &lt;em&gt;fairly&lt;/em&gt; well, but I much prefer the
experience of using the app on the iPad. I opt to do pretty much any technical
reading on the device: its screen just works much better for dealing with things
like code samples embedded in a blog post&amp;#8212;not least because I can scroll
easily if I need to! I also do basically all my Bible reading on the iPad. It is
far easier to navigate to different parts of the text, switch translations (or
original languages!) while keeping my place there on any of the top-tier iPad
apps than on the Kindle. And I sometimes read comics on the iPad&amp;#8212;something I
would not try in a million years on the current Kindle&amp;nbsp;screen!&lt;/p&gt;
&lt;p&gt;A friend asked a few months ago if I thought one would obviate the other. Given
the qualification that neither is in any sense truly a &lt;em&gt;necessity&lt;/em&gt;&amp;#8212;we could
quite easily get along without either&amp;#8212;my answer after several months with both
is &lt;em&gt;no&lt;/em&gt;. Though the devices are similar in a number of ways, they fit into very
different niches. The things I actively enjoy on each are very different. The
Kindle is good for much longer-form reading, and its lack of distractions is
nice (though I often take advantage of the Do Not Disturb mode on the iPad when
I actually want to accomplish things besides talking on social media). The iPad
is better for anything with color, for technical documents, and for anything
where navigation more complex than one-page-after-another is important. I would
not particularly want to read a novel on it,&amp;nbsp;though!&lt;/p&gt;
&lt;p&gt;I will be curious to see if the devices converge at some point in the
future.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; At present, no technology gives both the responsiveness and
gorgeous color of the iPad &lt;em&gt;and&lt;/em&gt; the low-contrast, pleasant long-form reading
experience offered by the Kindle&amp;#8217;s e-ink. If at some point we get a technology
that does both, it will be pretty amazing. In the meantime&amp;#8230; we still have
pretty amazing pieces of technology, and I enjoy them both a&amp;nbsp;lot.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I also use the iPad for a number of other things: App.net and Twitter and
so on, &lt;a href="http://www.fiftythree.com"&gt;Paper&lt;/a&gt;, starting some ideas for blog
posts, etc. But mainly I read on it!&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;No, Amazon&amp;#8217;s Kindle Fire series of tablets are nothing like that
convergence: they are &lt;em&gt;functionally&lt;/em&gt; just poor-man&amp;#8217;s-iPads hooked into
Amazon&amp;#8217;s ecosystem. Note that I&amp;#8217;m not making a comment about the quality or
lack thereof on the devices&amp;#8212;only that they&amp;#8217;re much reduced in
capabilities compared to an iPad or Android (e.g. Nexus 7).&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>A Little Crazy</title><link href="http://www.chriskrycho.com/2014/a-little-crazy.html" rel="alternate"></link><updated>2014-04-29T19:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-29:2014/a-little-crazy.html</id><summary type="html">&lt;p&gt;I&amp;#8217;m going to do something a little crazy, I&amp;#8217;ve decided. I&amp;#8217;m going to go ahead
and do like I wrote &lt;a href="http://www.chriskrycho.com/2014/doing-it-myself.html"&gt;a bit back&lt;/a&gt;, and make &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;
actually a thing over the course of the rest of the year. Not so crazy. What is
a bit nuts is the way I&amp;#8217;ve decided to go about that process. In short: as close
to the hardest way possible as I can&amp;nbsp;conceive.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Over the last couple weeks, I&amp;#8217;ve been spending a fair bit of time toying with
&lt;a href="http://iolanguage.org"&gt;Io&lt;/a&gt;. It&amp;#8217;s a neat little language, very different in its approach to a &lt;em&gt;lot&lt;/em&gt;
of things than the languages I&amp;#8217;ve used previously. My programming language
history is very focused on the &amp;#8220;normal&amp;#8221; languages. The vast majority of real-
world code I&amp;#8217;ve written has been in one of C, &lt;span class="caps"&gt;PHP&lt;/span&gt;, or Python. I&amp;#8217;ve done a good
bit of Javascript along the way, more Fortran than anyone my age has any
business having done, and a little each of Java and Ruby. Like I said: the
normal ones. With the exception of Javascript, all of those are either standard
imperative, object-oriented, or mixed imperative and object-oriented languages.
Python and Ruby both let you mix in a fair bit of functional-style programming,
and Javascript does a &lt;em&gt;lot&lt;/em&gt; of that and tosses in prototypal inheritance to&amp;nbsp;boot.&lt;/p&gt;
&lt;p&gt;But still: they&amp;#8217;re all pretty mainstream, &amp;#8220;normal&amp;#8221; languages. Io isn&amp;#8217;t like that
at all. For one thing, it&amp;#8217;s hardly popular in any sense at all. Well-known among
the hackers&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I know, perhaps, but not popular by any measure. It&amp;#8217;s small. And
it&amp;#8217;s very &lt;em&gt;alien&lt;/em&gt; in some ways. It&amp;#8217;s &lt;a href="http://en.wikipedia.org/wiki/Prototype-based_programming"&gt;prototypal inheritance&lt;/a&gt;, not normal
inheritance. Courtesy of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain"&gt;Javascript&lt;/a&gt;, I have a &lt;em&gt;little&lt;/em&gt; familiarity
with that, but it&amp;#8217;s definitely still not my default way of thinking about
inheritance. Python&amp;#8217;s inheritance model (the one I use most frequently) is
&lt;em&gt;essentially&lt;/em&gt; the same as that in C++, Java, &lt;span class="caps"&gt;PHP&lt;/span&gt;, and so on&amp;#8212;it&amp;#8217;s normal
class-driven inheritance. Io goes off and does full-blown prototypal
inheritance; even just the little I&amp;#8217;ve played with it has been&amp;nbsp;fun.&lt;/p&gt;
&lt;p&gt;Io also does a bunch of other things a &lt;em&gt;lot&lt;/em&gt; different from the other languages
I&amp;#8217;ve used. First, there are no keywords or&amp;#8212;formally speaking&amp;#8212;even operators
in the language. Every action (including ones like &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;) is simply a
message. Every value is an object (so &lt;code&gt;1.0&lt;/code&gt; is just as fully an object as an
arbitrarily-defined &lt;code&gt;Person&lt;/code&gt;). The combination means that writing &lt;code&gt;1 + 2&lt;/code&gt; is
actually just interpreted as the object &lt;code&gt;1&lt;/code&gt; receiving the &lt;code&gt;+&lt;/code&gt; message carrying
as its &amp;#8220;argument&amp;#8221; the &lt;code&gt;2&lt;/code&gt; object (really just the message contents). This is
&lt;em&gt;completely&lt;/em&gt; different at a deep paradigm level from the normal object-oriented
approach with object methods, even in a language like Python where all elements
are objects (including functions). The net result isn&amp;#8217;t necessarily particularly
different from calling methods on objects, but it is a &lt;em&gt;little&lt;/em&gt; different, with
have some interesting consequences. Notably (though trivially&amp;#8212;or at least, so
it seems to me at this point), you can pass a message to the null object without
it being an error. More importantly, the paradigm shift is&amp;nbsp;illuminating.&lt;/p&gt;
&lt;p&gt;Io also has far more capabilities in terms of concurrency than any of the other
languagues with which I&amp;#8217;m familiar, because it actively implements the &lt;a href="http://en.wikipedia.org/wiki/Actor_model"&gt;Actor
Model&lt;/a&gt;, which means its implementation of messaging instead of object
method calls can behave in concurrent ways. (I&amp;#8217;d say more if I understood it
better. I don&amp;#8217;t yet, which is one of the reasons I want to study the language.
Concurrency is very powerful, but it&amp;#8217;s also fairly foreign to me.) It&amp;#8217;s also
like Lisp in that its code can be inspected and modified at runtime. I&amp;#8217;ve wanted
to learn a Lisp for several years for this kind of mental challenge, but the
syntax has always just annoyed me too much ever to get there. Io will give me a
lot of its benefits with a much more pleasant syntax. It has coroutines, which
are new to me, and also helpful for concurrency.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The long and short of it is that the language has a ton of features not present
in the languages I have used, and&amp;#8212;more importantly&amp;#8212;is &lt;em&gt;paradigmatically&lt;/em&gt;
different from them. Just getting familiar with it by writing a goodly amount
of code in it would be a good way to learn in practice a bunch of computer science concepts
I never had a chance to learn formally.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;By now, as long as I&amp;#8217;ve rambled about Io, you&amp;#8217;ve probably figured out where I
was going in that first paragraph. I&amp;#8217;ve decided to stretch my brain a bit and
write Step Stool in Io. There are bunches of static site generators out there in
Python already, many of them quite mature. (This site is running on &lt;a href="https://github.com/getpelican"&gt;one of
them&lt;/a&gt; as of the time I write this post&amp;#8212;it&amp;#8217;s quite solid, even its
quirks and limitations occasionally annoy me.) The point of Step Stool has
always been twofold, though. First, I&amp;#8217;ve wanted to get to a spot where I was
really running my own software to manage my site, letting me do whatever I want
with it and guaranteeing I always understand it well enough to make those kinds
of changes. Second, I&amp;#8217;ve just wanted to &lt;em&gt;learn&lt;/em&gt; a whole bunch along the way.
Third, it&amp;#8217;s right there in the website link: &lt;a href="http://step-stool.io"&gt;step-stool.io&lt;/a&gt;! How could I pass
up such an&amp;nbsp;opportunity?&lt;/p&gt;
&lt;p&gt;It is that second goal that has pushed me to do this crazy project this crazy
way. It&amp;#8217;s crazier than just teaching myself a language in order to do the
static site generator itself, too, because there are a few other pieces missing
that I&amp;#8217;ll need to write to make this work&amp;#8230; like a Markdown implementation and
an &lt;span class="caps"&gt;HTML&lt;/span&gt; templating language. I&amp;#8217;ve never written anything remotely like either
before, so I&amp;#8217;m going to take the chance to learn a &lt;em&gt;lot&lt;/em&gt; of new things. For the
Markdown implementation, rather than relying on regular expression parsing
(like most Markdowns do), I&amp;#8217;m going to use a Parsing Expression Grammar.
That will certainly be more efficient and reliable, but&amp;#8212;more importantly&amp;#8212;it
is also outside my experience. I have yet to start thinking through how to
tackle the &lt;span class="caps"&gt;HTML&lt;/span&gt; templating language implementation (though I know I am going to
make it an Io implementation of &lt;a href="http://slim-lang.com"&gt;Slim&lt;/a&gt;, which I quite&amp;nbsp;like).&lt;/p&gt;
&lt;p&gt;In any case, I&amp;#8217;m going to be taking a good bit longer to get Step Stool
finished. That is all right: I am going to learn a ton along the way, and I am
quite sure I will have a blast doing it. And that is &lt;em&gt;exactly&lt;/em&gt; what these kinds
of projects are&amp;nbsp;for.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll post updates as I go, with the things I&amp;#8217;m learning along the way.
Hopefully they&amp;#8217;ll be interesting (or at least&amp;nbsp;entertaining).&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Hackers in the original sense of the world. Not &amp;#8220;crackers&amp;#8221;, but people
who like hacking on code, figuring things out the hard way.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Python 3.5 is actually adding coroutines, and I&amp;#8217;m excited about that.
I&amp;#8217;ll feel much more comfortable with them there having used them in Io, I&amp;#8217;m
sure!&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;I got here backwards, as it were&amp;#8212;by way of an undergraduate degree in
physics. I don&amp;#8217;t regret that for a second: I got a much broader education
than I could have managed while getting an engineering degree, and most
importantly learned &lt;em&gt;how to learn&lt;/em&gt;: easily the most important skill anyone
gains from any engineering degree.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="software development"></category></entry><entry><title>Learning QML, Part 1</title><link href="http://www.chriskrycho.com/2014/learning-qml-part-1.html" rel="alternate"></link><updated>2014-04-11T15:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-11:2014/learning-qml-part-1.html</id><summary type="html">&lt;p&gt;For part of my work with Quest Consultants, I&amp;#8217;ve been picking up Qt&amp;#8217;s &lt;span class="caps"&gt;QML&lt;/span&gt;
toolkit to use in building out the &lt;span class="caps"&gt;UI&lt;/span&gt;. The declarative syntax and ability to
define one&amp;#8217;s own model in non-C++- or Python-specific ways is quite nice. That
said, the learning process has had more than a few bumps along the way. I
decided to go ahead and write those up as I go, both for my own reference and
in the hope that it may prove useful to others as I&amp;nbsp;go.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;QML&lt;/span&gt; is a &lt;em&gt;Javascript-like&lt;/em&gt; language for &lt;em&gt;declarative programming&lt;/em&gt; of a user
interface. So it&amp;#8217;s a Javascript-based language that sort of behaves like &lt;span class="caps"&gt;HTML&lt;/span&gt;.
In fact, it behaves like Javascript in terms of how you define, access, and
update properties, and you can embed full-featured (mostly) Javascript functions
and objects in&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;But when you have nested &lt;span class="caps"&gt;QML&lt;/span&gt; Types, you end up with them behaving more like
&lt;span class="caps"&gt;HTML&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The weirdest bit, and the thing that I&amp;#8217;m having the hardest time adjusting to,
is that you can only edit properties of root Types when you&amp;#8217;re working with an
instance of that Type. And those Types are defined by &lt;em&gt;documents&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, to give the simplest possible example, let&amp;#8217;s say I defined a new type called
&lt;code&gt;Monkey&lt;/code&gt;, in the &lt;code&gt;Monkey.qml&lt;/code&gt; file, like&amp;nbsp;this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Monkey.qml
import QtQuick 1.1

Item {
    id: monkey_root
    property int monkey_id: -1
    property string monkey_name: "I don't have a name!"

    Item {
        id: monkey_foot
        property string monkey_foot_desc: "The monkey has a foot!"
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can use that in another file. If they&amp;#8217;re in the same directory, it&amp;#8217;s
automatically imported, so I can just do something like&amp;nbsp;this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//main.qml
import QtQuick 1.1

// Rectangle is exactly what it sounds like. Here we can display things.
Rectangle {
    id: the_basic_shape
    height: 400
    width: 400
    color: green

    Monkey {
        id: monkey_instance
        monkey_id = 42
        monkey_name = "George"  // he's kind of a curious little guy
    }

    Text {
        text: monkey_instance.monkey_name
        color: "red"
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That creates a (really ugly) rectangle that prints the &lt;code&gt;Monkey&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s name in red
text on a green background. It&amp;#8217;s impossible to access directly the &lt;code&gt;monkey_foot&lt;/code&gt;
element, though, which means that composing more complex objects in reusable
ways is difficult. In fact, I haven&amp;#8217;t come up with a particularly good way to do
it yet. At least, I should say that I haven&amp;#8217;t come up with a good way to create
high-level reusable components yet. I can see pretty easily how to create
low-level reusable components, but once you start putting them together in any
&lt;em&gt;specific&lt;/em&gt; way, you can&amp;#8217;t recompose them in other&amp;nbsp;ways.&lt;/p&gt;
&lt;p&gt;From what I&amp;#8217;ve gotten my head around so far, this ends up being less flexible
than either &lt;span class="caps"&gt;HTML&lt;/span&gt; templating languages (which are, or at least can be, completely
declarative) or normal Javascript (which is obviously &lt;em&gt;not&lt;/em&gt; declarative). Mind
you, it&amp;#8217;s all sorts of &lt;em&gt;interesting&lt;/em&gt;, and I have a pretty decent idea what I&amp;#8217;m
going to do to implement our &lt;span class="caps"&gt;UI&lt;/span&gt; with it, but it&amp;#8217;s taken me most of the day to
get a good handle on that, and my head still feels a bit funny whenever I&amp;#8217;m
trying to see how best to create composable&amp;nbsp;components.&lt;/p&gt;
&lt;p&gt;Note, too, that this is the &lt;em&gt;only&lt;/em&gt; way to create a new basic type of object in
&lt;span class="caps"&gt;QML&lt;/span&gt;: it has to be the root level object in a &lt;span class="caps"&gt;QML&lt;/span&gt; document. I would &lt;em&gt;really&lt;/em&gt; like
to be able to access internal declarations&amp;#8212;to have named internal
types/objects. Unfortunately, &lt;span class="caps"&gt;QML&lt;/span&gt; doesn&amp;#8217;t let you do this. I suspect this has to
do with how the &lt;span class="caps"&gt;QML&lt;/span&gt; type system works: it actually binds these types to C++
objects behind the scenes. This is a non-trivially helpful decision in terms of
the performance of the application, but it certainly makes my brain a little bit&amp;nbsp;twitchy.&lt;/p&gt;
&lt;p&gt;There are two basic consequences of this structure. First, any types you need to
be able to use in other &lt;span class="caps"&gt;QML&lt;/span&gt; objects have to be defined in their own &lt;span class="caps"&gt;QML&lt;/span&gt;
documents. Second, it is (as near as I can see so far, at least) difficult to
create good generic &lt;span class="caps"&gt;QML&lt;/span&gt; types of more complex structures that you can then use
to implement specific variations. For example: if you want to create accordions,
you can create a fair number of the low-level elements in generic ways that you
can reuse, but once you get to the relationships between the actual model,
delegate, and view elements, you will need to create them in custom forms for
each distinct&amp;nbsp;approach.&lt;/p&gt;
&lt;p&gt;This is more like creating &lt;span class="caps"&gt;HTML&lt;/span&gt; documents than Javascript, which makes sense,
&lt;em&gt;if&lt;/em&gt; you remember that &lt;span class="caps"&gt;QML&lt;/span&gt; is Javascript-based but &lt;em&gt;declarative&lt;/em&gt;. You just have
to remember that while you can define some reusable components, the full-fledged
elements are like full &lt;span class="caps"&gt;HTML&lt;/span&gt; pages with a templating system: you can include
elements, but not override their internal contents. In &lt;span class="caps"&gt;QML&lt;/span&gt;, you can override
&lt;em&gt;some&lt;/em&gt; of their contents, which is nice&amp;#8212;but that is not the primary way to go
about&amp;nbsp;it.&lt;/p&gt;</summary><category term="software development"></category></entry><entry><title>Feels Right</title><link href="http://www.chriskrycho.com/2014/feels-right.html" rel="alternate"></link><updated>2014-04-04T21:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-04:2014/feels-right.html</id><summary type="html">&lt;p&gt;I had spent most of the last week and a half working on getting
&lt;a href="http://www.firebirdsql.org"&gt;FirebirdSQL&lt;/a&gt; configured and ready to use for a project I&amp;#8217;m working on with
&lt;a href="http://www.questconsult.com"&gt;Quest Consultants&lt;/a&gt;. It was slow going. The tool is decent, but the
documentation is spotty and it felt like everything was just a bit of a slog&amp;#8212;to
get it working correctly, to get it playing nicely with other pieces of the
development puzzle, to get it working across platforms.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; Then, because I had
done something a &lt;em&gt;little&lt;/em&gt; bit silly in my eagerness to get up and going last
week and written code without a testable configuration, I hit a wall today. The
queries weren&amp;#8217;t working. I had made a &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception"&gt;bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I spent a substantial part of the day chasing down that bug, and then a
conversation with user &lt;em&gt;agronholm&lt;/em&gt; on the &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/"&gt;SQLAlchemy&lt;/a&gt; &lt;span class="caps"&gt;IRC&lt;/span&gt; channel
(&lt;a href="irc://irc.freenode.net/sqlalchemy"&gt;freenode/#sqlalchemy&lt;/a&gt;) got me thinking. The Firebird team describes
one of their options as an &amp;#8220;embedded&amp;#8221; server, but &lt;em&gt;agronholm&lt;/em&gt; pointed out that
what they really mean is &lt;em&gt;portable&lt;/em&gt;. It&amp;#8217;s running a standalone server and
client, but it&amp;#8217;s not part of the same thread/process (like SQLite is). Then
&lt;em&gt;agronholm&lt;/em&gt; very helpfully asked&amp;#8212;my having mentioned my preference for
&lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; earlier&amp;#8212;&amp;#8221;Does Postgres not have a portable version?&amp;#8221;
Two minutes later, we had both found &lt;a href="http://sourceforge.net/projects/postgresqlportable/"&gt;PostgreSQL Portable&lt;/a&gt;, and I&amp;nbsp;rejoiced.&lt;/p&gt;
&lt;p&gt;It took me less than half an hour to get it downloaded and set up and to confirm
that it would work the way we need for this particular piece of software.
(Firebird had taken me a good three hours, what with digging through badly
organized and not terribly clear documentation.) It took me less than half an
hour more to get PostgreSQL to the same point that I&amp;#8217;d finally gotten Firebird
to after multiple hours working with it. And I was so &lt;em&gt;very&lt;/em&gt; happy. What had
been an especially frustrating work day now had me quietly smiling to myself
constantly for the last two and a half hours as I &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception/22872598#22872598"&gt;finished&lt;/a&gt; tracking
down the bug that had set me on this path in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;Several years ago, when I first started doing web development, I got my feet wet
in database work with MySQL&amp;#8212;probably the single most common starting point for
anyone going that route, courtesy of the ubiquity of the standard Linux-Apache-
MySQL-&lt;span class="caps"&gt;PHP&lt;/span&gt; stack.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; A year after that, I picked up some work that was already
using PostgreSQL and fell in love almost immediately.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; Something just felt
&lt;em&gt;better&lt;/em&gt; about running &lt;code&gt;psql&lt;/code&gt; than running &lt;code&gt;mysql&lt;/code&gt; on the command line.
Postgres&amp;#8217; implementation of the &lt;span class="caps"&gt;SQL&lt;/span&gt; standard felt more natural. Even the tiniest
little details like the way tables display when you query them in &lt;code&gt;psql&lt;/code&gt; was
nicer. In less than a week, I was sold and haven&amp;#8217;t looked back. While I&amp;#8217;ve used
MySQL out of convenience on shared hosting from time to time, PostgreSQL is
unquestionably my preferred database&amp;nbsp;target.&lt;/p&gt;
&lt;p&gt;Today&amp;#8217;s experience brought that all home again. That grin on my face all
afternoon felt a bit silly, but it highlights the difference that really good
software design makes. I am not just talking about how it looks here&amp;#8212;though,
to be sure, PostgreSQL is prettier than FirebirdSQL&amp;#8212;but how it works.
PostgreSQL feels responsive, its command set makes a lot of sense and is easy to
use, and it is &lt;em&gt;extremely&lt;/em&gt; well documented. In fact, I would go so far as to say
that it is the best documented open source software I have ever used, as well as
among the very most robust. (The only other open source software I find to be as
incredibly rock-solid and reliable as PostgreSQL is the Linux kernel. I am by no
means an expert on either, or on open source software in general, but the Linux
kernel is an unarguably amazing piece of work. So is PostgreSQL.) All those tiny
little details add&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a good reminder for me as I write software that yes, the things I care
about&amp;#8212;the small matters that would be so easy to overlook when customers
express no interest in them&amp;#8212;really do matter. People may not know that things
like typography make a difference in their experience, but those subtle, often
imperceptible things matter. They may not consciously notice the differences in
your interface design (even a command line interface), but it will change their
experience of the software. Do it poorly, or even in a just-good-enough-to-get-
by fashion, and you&amp;#8217;ll annoy or simply bore them. Do it well, and you might just
delight them&amp;#8212;even if they can&amp;#8217;t tell you&amp;nbsp;why.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;To make my point a little more visible, I thought it might be useful to post
samples of &lt;span class="caps"&gt;SQL&lt;/span&gt; to accomplish the same task in the two different database&amp;nbsp;dialects.&lt;/p&gt;
&lt;h3 id="firebirdsql4"&gt;FirebirdSQL:&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id INT NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);
CREATE SEQUENCE project_id_sequence;
SET TERM + ;
CREATE TRIGGER project_id_sequence_update
  ACTIVE BEFORE INSERT OR UPDATE POSITION 0
  ON projects
AS
BEGIN
  IF ((new.id IS NULL) OR (new.id = 0))
    THEN new.id = NEXT VALUE FOR project_id_sequence;
END+
SET TERM ; +
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="postgresql"&gt;PostgreSQL&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id SERIAL NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not just that the PostgreSQL example is shorter and clearer&amp;#8212;it is that
it is shorter and clearer because its designers and developers have taken the
time to make sure that the shorter, cleaner way works well, and have documented
it so you can know how to use that shorter cleaner way without too much&amp;nbsp;difficulty.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I do most of my development on a Mac, but do all the testing on the target
platform (Windows) in a &lt;span class="caps"&gt;VM&lt;/span&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;At this point, I would only use one of those by default if I were building
a web app: Linux. I&amp;#8217;d use &lt;a href="http://wiki.nginx.org/Main"&gt;nginx&lt;/a&gt; instead of Apache,
&lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; instead of MySQL, and &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt; (though
&lt;a href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;, Javascript via &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/vstudio/hh341490"&gt;C# and the .&lt;span class="caps"&gt;NET&lt;/span&gt; stack&lt;/a&gt;,
or just about anything &lt;em&gt;but&lt;/em&gt; &lt;span class="caps"&gt;PHP&lt;/span&gt; would do fine).&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;em&gt;Almost&lt;/em&gt; immediately because at that point configuration on &lt;span class="caps"&gt;OS&lt;/span&gt; X was a bit
of a pain. That is &lt;a href="http://postgresapp.com" title="Postgres.app"&gt;no longer the case&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;To be perfectly fair to Firebird, it is improving. The upcoming 3.0 series
release will make these two a lot more similar than they are at present, and
clean up a number of other issues. What it won&amp;#8217;t do is get the &lt;em&gt;feel&lt;/em&gt; of
using Firebird more like that of using Postgres, or make the installation
procedure smoother or easier, or make the documentation more complete.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="software development"></category><category term="design"></category></entry><entry><title>FirebirdSQL and IntelliJ IDEA (etc.)</title><link href="http://www.chriskrycho.com/2014/firebirdsql-and-intellij-idea-etc.html" rel="alternate"></link><updated>2014-03-28T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-28:2014/firebirdsql-and-intellij-idea-etc.html</id><summary type="html">&lt;p&gt;Setting up IntelliJ &lt;span class="caps"&gt;IDEA&lt;/span&gt;&amp;#8217;s built-in database tools to work with FirebirdSQL
requires a particular setup configuration, which I&amp;#8217;m documenting here for public&amp;nbsp;consumption.&lt;/p&gt;
&lt;p&gt;These setup tools &lt;em&gt;should&lt;/em&gt; be applicable to any of JetBrains&amp;#8217; other Java-based
IDEs which include database support (e.g. PyCharm, RubyMine, WebStorm, etc.).
&lt;em&gt;Note:&lt;/em&gt; the following apply to IntelliJ &lt;span class="caps"&gt;IDEA&lt;/span&gt; 12 and the associated platforms,
but &lt;em&gt;not&lt;/em&gt; to the &lt;span class="caps"&gt;IDEA&lt;/span&gt; 13 platform, which made substantial changes to how
databases are configured. The underlying details are consistent, but the
interface has changed. I have tested on PyCharm 3.1 to confirm&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;This was all done on &lt;span class="caps"&gt;OS&lt;/span&gt; X 10.9, so I also make no guarantees that this works on
other platforms, though the likelihood that it behaves the same on Linux is
fairly good. I will update the post if and when I have confirmed that it&amp;nbsp;does.&lt;/p&gt;
&lt;p&gt;Steps to configuring a database correctly for use with &lt;span class="caps"&gt;IDEA&lt;/span&gt;/etc. Note that
steps 1&amp;#8211;3 are fairly obvious; the real point of interest is in steps 4 and 5,
which took me the longest time to figure&amp;nbsp;out.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the latest version of the Firebird &lt;a href="http://www.firebirdsql.org/en/jdbc-driver/"&gt;Java drivers&lt;/a&gt; for your
    operating system and your Java version. (You can check your Java version by
    running &lt;code&gt;java -version&lt;/code&gt; at the command line.) Extract the downloaded zip
    file. The extracted folder should include a file named
    &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt; (&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is currently&amp;nbsp;2.2.4).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;span class="caps"&gt;IDEA&lt;/span&gt;, in the database view, add a new data source: in the Database view
    (accessible via a menu button on the right side of the screen), right click
    and choose &lt;strong&gt;New -&amp;gt; Data Source&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;strong&gt;&lt;span class="caps"&gt;JDBC&lt;/span&gt; driver files&lt;/strong&gt;, browse to the location where you extracted the
    Jaybird driver files and select &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;strong&gt;&lt;span class="caps"&gt;JDBC&lt;/span&gt; driver class&lt;/strong&gt;, choose &lt;code&gt;org.firebirdsql.jdbc.FBDriver&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;strong&gt;Database &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/strong&gt;, specify &lt;code&gt;jdbc:firebirdsql://localhost:3050/&lt;/code&gt;
    followed by &lt;em&gt;either&lt;/em&gt; the full path to the database in question or a
    corresponding alias.&lt;sup id="fnref:alias"&gt;&lt;a class="footnote-ref" href="#fn:alias" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; A full path might look like this on&amp;nbsp;Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/C:/my_project/the_database.db
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With an alias, you would instead&amp;nbsp;have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/the_alias
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then specify valid values for the &lt;strong&gt;User&lt;/strong&gt; and &lt;strong&gt;Password&lt;/strong&gt; fields from
your existing configuration of the&amp;nbsp;database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the &lt;strong&gt;Test Connection&lt;/strong&gt; button and make sure the configuration&amp;nbsp;works.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That should do it. Note that the driver choice and path configuration both
matter. On &lt;span class="caps"&gt;OS&lt;/span&gt; X, I found that only the &lt;code&gt;FBDriver&lt;/code&gt; with this (and one other,
older-style and therefore not recommended) path setup worked&amp;nbsp;successfully.&lt;/p&gt;
&lt;p&gt;Observations, corrections, additional information, and miscellaneous comments
welcomed on &lt;a href="https://alpha.app.net/chriskrycho"&gt;App.net&lt;/a&gt; or &lt;a href="https://www.twitter.com/chriskrycho"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:alias"&gt;
&lt;p&gt;I strongly recommend configuring an alias in the aliases.conf file in
the Firebird home directory (usually set as &lt;code&gt;$FIREBIRD_HOME&lt;/code&gt; during
installation on *nix systems). This lets you move the database around at
will, update just the configuration file, and not have to update any
references to the database file whatsoever.&amp;#160;&lt;a class="footnote-backref" href="#fnref:alias" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Software Development"></category></entry><entry><title>The End of Surfing</title><link href="http://www.chriskrycho.com/2014/the-end-of-surfing.html" rel="alternate"></link><updated>2014-03-26T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-26:2014/the-end-of-surfing.html</id><summary type="html">&lt;p&gt;Sometime in the last few months it occurred to me that I no longer &amp;#8220;surf&amp;#8221; the
internet. I read, to be sure, and every once in a long while I even go on a
spree where I follow links from one site to another (or just in a long trail on
Wikipedia). In general, however, I no longer surf. I suspect I am not alone in
this: if we took a straw poll I would venture that most of my friends offline
and acquaintances online alike spend rather less time in &amp;#8220;browsing&amp;#8221; mode than
they do reading Facebook or Twitter or Instagram. Motion from link to link has
been replaced by individual hops out onto Buzzfeed or a viral cat picture
website.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The obvious explanation for all of this is already there in what I&amp;#8217;ve written:
Facebook and Twitter and all the rest of the social media web. To be sure, the
advent of social media and the increasing degree to which social media have
captured user attention on the web are a significant factor in the end of the
old surfing/browsing behavior. This is a dream come true for those social media
giants which have found ways to deliver ads to their many millions of users and
thereby turn enormous&amp;nbsp;profits.&lt;/p&gt;
&lt;p&gt;At the same time, I think there is an oft-overlooked factor in the shifting
nature of the web over the last decade: the browser. In fact, if there is any
single cause behind the death of old-fashioned surfing, I would point to Firefox
1.0: the browser which popularized tabbed browsing to increasingly large
sections of the internet-using public.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; The open-source browser steadily ate
away at Internet Explorer&amp;#8217;s then absurd levels of dominance, until Internet
Explorer 8 included of tabs itself. By the time that Chrome came on the scene,
tabbed browsing had long since become a&amp;nbsp;given.&lt;/p&gt;
&lt;p&gt;So why do I think that &lt;em&gt;tabbed browsing&lt;/em&gt; of all things contributed to the end of
&amp;#8220;browsing&amp;#8221; and &amp;#8220;surfing&amp;#8221; as our dominant mode of reading the internet? Simply
put: it broke linearity. Previously,&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; one&amp;#8217;s experience of the web was single-
stranded, leaping from one point to another in a line that however contorted was
always connected by the forward and backward buttons on the browser. The moment
tabbed browsing came on the scene, that line was broken. Following a link might
mean it opened in a new tab instead of moving the whole view forward to&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Surfing as I remember it in the late &amp;rsquo;90s and early &amp;rsquo;00s was
inherently the experience of getting lost along that timeline, finding myself
dozens of links along the chain and wondering how I had ended up there, and then
being able to trace my way back. With tabs, that traceability was gone. With it
went the inherent tension that we faced with every link: to follow, or not? To
get sucked down into &lt;em&gt;this&lt;/em&gt; vortex or &lt;em&gt;that&lt;/em&gt;? Because in all likelihood, we
knew, we were not going to be coming back to this page. With tabs, though, I
could open both of those pages without ever leaving this one. I could start new
journeys without ending the old. But there was a hidden cost: that newly opened
tab had no history. It was a clean slate; before that newly opened link there
was only a blank page. If I closed the original from which I had opened it,
there was no going back.&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; If I closed this new tabs, there was no going
forward to them. The line was&amp;nbsp;broken.&lt;/p&gt;
&lt;p&gt;From there it was only a short step to the idea of a single site being the
center from which one ventured out to other points on the web before returning:
the Facebooks and Twitters of the world. In some sense, Facebook&amp;#8217;s entire model
is predicated on the idea that it is natural to open a new tab with that juicy
Buzzfeed content while keeping Facebook itself open in a background tab. Would
it work in that old linear model? Sort of. Would it feel natural?&amp;nbsp;Never.&lt;/p&gt;
&lt;p&gt;All of this because of tabs. Invention&amp;#8217;s most significant results are rarely
those the minds behind it expect. When we are designing things&amp;#8212;whether a piece
of furniture or a piece of the web&amp;#8212;we have to remember that design decisions
all have repercussions that we may not see. Technology is never neutral.
Particular innovations may or may not be &lt;em&gt;morally&lt;/em&gt; significant, but they always
produce changes in people&amp;#8217;s behavior. Design has&amp;nbsp;consequences.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;For the record, lots of that hopping from link to link was on Buzzfeed-
like and viral-cat-picture-like sites, too. I am not concerned with the
&lt;em&gt;kind&lt;/em&gt; of content being read here, so much as the way it is being read.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Note that I am not crediting Firefox 1.0 with &lt;em&gt;creating&lt;/em&gt; the tabbed
browser&amp;#8212;only with popularizing it. That distinction matters.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Excepting having multiple browser windows open, which I am sure people
did&amp;#8212;but to a much lesser extent.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Yes, yes, browser history and re-open closed tab commands. But the
&lt;em&gt;experience&lt;/em&gt; of those is different, and that&amp;#8217;s what we&amp;#8217;re talking about
here.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="design"></category><category term="software development"></category></entry><entry><title>Doing It Myself</title><link href="http://www.chriskrycho.com/2014/doing-it-myself.html" rel="alternate"></link><updated>2014-03-21T22:14:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-21:2014/doing-it-myself.html</id><summary type="html">&lt;p&gt;Last summer, I started work on a project I named &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;&amp;#8212;aiming to
make a static site generator that would tick of all the little boxes marking my
desires for a website generator. In due time, the project got put on hold, as I
started up classes again and needed to focus more on my family than on fun side&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;Come the beginning of 2014, I was ready to bit WordPress farewell once and for
all, though. While &lt;a href="https://ghost.org"&gt;Ghost&lt;/a&gt; looks interesting, since I do all my writing
in Markdown files, there is something tempting about the canonical version of
the documents being the version on my computer (and thus also on my iPad and
iPhone and anywhere I have Dropbox and/or Git access). I did not have time at
the beginning of the year to finish writing Step Stool, and I knew as much,&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;
so instead I moved to &lt;a href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt; as a stop-gap. There were lots of good
reasons to pick Pelican: it has an active development community, fairly thorough
documentation,&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; and it&amp;#8217;s in Python and uses Jinja2 templates&amp;#8212;the same basic
approach I had taken with Step Stool, and the same&amp;nbsp;toolset.&lt;/p&gt;
&lt;p&gt;Unfortunately, while I have been glad to be away from WordPress, my experience
with Pelican so far has only reinforced my desire to get Step Stool done. There
are &lt;em&gt;lots&lt;/em&gt; of little things that it does in ways that just annoy me. Many of
them have to do with configuration and documentation. On the latter, while the
documentation is &lt;em&gt;fairly&lt;/em&gt; complete, there are quite a few holes and gaps. (Yes,
yes, open source software and anyone can add to the docs. That&amp;#8217;s great&amp;#8212;it
really is&amp;#8212;but if I&amp;#8217;m going to use someone else&amp;#8217;s solution, it had better &lt;em&gt;just
work&lt;/em&gt;. Otherwise, I&amp;#8217;d rather spend my time getting my own&amp;nbsp;going.)&lt;/p&gt;
&lt;p&gt;For example, if you want to see how the pagination actually works, good luck
figuring it out from the documentation. You&amp;#8217;ll need to go looking at the way the
sample themes (yes, both of them) are implemented to start getting a feel for
it. Along the same lines, many of the objects that get handed to the templates
are not fully documented, so it is difficult to know what one can or cannot do.
I do not particularly want to spend my time adding debug print statements to my
templates just to figure out what options I have&amp;nbsp;available.&lt;/p&gt;
&lt;p&gt;The same kinds of things hold true for configuration options. Moreover, the
configuration is done through a Python module. While that makes the module
easier to integrate on the code side of things, it makes its actual content much
less transparent than one might hope. Python is not really well optimized for
writing configuration files&amp;#8212;nor is any normal programming language.
Configuration is inherently declarative, rather than&amp;nbsp;imperative.&lt;/p&gt;
&lt;p&gt;This is not to say that Pelican is bad software. It is not. It is, however, a
fairly typical example of open source software implemented by committee. It has
holes (some of them serious), bumps, and quirks. Here is the reality: so will
Step Stool, though they will be the quirks that come from an individual
developer&amp;#8217;s approach rather than a group&amp;#8217;s. But the one thing I can guarantee,
and the reason I am increasingly motivated to get back to working on Step Stool.
And yes, I do have a couple other projects on my plate as well&amp;#8212;contributions
to the Smartypants and Typogrify modules, my own &lt;a href="https://bitbucket.org/chriskrycho/spacewell"&gt;Spacewell typography project&lt;/a&gt;,
and quite possibly a &lt;a href="https://bitbucket.org/chriskrycho/markdown-poetry/"&gt;Markdown Poetry extension &lt;/a&gt;. But I would like
very much to just get back to doing this myself. There is freedom in rolling my
own solution to things. I will not always have time to do these kinds of things; 
I figure I should do them when I&amp;nbsp;can.&lt;/p&gt;
&lt;p&gt;So here&amp;#8217;s to &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;, and&amp;#8212;more importantly&amp;#8212;to writing your own
software just to scratch that&amp;nbsp;itch.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I spent quite a bit of time tweaking my friend Vernon King&amp;#8217;s &lt;a href="http://www.vernonking.org"&gt;Jekyll-powered site&lt;/a&gt;, I got Winning Slowly off the ground,
including designing the site from scratch and implementing it (also in Pelican),
and I did some substantial redesign work on this site. That was more than enough
for my three week break&amp;#8212;as evidenced by the fact that I didn&amp;#8217;t get to the sort
of 1.0 version of this site until just a week or so ago.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Emphasis on &amp;#8220;fairly.&amp;#8221; More on &lt;em&gt;that&lt;/em&gt; in a moment as well.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="software development"></category></entry><entry><title>Why Is American Internet So Slow?</title><link href="http://www.chriskrycho.com/2014/why-is-american-internet-so-slow.html" rel="alternate"></link><updated>2014-03-07T19:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-07:2014/why-is-american-internet-so-slow.html</id><summary type="html">&lt;p&gt;Pretty damning of the current (lack of a) regulatory regime, if you ask&amp;nbsp;me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;According to a recent study by Ookla Speedtest, the &lt;span class="caps"&gt;U.S.&lt;/span&gt; ranks a shocking 31st
in the world in terms of average download speeds. The leaders in the world are
Hong Kong at 72.49 Mbps and Singapore on 58.84 Mbps. And America? Averaging
speeds of 20.77 Mbps, it falls behind countries like Estonia, Hungary,
Slovakia, and&amp;nbsp;Uruguay.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="links"></category></entry><entry><title>Goodbye, Chrome</title><link href="http://www.chriskrycho.com/2014/goodbye-chrome.html" rel="alternate"></link><updated>2014-02-24T15:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-24:2014/goodbye-chrome.html</id><summary type="html">&lt;p&gt;Last week, Chrome crossed the line for me. I deleted it from my system to clean
up its many hooks into my system&amp;#8212;I searched out every trace of it I could
find&amp;#8212;and will put it back on my system only for testing websites. Why? Because
it&amp;#8217;s just too creepy&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the story: two weekends ago, I was sitting at a coffee shop working on a
friend&amp;#8217;s website, when up popped a series of Google Now &lt;span class="caps"&gt;OS&lt;/span&gt; X desktop
notifications from Chrome, informing me of the weather, a package having
recently shipped, and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;There were just two problems with&amp;nbsp;this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I never gave Chrome permission to do anything of the&amp;nbsp;sort.&lt;/li&gt;
&lt;li&gt;I was not signed into Chrome or any Google service at the&amp;nbsp;time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Number 1 is bothersome. Number 2 is so far beyond bothersome that I took the
nuclear option. Let&amp;#8217;s walk through&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Google apparently decided to start opting people into Google Now on the Chrome
33 Beta. Opting people into anything new is nearly always a bad idea in my view;
opting someone into something that actively integrates with email, calendar,
etc. without asking them is just creepy. Now, full disclosure: I had previously
granted Google access to some of this data for Google Now on my Android phone
(though I have since moved to an iPhone). However, as is usual for Google these
days, the company took that permission in one context and treated it as global
permission in all&amp;nbsp;contexts.&lt;/p&gt;
&lt;p&gt;No doubt the box I checked when I gave them access to that data in the first
place legally allowed them to continue touching it. That did not particularly
bother me. Rather, it was the assumption that I wanted the same kind of
interactions from the service in a different context. This is typical of Google
&amp;#8212;typically un-human-friendly, that is. People do different things with their
phones than with their browsers, and have different expectations of what each
will do. More importantly, though, even if we might &lt;em&gt;want&lt;/em&gt; our browsers to start
supplying us the kinds of sometimes-valuable information that we get from Google
Now (or Apple or Microsoft&amp;#8217;s similar tools), we generally want the opportunity
to make that decision. Increasingly, Google is making that decision for its
users, leaving them to opt out and turn it off if they so desire. That is not a
policy I particularly like. So: strike one. Or rather: strike several dozen, of
the sort that had me moving away from Google&amp;#8217;s services for quite some time&amp;#8212;
but it probably still wouldn&amp;#8217;t have pushed me across the line to this kind of
hard kill-it-with-fire&amp;nbsp;mentality.&lt;/p&gt;
&lt;p&gt;What did? That would be the part where Chrome started sending me desktop Google
Now notifications. Without asking me. In a browser to which I was not logged in,
nor logged into any Google&amp;nbsp;services.&lt;/p&gt;
&lt;p&gt;I will say that again to be clear: I was not signed into Chrome. I was not
signed into any Google services in the browser. I had not allowed the browser to
create desktop notifications. And it started sending me Google Now notifications
for my main Google account. Worse: nothing I could do with the browser itself
changed that behavior. (Unsurprising: there was no way Chrome should have been
able to do that in the first place, logged out of all Google services as I&amp;nbsp;was.)&lt;/p&gt;
&lt;p&gt;Goodbye, Chrome. You&amp;#8217;re just too&amp;nbsp;creepy.&lt;/p&gt;
&lt;p&gt;This was not the first time I have seen Chrome engage in behavior that does not
respect its users. I have repeatedly run into cases where clearing the cache and
deleting browsers&amp;#8230; doesn&amp;#8217;t. Cookies sometimes still stick around. Private
browsing sessions inherit cookies from the main window (and sometimes vice
versa). Closing a private session and launching a new one would sometimes still
include cookies and cache from a previous session (bank accounts still logged
in, etc.). Chrome had thus long been untrustworthy to me. But this was a bridge
too far. This was not just slightly unnerving. It was&amp;nbsp;creepy.&lt;/p&gt;
&lt;p&gt;Call it a bug if you like. It is likely that it was, in fact, a bug. So, most
likely, were the other cases I saw above. But these are the kinds of bugs that
make a browser fundamentally untrustworthy, and they are the kinds of bugs that
are that much creepier coming from a company whose profit comes almost entirely
from selling advertising&amp;#8212;that is, from selling user information to advertising
companies. The deal was that we trusted Google not to abuse that information.
Unfortunately, that deal just keeps getting worse all the time. (Pray they do
not alter it&amp;nbsp;further.)&lt;/p&gt;
&lt;p&gt;I will have a copy of the browser on my system for testing purposes, but for
nothing else. Goodbye, Chrome. And for that matter: goodbye, Google services.
Over the course of the rest of this year, I will be moving myself completely off
of all Google services (mail, calendar, etc.), with the sole exception of (non-
logged-in) search. You&amp;#8217;re just too creepy&amp;nbsp;now.&lt;/p&gt;</summary></entry></feed>