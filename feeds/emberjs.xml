<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Krycho</title><link>http://www.chriskrycho.com/</link><description></description><atom:link href="http://www.chriskrycho.com/feeds/emberjs.xml" rel="self"></atom:link><lastBuildDate>Thu, 09 Jun 2016 20:35:00 -0400</lastBuildDate><item><title>Testing Ember.js Mixins With a Container</title><link>http://www.chriskrycho.com/2016/testing-emberjs-mixins-with-a-container.html</link><description>&lt;p&gt;Today I was working on an Ember.js &lt;a href="http://emberjs.com/api/classes/Ember.Mixin.html#content"&gt;mixin&lt;/a&gt; for the new mobile web application we’re shipping at Olo, and I ran into an interesting problem when trying to test it.&lt;/p&gt;
&lt;p&gt;When you’re testing mixins, you’re generally not working with the normal Ember container.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In fact, the default test setup for mixins doesn’t have &lt;em&gt;any&lt;/em&gt; container in play. It just looks like this (assuming you ran &lt;code&gt;ember generate mixin bar&lt;/code&gt; in an app named &lt;code&gt;foo&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;
import BarMixin from &amp;#39;foo/mixins/bar&amp;#39;;
import { module, test } from &amp;#39;qunit&amp;#39;;

module(&amp;#39;Unit | Mixin | bar&amp;#39;);

// Replace this with your real tests.
test(&amp;#39;it works&amp;#39;, function(assert) {
  let BarObject = Ember.Object.extend(BarMixin);
  let subject = BarObject.create();
  assert.ok(subject);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note two things:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It uses the basic Qunit &lt;code&gt;module&lt;/code&gt; setup, not the ember-qunit &lt;code&gt;moduleFor&lt;/code&gt; setup.&lt;/li&gt;
&lt;li&gt;It assumes you’re generating a new object instance for every single test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of those assumptions are fine, &lt;em&gt;if you don’t need to interact with the container&lt;/em&gt;. In many cases, that’s perfectly reasonable—I’d go so far as to say that most mixins probably &lt;em&gt;shoudln’t&lt;/em&gt; have any dependency on the container.&lt;/p&gt;
&lt;p&gt;In the specific case I was working on, however, the point of the mixin was to abstract some common behavior which included all the interactions with a &lt;a href="https://guides.emberjs.com/v2.6.0/applications/services/"&gt;service&lt;/a&gt;. This meant making sure the dependency injection worked in the unit test. This in turn meant dealing with the container. So let’s see what was involved in that.&lt;/p&gt;
&lt;p&gt;We start by switching from the basic &lt;code&gt;qunit&lt;/code&gt; helpers to using the &lt;code&gt;ember-qunit&lt;/code&gt; helpers.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// Replace this...
import { module, test } from &amp;#39;qunit&amp;#39;;
module(&amp;#39;Unit | Mixin | bar&amp;#39;);

module(&amp;#39;
// with this:
import { moduleFor, test } from &amp;#39;ember-qunit&amp;#39;;
moduleFor(&amp;#39;mixin:bar&amp;#39;, &amp;#39;Unit | Mixin | Bar&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;moduleFor()&lt;/code&gt; helper has two things going for it—one of which we &lt;em&gt;need&lt;/em&gt;, and one of which isn’t strictly &lt;em&gt;necessary&lt;/em&gt;, but has some nice functionality. In any case, this will help when registering a container. Those two features:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It does support the use of the container. In fact, it’s declaring how this mixin relates to the container in the first argument to the helper function: &lt;code&gt;'mixin:foo'&lt;/code&gt; is the definition of the mixin for injection into the container.&lt;/li&gt;
&lt;li&gt;Any functions we define on the options argument we can pass to the &lt;code&gt;moduleFor()&lt;/code&gt; helper are available on the &lt;code&gt;this&lt;/code&gt; of the test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, in the first version of this, I had set up a common &lt;code&gt;Ember.Object&lt;/code&gt; which had mixed in the &lt;code&gt;BarMixin&lt;/code&gt;, so:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const BarObject = Ember.Object.extend(BarMixin);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, in each test, I created instances of this to use:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;test(&amp;#39;test some feature or another&amp;#39;, function(assert) {
  const subject = BarObject.create();
  // ...do stuff and test it with `assert.ok()`, etc.
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem was that any of those tests which required a container injection always failed. Assume we have a service named &lt;code&gt;quux&lt;/code&gt;, and that it’s injected into the mixin like this in &lt;code&gt;foo/app/mixins/bar.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;

export default Ember.Mixin.create({
  quux: Ember.inject.service()
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any test which actually tried to &lt;em&gt;use&lt;/em&gt; &lt;code&gt;quux&lt;/code&gt; would simply fail because of the missing container (even if you specified in the test setup that you needed the service):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test(&amp;#39;it uses quux somehow&amp;#39;, function(assert) {
  const subject = BarObject.create();
  const quux = subject.get(&amp;#39;quux&amp;#39;);  // throws Error
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{&amp;gt;&amp;gt; TODO: add the specific error message. SEO, man! &amp;lt;&amp;lt;}&lt;/p&gt;
&lt;p&gt;Taking advantage of the two &lt;code&gt;ember-qunit&lt;/code&gt; features, though, we can handle all of this.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;
import { moduleFor, test } from &amp;#39;ember-qunit&amp;#39;;

const { getOwner } = Ember;

moduleFor(&amp;#39;mixin:bar&amp;#39;, &amp;#39;Unit | Mixin | bar&amp;#39;, {
  // The `needs` property in the options argument tells the test
  // framework that it needs to go find and instantiate the `quux`
  // service. (Note that if `quux` depends on other injected
  // services, you have to specify that here as well.)
  needs: [&amp;#39;service:quux&amp;#39;],

  // Again: any object we create in this options object will be
  // available on the `this` of every `test` function below. Here,
  // we want to get a &amp;quot;test subject&amp;quot; which is attached to the
  // Ember container, so that the container is available to the
  // test subject itself for retrieving the dependencies injected
  // into it (and defined above in `needs`).
  subject() {
    BarObject = Ember.Object.extend(BarMixin);

    // This whole thing works because, since we&amp;#39;re in a
    // `moduleFor()`, `this` has the relevant method we need to
    // attach items to the container: `register()`.
    this.register(&amp;#39;test-container:bar-object&amp;#39;, BarObject);

    // `Ember.getOwner` is the public API for getting the
    // container to do this kind of lookup. You can use it in lots
    // of places, including but not limited to tests. Note that
    // that because of how the dependency injection works, what we
    // get back from the lookup is not `BarObject`, but an
    // instance of `BarObject`. That means that we don&amp;#39;t need to
    // do `BarObject.create()` when we use this below; Ember
    // already did that for us.
    return getOwner(this).lookup(&amp;#39;test-container:bar-object&amp;#39;);
  }
});

test(&amp;#39;the mixin+service does what it should&amp;#39;, function(assert) {
  // We start by running the subject function defined above. We
  // now have an instance of an `Ember.Object` which has
  // `BarMixin` applied.
  const subject = this.subject();

  // Now, because we used a test helper that made the container
  // available, declared the dependencies of the mixin in `needs`,
  // and registered the object we&amp;#39;re dealing with here, we don&amp;#39;t
  // get an error anymore.
  const quux = subject.get(&amp;#39;quux&amp;#39;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, in summary:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Use the &lt;code&gt;ember-qunit&lt;/code&gt; helpers if you need the container.&lt;/li&gt;
&lt;li&gt;Define whatever dependencies you have in &lt;code&gt;needs&lt;/code&gt;, just as you would in any other test.&lt;/li&gt;
&lt;li&gt;Register the mixin-derived object (whether &lt;code&gt;Ember.Object&lt;/code&gt;, &lt;code&gt;Ember.Route&lt;/code&gt;, &lt;code&gt;Ember.Component&lt;/code&gt;, or whatever else) in a method on the options argument for &lt;code&gt;moduleFor()&lt;/code&gt;. Use that to get an instance of the object and you’re off to the races!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One final consideration: while in this case it made good sense to use this approach and make the service injection available for the test, there’s a reason that the tests generated by Ember CLI don’t use &lt;code&gt;moduleFor()&lt;/code&gt; by default. It’s a quiet but clear signal that you should reevaluate whether this &lt;em&gt;is&lt;/em&gt; in fact the correct approach.&lt;/p&gt;
&lt;p&gt;In general, mixins are best used for self-contained units of functionality. If you &lt;em&gt;need&lt;/em&gt; dependency injection for them, it may mean that you should think about structuring things in a different way. Can all the functionality live on the service itself? Can all of it live in the mixin instead of requiring a service? Can the service calls be delegated to whatever type is using the mixin?&lt;/p&gt;
&lt;p&gt;But if not, and you &lt;em&gt;do&lt;/em&gt; need a mixin which injects a service, now you know how to do it!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; The documentation around testing mixins is relatively weak, and in general the testing docs are the weak bits in the Ember guides right now.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; After a conversation with &lt;a href="https://github.com/rwjblue"&gt;@rwjblue&lt;/a&gt; on the &lt;a href="https://ember-community-slackin.herokuapp.com"&gt;Ember Community Slack&lt;/a&gt;, though, I was able to get a handle on the issue, and here we are. Since it stumped me, I’m guessing I’m not the only one.&lt;/p&gt;
&lt;p&gt;When this happens, &lt;em&gt;write it up&lt;/em&gt;. I’ve been guilty of this too often in the past few months: learning something new that I couldn’t find anywhere online, and then leaving it stored in my own head. It doesn’t take a particularly long time to write a blog post like this, and if you’re stuck, chances are &lt;em&gt;very&lt;/em&gt; good someone else is too.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re not familiar with the “container”, this is where all the various dependencies are registered, and where Ember looks them up to inject them when you use methods like &lt;code&gt;Ember.inject.service()&lt;/code&gt;.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Something I intend to help address in the next week or two via a pull request, so if you’re my Ember.js documentation team friend and you’re reading this… it’s coming. 😉&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 09 Jun 2016 20:35:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-06-09:2016/testing-emberjs-mixins-with-a-container.html</guid><category>emberjs</category><category>javascript</category><category>software development</category></item><item><title>Ember.js: "Introducing Subteams"</title><link>http://www.chriskrycho.com/2016/emberjs-introducing-subteams.html</link><description>&lt;p&gt;In which one tech I really like (&lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt;) steals a great idea from another tech I really like (&lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;).&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 24 May 2016 19:10:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-05-24:2016/emberjs-introducing-subteams.html</guid><category>links</category><category>programming languages</category><category>emberjs</category><category>rust</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-05-06-1056.html</link><description>&lt;p&gt;I just had one of thos beautiful moments when I realized I’d written a beautifully generic component I could reuse throughout the app, and it made me &lt;em&gt;so happy&lt;/em&gt;.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 06 May 2016 10:56:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-05-06:2016/2016-05-06-1056.html</guid><category>software development</category><category>emberjs</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-19-1744.html</link><description>&lt;p&gt;I still love EmberJS—but if I have one complaint, it’s that it’s &lt;em&gt;slightly&lt;/em&gt; too heavy on convention-based magic. I want it to be a little more explicit, so that I can have a little more insight into what it’s going. Yes, even if that means a little more boilerplate. Explicit is better than implicit.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 19 Apr 2016 17:44:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-04-19:2016/2016-04-19-1744.html</guid><category>javascript</category><category>emberjs</category><category>software development</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-03-12-1154.html</link><description>&lt;p&gt;Just registered for &lt;a href="https://wickedgoodember.com"&gt;Wicked Good Ember Conf&lt;/a&gt; 2016. Looking forward to chatting &lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt; in Boston in June!&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 12 Mar 2016 11:54:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2016-03-12:2016/2016-03-12-1154.html</guid><category>emberjs</category><category>conferences</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-03-09-1236.html</link><description>&lt;p&gt;Pro tip for tracking down oddities with &lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt; during testing: &lt;code&gt;ember test --serve --filter '&amp;lt;some pattern&amp;gt;'&lt;/code&gt; is &lt;em&gt;great&lt;/em&gt;. E.g. &lt;code&gt;ember t -s --filter 'Unit'&lt;/code&gt; for just unit tests.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 09 Mar 2016 12:36:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2016-03-09:2016/2016-03-09-1236.html</guid><category>software development</category><category>javascript</category><category>emberjs</category></item><item><title>Unsurprisingly, In Flux</title><link>http://www.chriskrycho.com/2015/unsurprisingly-in-flux.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;This started as a &lt;a href="https://alpha.app.net/chriskrycho/post/57102562"&gt;series of posts&lt;/a&gt; on App.net. I &lt;a href="http://www.chriskrycho.com/2014/a-few-theses-on-blogging.html"&gt;resolved&lt;/a&gt; a while ago that if I was tempted to do that, I should just write a blog post instead. I failed at that resolution, but at a friend’s &lt;a href="https://alpha.app.net/jws/post/57108281"&gt;suggestion&lt;/a&gt;, am adapting it into a blog post anyway. You can see the posts that prompted it &lt;a href="https://alpha.app.net/keita/post/57096585"&gt;here&lt;/a&gt; and &lt;a href="https://alpha.app.net/jws/post/57096838"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The state of JavaScript frameworks today is a scale, really, from not-at-all-monolithic to totally-monolithic, in roughly this order: Backbone – React &amp;amp; Angular – Ember – Meteor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backbone and related library Underscore are really collections of common JS tools and patterns you can use to write apps, but they’re not &lt;em&gt;frameworks&lt;/em&gt;, per se. You’ll write all your own boilerplate there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React and Angular supply much &lt;em&gt;more&lt;/em&gt; of the functionality, but Angular is a “meta-framework” that aims to do &lt;em&gt;some&lt;/em&gt; boilerplate but let you construct your own custom app framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is very powerful, but it’s kind of like Git: wires are exposed; you have to understand a &lt;em&gt;lot&lt;/em&gt; about the internals to get it to do what you want. Its routing functionality is pretty limited out of the box, too—so much so that there’s a near-standard third-party router.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React, as I understand it, supplies a paradigm and associated tools oriented primarily at view state management, though with capabilities via extensions for routing, etc. These tools are &lt;em&gt;extremely&lt;/em&gt; powerful for performance in particular. It’s not a full framework, and the docs expressly note that you can &lt;em&gt;just&lt;/em&gt; use React for the view layer with other tools if you want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In any case, Angular and React do &lt;em&gt;different&lt;/em&gt; things from each other, but both do substantially more than Backbone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember is a full framework, strongly emphasizing shared conventions (with a lot of common developers from Rails). It’s perhaps less adaptable than React or Angular, but is much more full-featured; you have very little boilerplate to do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meteor is like Ember, but does server-side Node as well as client-side stuff, with the goal being to minimize code duplication, sharing assets as much as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of all of those, Ember has easily (easily!) the best-explained roadmap, most articulate leadership, and best development path. They are also aggressively adopting the best features of other frameworks wherever it makes sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is currently in flux, as Google has announced Angular 2.0 will be basically a completely different framework; there will be &lt;em&gt;no&lt;/em&gt; direct migration path for Angular 1.x apps to Angular 2.0+. Total rewrite required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember uses a steady 6-week release schedule with very careful regression testing and semantic versioning, with clear deprecation notices and upgrade paths, and is therefore both rapidly iterating &lt;em&gt;and&lt;/em&gt; relatively stable for use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you just need a set of tools for enhance functionality on otherwise relatively static pages, Backbone+Underscore is a great combo. If you already have a bunch of things in place but want a dedicated view layer, React is good.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re writing a new, full-on web &lt;em&gt;application&lt;/em&gt; (SPA, or organized in whatever other way), I think Ember is the very clear winner at this point. I have good confidence in their leadership and they’re firing on all cylinders.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Angular, &lt;a href="https://alpha.app.net/mikehoss"&gt;@mikehoss&lt;/a&gt; &lt;a href="https://alpha.app.net/mikehoss/post/57105656"&gt;posted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record they are doing that to make it more mobile-friendly. The Ang1 has abysmal performance on mobile. Besides a time machine, this maybe the best option. And Miško is a bit of a jerk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can’t speak to his comment about Miško (Miško Hevery, one of the leads on AngularJS), but I agree about Angular itself: the rewrite needs to happen. Angular 1.x is a mess—as are its docs. It’s just not a good time to be using 1.x for any new projects.&lt;/p&gt;
&lt;p&gt;I’ll add to these points that I’ve used Angular for the last 9 months on HolyBible.com development. As I noted: the documentation is pretty rough, and in a lot of cases you really do have to understand what the framework is doing and how before you can get it to do the things you want. This is, in one sense, exactly the &lt;em&gt;opposite&lt;/em&gt; of what I’m looking for in a framework—but it makes sense given Angular’s goal of being a meta-framework.&lt;/p&gt;
&lt;p&gt;Rather like Git, though, which was originally going to be infrastructure for version control systems which would have their own interface, but eventually just had a “good enough” interface that we’re all now stuck with, Angular is being used &lt;em&gt;as&lt;/em&gt; a framework, not just as a &lt;em&gt;meta-framework&lt;/em&gt;, and it’s unsurprisingly not great for that.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class="editorial"&gt;Take this for what it’s worth: not the final word (by a long stretch) on JavaScript frameworks, but rather the perspective of one guy who notably &lt;em&gt;hasn’t used all of the frameworks&lt;/em&gt;, but has spent some time looking at them. Moreover, I haven’t particularly edited this; it’s more a summary in the kind of short-form posts that I originally created than a detailed analysis. The only things I’ve done are expand some of the notes on Angular and React, and add the footnote on React.&lt;/i&gt;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; don’t know a ton about React, but I do think a lot of what I do know about it is cool from a programming perspective. From a designer perspective, however, it’s a bit of a pain: React’s “JSX” domain-specific language is &lt;em&gt;much&lt;/em&gt; less friendly to developers than standard HTML, and therefore than either Ember or Angular, both of which implement their templating via HTML templating languages. There’s a substantil tradeoff there: React’s model is interesting not only academically but in practice because of the performance results it produces. It’s worth note, though, that others have recognized this and are adopting it to varying degrees; notably, Ember is incorporating the idea of minimizing changes to the DOM by keeping track of state and updating only differences, rather than refreshing the whole tree, in the new rendering engine (HTMLBars) they’re rolling out over the past several and future several releases.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 28 Aug 2015 19:50:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2015-04-08:2015/unsurprisingly-in-flux.html</guid><category>software development</category><category>javascript</category><category>angularjs</category><category>emberjs</category><category>react</category></item></channel></rss>