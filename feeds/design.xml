<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Krycho</title><link>http://www.chriskrycho.com/</link><description></description><atom:link href="http://www.chriskrycho.com/feeds/design.xml" rel="self"></atom:link><lastBuildDate>Sat, 23 May 2015 15:30:00 -0400</lastBuildDate><item><title>2015-05-23 15:30</title><link>http://www.chriskrycho.com/2015/2015-05-23-1530.html</link><description>&lt;p&gt;Currently on my mind: how to chunk up the Bible text with semantic blobs and chapter/verse trees in corresponding data structures, in order to present meaningful sections of content (paragraphs, etc.) without resorting to delivering a whole book.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 23 May 2015 15:30:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2015-05-23:2015/2015-05-23-1530.html</guid><category>software development</category><category>design</category></item><item><title>Open Source is Neat</title><link>http://www.chriskrycho.com/2015/open-source-is-neat.html</link><description>&lt;p&gt;I confess: my &lt;em&gt;first&lt;/em&gt; response to seeing &lt;a href="//andrewcamenga.com/"&gt;this page&lt;/a&gt; was a flash of anger: &lt;em&gt;Hey, he didn’t just learn from my site configuration, he actually stole my site &lt;/em&gt;&lt;strong&gt;design&lt;/strong&gt;&lt;em&gt;!&lt;/em&gt; And then I remembered: I open-sourced the design precisely so people could do that. This was just the first time I’ve ever actually had someone reuse something I did and shared like this. It was a strange (but ultimately wonderful) feeling. I hope to have it again many more times.&lt;/p&gt;
&lt;p&gt;In any case, I rather like the tweaks Andrew Comenga made to my design to make it his own; &lt;a href="//andrewcamenga.com/"&gt;go take a look&lt;/a&gt;!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 17 May 2015 22:52:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2015-05-17:2015/open-source-is-neat.html</guid><category>links</category><category>software development</category><category>design</category></item><item><title>2015-05-16 19:30</title><link>http://www.chriskrycho.com/2015/2015-05-16-1930.html</link><description>&lt;p&gt;Updated the websites today. Did a bunch of back end work that &lt;em&gt;should&lt;/em&gt; be basically invisible or make a change seamlessly on the front end for both &lt;a href="//www.chriskrycho.com"&gt;chriskrycho.com&lt;/a&gt; and &lt;a href="//www.winningslowly.org"&gt;winningslowly.org&lt;/a&gt;. Very satisfying day; nice to be working on things just because I can.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 16 May 2015 19:30:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2015-05-16:2015/2015-05-16-1930.html</guid><category>software development</category><category>design</category></item><item><title>Tolle Lege!</title><link>http://www.chriskrycho.com/2015/tolle-lege.html</link><description>&lt;p&gt;I was delighted to be able to give a talk at &lt;a href="http://bibletechconference.com/"&gt;BibleTech&lt;/a&gt; this year. I spoke for almost exactly 40 minutes on the subject of digital typography, with a focus on some of the nitty-gritty details that make texts readable… or not. Here is the screen capture and audio from the talk!&lt;/p&gt;
&lt;div class="iframe-wrapper four-to-three"&gt;
&lt;iframe src="https://player.vimeo.com/video/126655499" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;You can also access the &lt;a href="/talks/bibletech2015/"&gt;slides&lt;/a&gt; whenever you like (though note that they were designed to be complements to the talk, &lt;em&gt;not&lt;/em&gt; the content of the talk, and as such they elide a great deal of the content).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 01 May 2015 10:30:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2015-05-01:2015/tolle-lege.html</guid><category>design</category></item><item><title>The Joy of Good Tools</title><link>http://www.chriskrycho.com/2015/joy-good-tools.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;Note: This started out as a &lt;a href="https://alpha.app.net/chriskrycho/post/47820144"&gt;series of posts on App.net&lt;/a&gt;, but as I realized that it was growing a bit, I decided to &lt;a href="/2014/a-few-theses-on-blogging.html"&gt;take my own advice&lt;/a&gt; and turn it into a short blog post. (The first four paragraphs of this post are the same as the posts that spawned it.) And then, as so often happens with my writing, it rather took on a life of its own. So much for short.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;After wrestling with Bitbucket issues again all day, I think I’ve finally hit the breaking point. Time to go ahead and drop the money on GitHub and migrate my private repos there. (Yes, GitLab is neat, but tool integrations matter, too.)&lt;/p&gt;
&lt;p&gt;I think I’m also probably going to spring for a small subscription to Pivotal Tracker. It’s cheaper to do GitHub+PivotalTracker at my scale than to host GitLab and run YouTrack on a VPS. And that’s &lt;em&gt;not&lt;/em&gt; counting my time.&lt;/p&gt;
&lt;p&gt;The big thing with Pivotal is that I &lt;em&gt;need&lt;/em&gt; the ability to estimate more effectively even than something like Trello affords (and I don’t want to spend time wrangling with Chrome plugins), and it gives me that. Totally worth the cost in saved pain.&lt;/p&gt;
&lt;p&gt;And as for GitHub as compared to the free GitLab… well, honestly, the F/OSS-copycat model bothers me on a lot of levels. The fact that their strategy is “copy GitHub as closely as possible, and charge for it” is not my idea of “winning slowly”.&lt;/p&gt;
&lt;p&gt;(“Winning slowly” is more than just the name of my &lt;a href="//www.winningslowly.org"&gt;podcast&lt;/a&gt;. In fact, it’s the opposite: we named the podcast that because it’s one of the core commitments in our lives.)&lt;/p&gt;
&lt;p&gt;So I’m going to pay for Pivotal and GitHub. My time is worth something, and the quality of the tools I use matters, too. Ongoing irritation and frustration adds up over time. Good tools can make us happier. Bad tools can make work more frustrating than it needs to be. Given just how frustrating work can be anyway, the last thing in the world I want to do is unnecessarily spend my time being even more frustrated by my tools. And you know what? $7/month for each of those tools is absolutely worth more than the frustration of wrestling with tools that do the job less well.&lt;/p&gt;
&lt;p&gt;I’m actually really excited by this. Pivotal Tracker will help me avoid making the painful mistake of underestimation in the future, by helping me see how long things actually take and giving me a way to plan out major projects with that data immediately available. GitHub will be simultaenously more functional and much lovelier than Bitbucket—no strategy tax holding it back!—and will be much nicer to use.&lt;/p&gt;
&lt;p&gt;At the end of the day, it comes down to this: I’m happy to pay for good tools that make my work more enjoyable.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;To my surprise and amusement, this leads me to a closely related point I had been writing up in a separate blog post: the value of tools that &lt;em&gt;delight&lt;/em&gt;. It is not merely that bad tools make work unpleasant. Good tools can make work a &lt;em&gt;joy&lt;/em&gt;. Indeed, because my vocations is such a significant part of my life, few things bring me as much simple pleasure as a tool that does its job well, is pleasant to use, and is beautiful, all at once.&lt;/p&gt;
&lt;p&gt;The latest example of this for me is &lt;a href="//www.neat.io/bee/index.html"&gt;Bee&lt;/a&gt;, a tool designed to make working with issue trackers like JIRA, GitHub Issues, and FogBugz easier and more pleasant. I use JIRA for one of my long-term contracts—I actually set it up for the company—and I have a love-hate relationship with it. JIRA’s power is great, but the web interface is slow and cluttered.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have used other desktop tools with JIRA before, and they were even worse than the web interface. I stumbled across Bee the other day (I cannot even remember how!), decided to try it out, and fell in love. It is simple, fast, and &lt;em&gt;elegant&lt;/em&gt;. That is a killer combination. I have been using it daily for over a week, and strange though it might be to say of a desktop client for issue trackers, I get genuine pleasure out of using it. (Yes, I know: that is a bit strange.)&lt;/p&gt;
&lt;p&gt;I have the same experience with a number of other tools I use—&lt;a href="//www.git-tower.com"&gt;Tower&lt;/a&gt;, &lt;a href="//bywordapp.com"&gt;Byword&lt;/a&gt;, and &lt;a href="//www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt; to name just a few. This very post is written in Byword, and I’m &lt;em&gt;happy&lt;/em&gt; about it. I wish I felt that way about every tool I use.&lt;/p&gt;
&lt;p&gt;And this goes beyond software. I have had the same experience driving a car. The Mazda3 I drove in and after college was a delight. The MUV&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; we drive right now is sufficient. The Chevy Malibu we rented for driving to and from Texas in December was &lt;em&gt;irritating&lt;/em&gt;, with an inordinate number of small failures to consider how the thing would actually be used. I would buy another Mazda3 in a heartbeat; I would contentedly take another Lexus RX300-alike; I would avoid a Chevy Malibu like the plague.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Every&lt;/em&gt; category of tool is like this.&lt;/p&gt;
&lt;p&gt;The difference between a poor or mediocre tool and a good tool can make the difference between frustration and satisfaction. The difference between a good tool and a &lt;em&gt;great&lt;/em&gt; tool can make the difference between satisfaction and delight. That inspires me: it makes me want to make things so that they do more than &lt;em&gt;suffice&lt;/em&gt;—so that they &lt;em&gt;excel&lt;/em&gt;, so that they delight and energize their audience. Whether that is someone using a web application I write or someone listening to a piece of music I composed, I want them to experience more than good-enough. I want them to feel joy.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There is something profound here, I think, something that goes even deeper than just the experience of being happy enough with a good tool to pay money to use it. I think human beings are meant for that profound joy—meant for it in every breath. That these kinds of delights are rare, and so often marred even at their best by little failures, is a mark of the imperfection—and, in human terms at least, the &lt;em&gt;imperfectibility&lt;/em&gt;—of the world in which we live. But the fact that such moments will be rare until the eschaton neither undoes nor diminishes the imperative to strive after them—especially for those of us who, as Christians, affirm the goodness and the &lt;em&gt;telos&lt;/em&gt; of the created world. Quite the contrary. We have a responsibility and a charge as subcreators always to be able to say of the work we have done, “It is good.”&lt;/p&gt;
&lt;p&gt;I am not there yet. I hope very much, though, that the work I do this year will be—for at least one person—a little sip from that deep well of delight. Whether I succeed or no, at least the bar is set where it ought to be.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Atlassian’s designers seem to be shooting for the kind of “flat” minimalism that is in right now… and missing the mark entirely. &lt;em&gt;All&lt;/em&gt; of their tools are a cluttered mess in the UI/X department.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;A “Mom Utility Vehicle”, my wry term for “SUV”-type vehicles sitting on standard car chasses.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 09 Jan 2015 18:00:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2015-01-09:2015/joy-good-tools.html</guid><category>software development</category><category>design</category><category>joy</category></item><item><title>Feels Right</title><link>http://www.chriskrycho.com/2014/feels-right.html</link><description>&lt;p&gt;I had spent most of the last week and a half working on getting &lt;a href="http://www.firebirdsql.org"&gt;FirebirdSQL&lt;/a&gt; configured and ready to use for a project I’m working on with &lt;a href="http://www.questconsult.com"&gt;Quest Consultants&lt;/a&gt;. It was slow going. The tool is decent, but the documentation is spotty and it felt like everything was just a bit of a slog—to get it working correctly, to get it playing nicely with other pieces of the development puzzle, to get it working across platforms.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Then, because I had done something a &lt;em&gt;little&lt;/em&gt; bit silly in my eagerness to get up and going last week and written code without a testable configuration, I hit a wall today. The queries weren’t working. I had made a &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception"&gt;bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I spent a substantial part of the day chasing down that bug, and then a conversation with user &lt;em&gt;agronholm&lt;/em&gt; on the &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/"&gt;SQLAlchemy&lt;/a&gt; IRC channel (&lt;a href="irc://irc.freenode.net/sqlalchemy"&gt;freenode/#sqlalchemy&lt;/a&gt;) got me thinking. The Firebird team describes one of their options as an “embedded” server, but &lt;em&gt;agronholm&lt;/em&gt; pointed out that what they really mean is &lt;em&gt;portable&lt;/em&gt;. It’s running a standalone server and client, but it’s not part of the same thread/process (like SQLite is). Then &lt;em&gt;agronholm&lt;/em&gt; very helpfully asked—my having mentioned my preference for &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; earlier—“Does Postgres not have a portable version?” Two minutes later, we had both found &lt;a href="http://sourceforge.net/projects/postgresqlportable/"&gt;PostgreSQL Portable&lt;/a&gt;, and I rejoiced.&lt;/p&gt;
&lt;p&gt;It took me less than half an hour to get it downloaded and set up and to confirm that it would work the way we need for this particular piece of software. (Firebird had taken me a good three hours, what with digging through badly organized and not terribly clear documentation.) It took me less than half an hour more to get PostgreSQL to the same point that I’d finally gotten Firebird to after multiple hours working with it. And I was so &lt;em&gt;very&lt;/em&gt; happy. What had been an especially frustrating work day now had me quietly smiling to myself constantly for the last two and a half hours as I &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception/22872598#22872598"&gt;finished&lt;/a&gt; tracking down the bug that had set me on this path in the first place.&lt;/p&gt;
&lt;p&gt;Several years ago, when I first started doing web development, I got my feet wet in database work with MySQL—probably the single most common starting point for anyone going that route, courtesy of the ubiquity of the standard Linux-Apache- MySQL-PHP stack.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; A year after that, I picked up some work that was already using PostgreSQL and fell in love almost immediately.&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Something just felt &lt;em&gt;better&lt;/em&gt; about running &lt;code&gt;psql&lt;/code&gt; than running &lt;code&gt;mysql&lt;/code&gt; on the command line. Postgres’ implementation of the SQL standard felt more natural. Even the tiniest little details like the way tables display when you query them in &lt;code&gt;psql&lt;/code&gt; was nicer. In less than a week, I was sold and haven’t looked back. While I’ve used MySQL out of convenience on shared hosting from time to time, PostgreSQL is unquestionably my preferred database target.&lt;/p&gt;
&lt;p&gt;Today’s experience brought that all home again. That grin on my face all afternoon felt a bit silly, but it highlights the difference that really good software design makes. I am not just talking about how it looks here—though, to be sure, PostgreSQL is prettier than FirebirdSQL—but how it works. PostgreSQL feels responsive, its command set makes a lot of sense and is easy to use, and it is &lt;em&gt;extremely&lt;/em&gt; well documented. In fact, I would go so far as to say that it is the best documented open source software I have ever used, as well as among the very most robust. (The only other open source software I find to be as incredibly rock-solid and reliable as PostgreSQL is the Linux kernel. I am by no means an expert on either, or on open source software in general, but the Linux kernel is an unarguably amazing piece of work. So is PostgreSQL.) All those tiny little details add up.&lt;/p&gt;
&lt;p&gt;It’s a good reminder for me as I write software that yes, the things I care about—the small matters that would be so easy to overlook when customers express no interest in them—really do matter. People may not know that things like typography make a difference in their experience, but those subtle, often imperceptible things matter. They may not consciously notice the differences in your interface design (even a command line interface), but it will change their experience of the software. Do it poorly, or even in a just-good-enough-to-get- by fashion, and you’ll annoy or simply bore them. Do it well, and you might just delight them—even if they can’t tell you why.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;To make my point a little more visible, I thought it might be useful to post samples of SQL to accomplish the same task in the two different database dialects.&lt;/p&gt;
&lt;h3 id="firebirdsql4"&gt;FirebirdSQL:&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id INT NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);
CREATE SEQUENCE project_id_sequence;
SET TERM + ;
CREATE TRIGGER project_id_sequence_update
  ACTIVE BEFORE INSERT OR UPDATE POSITION 0
  ON projects
AS
BEGIN
  IF ((new.id IS NULL) OR (new.id = 0))
    THEN new.id = NEXT VALUE FOR project_id_sequence;
END+
SET TERM ; +&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="postgresql"&gt;PostgreSQL&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id SERIAL NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not just that the PostgreSQL example is shorter and clearer—it is that it is shorter and clearer because its designers and developers have taken the time to make sure that the shorter, cleaner way works well, and have documented it so you can know how to use that shorter cleaner way without too much difficulty.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I do most of my development on a Mac, but do all the testing on the target platform (Windows) in a VM.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;At this point, I would only use one of those by default if I were building a web app: Linux. I’d use &lt;a href="http://wiki.nginx.org/Main"&gt;nginx&lt;/a&gt; instead of Apache, &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; instead of MySQL, and &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt; (though &lt;a href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;, Javascript via &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/vstudio/hh341490"&gt;C# and the .NET stack&lt;/a&gt;, or just about anything &lt;em&gt;but&lt;/em&gt; PHP would do fine).&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;&lt;em&gt;Almost&lt;/em&gt; immediately because at that point configuration on OS X was a bit of a pain. That is &lt;a href="http://postgresapp.com" title="Postgres.app"&gt;no longer the case&lt;/a&gt;.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;To be perfectly fair to Firebird, it is improving. The upcoming 3.0 series release will make these two a lot more similar than they are at present, and clean up a number of other issues. What it won’t do is get the &lt;em&gt;feel&lt;/em&gt; of using Firebird more like that of using Postgres, or make the installation procedure smoother or easier, or make the documentation more complete.&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 04 Apr 2014 21:30:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-04-04:2014/feels-right.html</guid><category>software development</category><category>design</category></item><item><title>The End of Surfing</title><link>http://www.chriskrycho.com/2014/the-end-of-surfing.html</link><description>&lt;p&gt;Sometime in the last few months it occurred to me that I no longer “surf” the internet. I read, to be sure, and every once in a long while I even go on a spree where I follow links from one site to another (or just in a long trail on Wikipedia). In general, however, I no longer surf. I suspect I am not alone in this: if we took a straw poll I would venture that most of my friends offline and acquaintances online alike spend rather less time in “browsing” mode than they do reading Facebook or Twitter or Instagram. Motion from link to link has been replaced by individual hops out onto Buzzfeed or a viral cat picture website.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The obvious explanation for all of this is already there in what I’ve written: Facebook and Twitter and all the rest of the social media web. To be sure, the advent of social media and the increasing degree to which social media have captured user attention on the web are a significant factor in the end of the old surfing/browsing behavior. This is a dream come true for those social media giants which have found ways to deliver ads to their many millions of users and thereby turn enormous profits.&lt;/p&gt;
&lt;p&gt;At the same time, I think there is an oft-overlooked factor in the shifting nature of the web over the last decade: the browser. In fact, if there is any single cause behind the death of old-fashioned surfing, I would point to Firefox 1.0: the browser which popularized tabbed browsing to increasingly large sections of the internet-using public.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The open-source browser steadily ate away at Internet Explorer’s then absurd levels of dominance, until Internet Explorer 8 included of tabs itself. By the time that Chrome came on the scene, tabbed browsing had long since become a given.&lt;/p&gt;
&lt;p&gt;So why do I think that &lt;em&gt;tabbed browsing&lt;/em&gt; of all things contributed to the end of “browsing” and “surfing” as our dominant mode of reading the internet? Simply put: it broke linearity. Previously,&lt;a href="#fn3" class="footnoteRef" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; one’s experience of the web was single- stranded, leaping from one point to another in a line that however contorted was always connected by the forward and backward buttons on the browser. The moment tabbed browsing came on the scene, that line was broken. Following a link might mean it opened in a new tab instead of moving the whole view forward to it.&lt;/p&gt;
&lt;p&gt;Surfing as I remember it in the late ’90s and early ’00s was inherently the experience of getting lost along that timeline, finding myself dozens of links along the chain and wondering how I had ended up there, and then being able to trace my way back. With tabs, that traceability was gone. With it went the inherent tension that we faced with every link: to follow, or not? To get sucked down into &lt;em&gt;this&lt;/em&gt; vortex or &lt;em&gt;that&lt;/em&gt;? Because in all likelihood, we knew, we were not going to be coming back to this page. With tabs, though, I could open both of those pages without ever leaving this one. I could start new journeys without ending the old. But there was a hidden cost: that newly opened tab had no history. It was a clean slate; before that newly opened link there was only a blank page. If I closed the original from which I had opened it, there was no going back.&lt;a href="#fn4" class="footnoteRef" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; If I closed this new tabs, there was no going forward to them. The line was broken.&lt;/p&gt;
&lt;p&gt;From there it was only a short step to the idea of a single site being the center from which one ventured out to other points on the web before returning: the Facebooks and Twitters of the world. In some sense, Facebook’s entire model is predicated on the idea that it is natural to open a new tab with that juicy Buzzfeed content while keeping Facebook itself open in a background tab. Would it work in that old linear model? Sort of. Would it feel natural? Never.&lt;/p&gt;
&lt;p&gt;All of this because of tabs. Invention’s most significant results are rarely those the minds behind it expect. When we are designing things—whether a piece of furniture or a piece of the web—we have to remember that design decisions all have repercussions that we may not see. Technology is never neutral. Particular innovations may or may not be &lt;em&gt;morally&lt;/em&gt; significant, but they always produce changes in people’s behavior. Design has consequences.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For the record, lots of that hopping from link to link was on Buzzfeed- like and viral-cat-picture-like sites, too. I am not concerned with the &lt;em&gt;kind&lt;/em&gt; of content being read here, so much as the way it is being read.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Note that I am not crediting Firefox 1.0 with &lt;em&gt;creating&lt;/em&gt; the tabbed browser—only with popularizing it. That distinction matters.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Excepting having multiple browser windows open, which I am sure people did—but to a much lesser extent.&lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Yes, yes, browser history and re-open closed tab commands. But the &lt;em&gt;experience&lt;/em&gt; of those is different, and that’s what we’re talking about here.&lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 26 Mar 2014 20:00:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-03-26:2014/the-end-of-surfing.html</guid><category>design</category><category>software development</category></item></channel></rss>