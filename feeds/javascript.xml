<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Krycho</title><link>http://www.chriskrycho.com/</link><description></description><atom:link href="http://www.chriskrycho.com/feeds/javascript.xml" rel="self"></atom:link><lastBuildDate>Sat, 23 Apr 2016 10:06:00 -0400</lastBuildDate><item><title>2016-04-23 10:06</title><link>http://www.chriskrycho.com/2016/2016-04-23-1006.html</link><description>&lt;p&gt;I‚Äôve been working for a few weeks now on what has ended up being a much larger feature than I expected. &lt;a href="https://github.com/AlDanial/cloc/"&gt;CLOC&lt;/a&gt; tells me it‚Äôs a +1,320-lines-of-code change. But of those, 951 are &lt;em&gt;tests&lt;/em&gt;. As it should be when writing JavaScript.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 23 Apr 2016 10:06:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-04-23:2016/2016-04-23-1006.html</guid><category>software development</category><category>javascript</category></item><item><title>2016-04-21 20:03</title><link>http://www.chriskrycho.com/2016/2016-04-21-2003.html</link><description>&lt;p&gt;Just finished a massive cleanup of about 4000 lines of an AngularJS codebase. It‚Äôs not &lt;em&gt;amazing&lt;/em&gt;, but it‚Äôs a heck of a lot easier to deal with now.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 21 Apr 2016 20:03:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-04-21:2016/2016-04-21-2003.html</guid><category>software development</category><category>angularjs</category><category>javascript</category></item><item><title>2016-04-19 17:44</title><link>http://www.chriskrycho.com/2016/2016-04-19-1744.html</link><description>&lt;p&gt;I still love EmberJS‚Äîbut if I have one complaint, it‚Äôs that it‚Äôs &lt;em&gt;slightly&lt;/em&gt; too heavy on convention-based magic. I want it to be a little more explicit, so that I can have a little more insight into what it‚Äôs going. Yes, even if that means a little more boilerplate. Explicit is better than implicit.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 19 Apr 2016 17:44:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-04-19:2016/2016-04-19-1744.html</guid><category>javascript</category><category>emberjs</category><category>software development</category></item><item><title>2016-04-14 14:54</title><link>http://www.chriskrycho.com/2016/2016-04-14-1454.html</link><description>&lt;p&gt;Things I want basically &lt;em&gt;all the time&lt;/em&gt; when writing JavaScript:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strong types&lt;/li&gt;
&lt;li&gt;enums with values (tagged unions)&lt;/li&gt;
&lt;li&gt;pattern-matching&lt;/li&gt;
&lt;li&gt;immutability (more easily than with &lt;code&gt;Object.freeze&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;actual constants (not just fixed bindings like &lt;code&gt;const&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically: an ML, I guess.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 14 Apr 2016 14:54:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-04-14:2016/2016-04-14-1454.html</guid><category>javascript</category><category>programming languages</category><category>software development</category></item><item><title>2016-04-14 11:00</title><link>http://www.chriskrycho.com/2016/2016-04-14-1100.html</link><description>&lt;p&gt;After looking at &lt;a href="http://elm-lang.org"&gt;Elm&lt;/a&gt; a little, and discovering it doesn‚Äôt have &lt;a href="https://www.haskell.org"&gt;Haskell&lt;/a&gt;-style &lt;a href="http://learnyouahaskell.com/types-and-typeclasses#typeclasses-101"&gt;typeclasses&lt;/a&gt; (&lt;em&gt;a la&lt;/em&gt; &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;‚Äôs &lt;a href="https://doc.rust-lang.org/book/traits.html"&gt;traits&lt;/a&gt;), I was a bit disappointed. Then I discovered &lt;a href="http://www.purescript.org"&gt;PureScript&lt;/a&gt;, which &lt;em&gt;does&lt;/em&gt;. Intrigued all over again.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 14 Apr 2016 11:00:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-04-14:2016/2016-04-14-1100.html</guid><category>programming languages</category><category>javascript</category><category>purescript</category><category>elm</category></item><item><title>2016-04-11 08:46</title><link>http://www.chriskrycho.com/2016/2016-04-11-0846.html</link><description>&lt;p&gt;Betting I‚Äôm not the only one who thinks it a little weird that the &lt;code&gt;Event.target&lt;/code&gt; in the DOM APIs is the &lt;em&gt;source&lt;/em&gt; of the event.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 11 Apr 2016 08:46:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-04-11:2016/2016-04-11-0846.html</guid><category>software development</category><category>javascript</category></item><item><title>2016-04-09 10:19</title><link>http://www.chriskrycho.com/2016/2016-04-09-1019.html</link><description>&lt;p&gt;It is utterly infuriating how many parts of the DOM API are ‚Äúarray-like‚Äù but don‚Äôt have the basic &lt;code&gt;Array&lt;/code&gt; API actually attached. Want to iterate over a &lt;code&gt;HTMLCollection&lt;/code&gt;? You get to use a &lt;code&gt;for&lt;/code&gt; loop with an index! Lucky you! üòê&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 09 Apr 2016 10:19:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-04-09:2016/2016-04-09-1019.html</guid><category>javascript</category><category>software development</category></item><item><title>2016-04-07 08:30</title><link>http://www.chriskrycho.com/2016/2016-04-07-0830.html</link><description>&lt;p&gt;The more time I spend with languages with pattern matching and expressive type systems, the more I feel frustrated by things I just can‚Äôt express in JavaScript. If I could write Ember in something &lt;a href="http://elm-lang.org"&gt;Elm&lt;/a&gt;‚Ä¶ I think I‚Äôd be &lt;em&gt;giddy&lt;/em&gt;.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 07 Apr 2016 08:30:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-04-07:2016/2016-04-07-0830.html</guid><category>software development</category><category>programming languages</category><category>javascript</category></item><item><title>2016-04-06 12:28</title><link>http://www.chriskrycho.com/2016/2016-04-06-1228.html</link><description>&lt;p&gt;&lt;em&gt;Why isn‚Äôt this updating?&lt;/em&gt; :looks around for five minutes: Oh. It‚Äôs because I‚Äôm just serving an old version, and don‚Äôt have it rebuilding as I make changes.&lt;/p&gt;
&lt;p&gt;Yeah‚Ä¶&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 06 Apr 2016 12:28:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-04-06:2016/2016-04-06-1228.html</guid><category>javascript</category><category>software development</category></item><item><title>2016-03-14 08:49</title><link>http://www.chriskrycho.com/2016/2016-03-14-0849.html</link><description>&lt;p&gt;Apparently, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger"&gt;&lt;code&gt;debugger;&lt;/code&gt;&lt;/a&gt; is a thing. My life would have been &lt;em&gt;so&lt;/em&gt; much easier if I had known about this sooner than ten minutes ago.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 14 Mar 2016 08:49:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2016-03-14:2016/2016-03-14-0849.html</guid><category>javascript</category><category>software development</category></item><item><title>2016-03-09 12:36</title><link>http://www.chriskrycho.com/2016/2016-03-09-1236.html</link><description>&lt;p&gt;Pro tip for tracking down oddities with &lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt; during testing: &lt;code&gt;ember test --serve --filter '&amp;lt;some pattern&amp;gt;'&lt;/code&gt; is &lt;em&gt;great&lt;/em&gt;. E.g. &lt;code&gt;ember t -s --filter 'Unit'&lt;/code&gt; for just unit tests.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 09 Mar 2016 12:36:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2016-03-09:2016/2016-03-09-1236.html</guid><category>software development</category><category>javascript</category><category>emberjs</category></item><item><title>2016-03-06 12:21</title><link>http://www.chriskrycho.com/2016/2016-03-06-1221.html</link><description>&lt;p&gt;Seriously. All I want to do is transpile ES6 to ES5 and make it runnable in browser. And I need Browserify or Webpack for this? &lt;em&gt;sigh&lt;/em&gt;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 06 Mar 2016 12:21:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2016-03-06:2016/2016-03-06-1221.html</guid><category>software development</category><category>javascript</category></item><item><title>2016-03-06 11:15</title><link>http://www.chriskrycho.com/2016/2016-03-06-1115.html</link><description>&lt;p&gt;Trying to do a little tweaking with the lightweight scripts I use on this site. Trying to automate things with Babel, browser imports, etc.&lt;/p&gt;
&lt;p&gt;This is still far, far worse than it should be in 2016. Here‚Äôs hoping it‚Äôs (substantially!) better a year from now.&amp;quot;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 06 Mar 2016 11:15:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2016-03-06:2016/2016-03-06-1115.html</guid><category>javascript</category><category>software development</category></item><item><title>2016-03-04 08:51</title><link>http://www.chriskrycho.com/2016/2016-03-04-0851.html</link><description>&lt;p&gt;I ran into a &lt;a href="https://medium.com/javascript-scene/how-to-fix-the-es6-class-keyword-2d42bb3f4caf#.syiwijz9h"&gt;Medium post&lt;/a&gt; arguing against ES6‚Äôs &lt;code&gt;class&lt;/code&gt; implementation, and got linked to &lt;a href="http://martinfowler.com/bliki/CallSuper.html"&gt;this argument&lt;/a&gt; against &lt;code&gt;super()&lt;/code&gt;. &lt;em&gt;Strongly concur.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inheritance is fragile. Useful when appropriate, but fragile. Prefer composition.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 04 Mar 2016 08:51:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2016-03-04:2016/2016-03-04-0851.html</guid><category>software development</category><category>javascript</category></item><item><title>The Future of JavaScript</title><link>http://www.chriskrycho.com/2016/the-future-of-javascript.html</link><description>&lt;p&gt;I gave a short tech talk at my new employer &lt;a href="http://www.olo.com"&gt;Olo&lt;/a&gt; today, covering a number of the changes current and forthcoming in ECMAScript 2015 and later. Alas, I ran out of time in preparation and didn‚Äôt get to cover everything I wanted‚ÄîI would have liked very much to cover modules, and to cover fat-arrow-functions in more depth than I did. I‚Äôll look forward to hopefully giving further tech talks at Olo in the future, and perhaps giving this one, expanded and finished out a bit, elsewhere. (If you‚Äôd like me to give a talk, including this one, just let me know!) In the meantime, you can take a look at the &lt;a href="//www.chriskrycho.com/talks/es-future-olo"&gt;slides&lt;/a&gt;, which I think will be helpful and interesting!&lt;/p&gt;
&lt;p&gt;And yes, there &lt;em&gt;were&lt;/em&gt; a lot of really delightful &lt;em&gt;Doctor Who&lt;/em&gt; references in this talk. Because &lt;em&gt;of course&lt;/em&gt; there were!&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 02 Mar 2016 12:30:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2016-03-02:2016/the-future-of-javascript.html</guid><category>talks</category><category>software development</category><category>programming languages</category><category>javascript</category></item><item><title>2016-02-25 07:58</title><link>http://www.chriskrycho.com/2016/2016-02-25-0758.html</link><description>&lt;p&gt;I have an irrational-but-ridiculously-strong desire to build an Atom package that is a tiny JavaScript wrapper around a Rust implementation. Just because.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 25 Feb 2016 07:58:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2016-02-25:2016/2016-02-25-0758.html</guid><category>software development</category><category>programming languages</category><category>rust</category><category>javascript</category></item><item><title>2016-02-20 08:23</title><link>http://www.chriskrycho.com/2016/2016-02-20-0823.html</link><description>&lt;p&gt;Of course, there‚Äôs another challenge with &lt;a href="http://www.chriskrycho.com/2016/2016-02-20-0814.html"&gt;picking back up&lt;/a&gt;: I‚Äôve gotten spoiled by having &lt;a href="https://babeljs.io/docs/learn-es2015/"&gt;ES2015&lt;/a&gt; available and want to add it to this Angular project.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 20 Feb 2016 08:23:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2016-02-20:2016/2016-02-20-0823.html</guid><category>software development</category><category>javascript</category></item><item><title>HTML5 Location, &lt;base&gt;, and SVG</title><link>http://www.chriskrycho.com/2015/html5-location-base-and-svg.html</link><description>&lt;p&gt;For quite some time, I have been frustrated by a bug in HolyBible.com: Firefox would not render SVGs using the &lt;code&gt;&amp;lt;use xlink:xhref=&amp;quot;#some-SVG-ID&amp;quot;&amp;gt;&amp;lt;/use&amp;gt;&lt;/code&gt; pattern. Today, I set aside my ongoing work on new user-facing functionality and dedicated what working time I had to hunting down the cause of this and fixing it at last.&lt;/p&gt;
&lt;p&gt;I was surprised to find the culprit: the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag. If you don‚Äôt know what the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag is, you‚Äôre not alone. It is &lt;em&gt;not&lt;/em&gt; used all that much in general, and I had never actually seen it on a site before starting on this project last year.&lt;/p&gt;
&lt;p&gt;So what went wrong? How do these two things play together?&lt;/p&gt;
&lt;p&gt;I am using (and reusing) SVG items throughout the HolyBible.com interface, taking advantage of the ability to define symbols and reference them with the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag, like so:&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;svg version=&amp;quot;1.1&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot; xmlns:ev=&amp;quot;http://www.w3.org/2001/xml-events&amp;quot; style=&amp;quot;display: none&amp;quot;&amp;gt;
  &amp;lt;symbol id=&amp;quot;logo-shape&amp;quot; viewBox=&amp;quot;0 0 256 256&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Logo&amp;lt;/title&amp;gt;
    &amp;lt;desc&amp;gt;The HolyBible.com logo: sunrise breaking over an open book (the Bible).&amp;lt;/desc&amp;gt;
    &amp;lt;path id=&amp;quot;logo-light&amp;quot; d=&amp;quot;M172.1 116.3l5.1-4.1-12.5-.5 32-26.3-41.4 18.4 11-20.1L148 96l12.2-37.5L138.8 91l.1-36.2-10.3 34.4L114 36.1l4.3 54.9-22.2-34.9 13 39.9-18.3-12.4 11 20.1-42.5-19.2 32.8 26.9-10.4.8 4.4 3.9c13.1-1.6 27.4-2.7 42.4-2.7 15.4 0 30.1 1.2 43.6 2.9z&amp;quot;/&amp;gt;
    &amp;lt;path id=&amp;quot;logo-book&amp;quot; d=&amp;quot;M199.9 219.9c-47.4-9.8-96.4-9.8-143.8 0-6-28.9-12-57.7-17.9-86.6 59.3-12.3 120.4-12.3 179.7 0-6 28.9-12 57.8-18 86.6z&amp;quot;/&amp;gt;
  &amp;lt;/symbol&amp;gt;
&amp;lt;/svg&amp;gt;

&amp;lt;!-- somewhere else on the page --&amp;gt;
&amp;lt;svg&amp;gt;
  &amp;lt;use xlink:href=&amp;quot;#logo-shape&amp;quot;&amp;gt;&amp;lt;/use&amp;gt;
&amp;lt;/svg&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Throughout all my early prototyping, this worked perfectly across all modern browsers. (For more, see &lt;a href="https://css-tricks.com/svg-sprites-use-better-icon-fonts/"&gt;CSS Tricks&lt;/a&gt;.) Now, when I started moving from the prototype phase into actually building the application in Angular last fall, I learned that you have to set the base URL for the application using the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag to use the HTML5 Location API with Angular 1.x. If you want URL-based, rather than &lt;code&gt;#&lt;/code&gt;-based navigation in an Angular app, you need this. Following the recommendation of whatever documentation and tutorials I found, I set it so:&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;base href=&amp;quot;/&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this was the recommendation I saw in every bit of documentation and every tutorial, so I assumed it would have no problems. As it turns it, that‚Äôs not the case. (This is a &lt;a href="http://www.chriskrycho.com/2015/how-to-build-a-single-page-app-api-right.html"&gt;recurring theme&lt;/a&gt; in my experience with Angular.) In Chrome, Safari, and IE9+, this works exactly as expected. In Firefox, however, it does &lt;em&gt;not&lt;/em&gt;. The use of the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag changes the behavior of &lt;code&gt;#&lt;/code&gt;-based URLs on a page. Specifically, it makes it so that if you‚Äôre at a URL that &lt;em&gt;isn‚Äôt&lt;/em&gt; the base route, anchor links don‚Äôt behave as expected. In order to make the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag as expected, we would have to use the same URL as the base tag. Among other things, this would require making sure that any place we used the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag, we would have to set that‚Äînot exactly a good idea, given that it would entail an awful lot of changes if the base URL were ever changed.&lt;/p&gt;
&lt;p&gt;What if, instead, we did this?&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;base href=&amp;quot;&amp;#39; + document.location.origin + &amp;#39;&amp;quot; /&amp;gt;&amp;#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, when the page renders, it writes the document location based on the &lt;em&gt;current&lt;/em&gt; location. The URL history still behaves as expected with Angular, but the relative URLs for IDs behave as expected in Firefox again, while not breaking the behavior in any other browsers.&lt;/p&gt;
&lt;p&gt;But‚Ä¶ then you‚Äôll navigate to another page, and Firefox will be back to not working.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/angular/angular.js/issues/8934#issuecomment-56568466"&gt;solution&lt;/a&gt;, it turns out, only came into being after I‚Äôd done the initial implementation, and I have no idea how much later it found its way into the Angular docs. However, even though it now &lt;em&gt;exists&lt;/em&gt; in the docs, it‚Äôs by no means obvious why you should do it this way, and certainly no mention of SVG! This might not seem odd to you‚Ä¶ but it should, given that the only reason that Angular introduced this API change was to account for &lt;em&gt;exactly this issue&lt;/em&gt;.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the Angular docs note, leaving out the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag means all your URLs have to be absolute if you want to use HTML5 location and the &lt;code&gt;$locationProvider&lt;/code&gt;. If you want to use SVGs with &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; and Firefox, though, that‚Äôs what you have to do (and therefore that‚Äôs what I‚Äôm doing).&lt;/p&gt;
&lt;p&gt;Fun times, right?&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The closest it gets is this reference:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Links that only contain a hash fragment (e.g. &lt;code&gt;&amp;lt;a href=&amp;quot;#target&amp;quot;&amp;gt;&lt;/code&gt;) will only change &lt;code&gt;$location.hash()&lt;/code&gt; and not modify the url otherwise. This is useful for scrolling to anchors on the same page without needing to know on which page the user currently is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even this, however, only &lt;em&gt;hints&lt;/em&gt; at the root of the SVG issue.&lt;a href="#fnref1"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 02 Jul 2015 22:00:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2015-06-20:2015/html5-location-base-and-svg.html</guid><category>software development</category><category>angularjs</category><category>javascript</category></item><item><title>How to Build a Single-Page App API Right</title><link>http://www.chriskrycho.com/2015/how-to-build-a-single-page-app-api-right.html</link><description>&lt;p&gt;When I was first working on HolyBible.com, I struggled for quite a while to wrap my head around the right way to structure its API‚Äîand in truth, I actually didn‚Äôt come up with what I would call the &lt;em&gt;right&lt;/em&gt; solution. I came up with a &lt;em&gt;working&lt;/em&gt; solution, and the site performs all right, most of the time. However, our goal as developers shouldn‚Äôt be ‚Äúall right, most of the time.‚Äù It should be ‚Äúreally well, all the time.‚Äù A big part of what I did wrong came from the bad advice I found in reading up on the issue along the way. This is my shot at helping you, dear reader, avoid making the same mistake.&lt;/p&gt;
&lt;section id="the-challenge" class="level2"&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;When building a client-side application, we need to get the data for each view so that we can render it. In the case of HolyBible.com, that means everything from actual Bible text to study Bible notes, about pages, etc. The question is &lt;em&gt;how&lt;/em&gt; to do this: we need to be able to load an actual page from our server, and we need a way to request data (rather than whole pages) from the server.&lt;/p&gt;
&lt;p&gt;(More experienced developers already know where this is going: that last sentence there has the key to this whole thing. I know. But the internet &lt;em&gt;doesn‚Äôt.&lt;/em&gt; I learned this the hard way.)&lt;/p&gt;
&lt;section id="the-mistake" class="level3"&gt;
&lt;h3&gt;The mistake&lt;/h3&gt;
&lt;p&gt;Here‚Äôs the mistake I made: I built the Bible data API as (essentially) a &lt;em&gt;single&lt;/em&gt; endpoint. When I went looking for advice on how to build this in Angular and Node/Express, every single tutorial or blog post I found outlined the same basic solution: routes for your data endpoints, and catch-all route that returns the basic frame page for everything else. So, for HolyBible.com, that would come out with route matchers for e.g. &lt;code&gt;/data/gen.1.1&lt;/code&gt;, and for any other specific routes needed (for other views, static resources, etc.), with a default behavior of just dropping a static, basically empty template at the catchall &lt;code&gt;*&lt;/code&gt; route. Then, once the application has loaded, it can inspect the URL and load the relevant data.&lt;/p&gt;
&lt;p&gt;This works. It‚Äôs exactly what I did on HolyBible.com, in fact. But it‚Äôs &lt;em&gt;slow&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Don‚Äôt get me wrong: the time until the initial page load is actually relatively quick (though I plan to improve it substantially over the next couple months). The real problem is that the initial page load &lt;em&gt;doesn‚Äôt include any content&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;hate&lt;/em&gt; this. That‚Äôs why people are on the site: not to see my neat skills with JavaScript, just to read the Bible. And they have to wait, because once the page &lt;em&gt;does&lt;/em&gt; load, Angular has to spin up the full application, see what content &lt;em&gt;should&lt;/em&gt; have been loaded, and request it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solution" class="level3"&gt;
&lt;h3&gt;The solution&lt;/h3&gt;
&lt;p&gt;Don‚Äôt write &lt;em&gt;one&lt;/em&gt; API. Write &lt;em&gt;two&lt;/em&gt;. They should be structured nearly identically, but one of them will be a &lt;em&gt;page&lt;/em&gt; API endpoint, and one will be a &lt;em&gt;data&lt;/em&gt; API endpoint. In the context of HolyBible.com, here‚Äôs how that would play out.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; One endpoint would be based purely on the standard URL, something like &lt;code&gt;holybible.com/jhn.3.16&lt;/code&gt;. The other would be to retrieve a set of &lt;em&gt;data&lt;/em&gt; associated with a given address, like &lt;code&gt;holybible.com/data/jhn.3.16&lt;/code&gt;. This is only a little different from the approach suggested above, but that small difference matters‚Äîin fact, it matters a &lt;em&gt;lot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Instead of having the &lt;code&gt;/jhn.3.16&lt;/code&gt; route get handled by a catchall &lt;code&gt;*&lt;/code&gt; route on the back end, it gets its own API endpoint, which looks for URLS of this shape and hands back a full page. That API endpoint is responsible to actually render the content of the page appropriately‚Äîin this case, with something like the whole chapter of John 3.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;That&lt;/em&gt; gets handed back to the browser, so the very first thing the user sees is not a blank page while the JavaScript framework spins up and requests data, but rather &lt;em&gt;the Bible text they asked for in the first place&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Meanwhile, the JavaScript framework &lt;em&gt;can&lt;/em&gt; spin up, and load any required session data, etc. and start managing the UI like normal. Once we get to this point, the framework can go ahead and request a data payload from the &lt;code&gt;/data/&amp;lt;reference&amp;gt;&lt;/code&gt; endpoint. So, for example, if there is a navigation control on the page (as on HolyBible.com and indeed most sites), clicking to navigate to Job 14 could, instead of requesting &lt;code&gt;/job.14.4&lt;/code&gt;, fetch the data from the other endpoint by running an AJAX request to &lt;code&gt;/data/job.14.4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The backend thus supplies &lt;em&gt;both&lt;/em&gt; a &lt;code&gt;/&amp;lt;resource&amp;gt;&lt;/code&gt; and a &lt;code&gt;/data/&amp;lt;resource&amp;gt;&lt;/code&gt; route. This might seem redundant, but we‚Äôve just seen why it isn‚Äôt, Moreover, if you have any logic that needs to be in place‚Äîin our example here, a Bible reference parser, for example, to decide what content should be supplied‚Äîyou can easily reuse it between the two routes. The differences is simply in the form of the data returned: is it a fully-rendered template, or just the data?&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="so-what" class="level2"&gt;
&lt;h2&gt;So what?&lt;/h2&gt;
&lt;p&gt;This approach has two big advantages over the catch-all approach that was frequently recommended in e.g.¬†Angular SPA tutorials I read.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It‚Äôs &lt;em&gt;progressive enhancement&lt;/em&gt;. If the JavaScript fails, or the user has it disabled, or it fails to load because it‚Äôs loaded asynchronously, the user still gets the page they asked for. Moreover, as long as the page content is build carefully (links built appropriately for other content, and so on), the entire application could continue to work even if the JavaScript &lt;em&gt;never&lt;/em&gt; becomes available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It‚Äôs &lt;em&gt;performant&lt;/em&gt;. Loading the content this way will be &lt;em&gt;much&lt;/em&gt; faster than the standard approach recommended for single-page apps. As noted above, it gets the content to the user immediately, then lets the JavaScript UI bits come into play. Since future page loads can take advantage of both caching and smaller data payloads, the whole thing can actually be faster than either a pure client-side &lt;em&gt;or&lt;/em&gt; a pure server-side approach. That is, once the client-side application is running, it can just update its views with data delivered via AJAX, rather than reloading the whole page. But &lt;em&gt;before&lt;/em&gt; that, the user doesn‚Äôt have to wait to see something useful until the JavaScript framework spins up.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It‚Äôs not often an approach gives you progressive enhancement and actually increases the performance of an application, but this one does. Better yet, you can apply this in just about any framework: it‚Äôs equally applicable to AngularJS with ExpressJS, Backbone with Rails, Ember with Django, Aurelia with Phoenix, or any other combination you come up with.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note: this is &lt;em&gt;not&lt;/em&gt; the actual API structure of HolyBible.com, or even particularly close to it. Remember, I learned everything I‚Äôm writing here by doing it &lt;em&gt;wrong&lt;/em&gt;.&lt;a href="#fnref1"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Or possibly a section which constitutes a semantic block of data. I have some thoughts on chunking Bible data semantically rather than by chapter and verse for this kind of thing. That‚Äôs another post for another day, though.&lt;a href="#fnref2"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 09 Jun 2015 22:16:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2015-06-09:2015/how-to-build-a-single-page-app-api-right.html</guid><category>software development</category><category>javascript</category></item><item><title>Lessons Learned</title><link>http://www.chriskrycho.com/2015/lessons-learned.html</link><description>&lt;p&gt;Since mid July 2015, I have been working on a complete redesign and re-build of &lt;a href="//holybible.com"&gt;HolyBible.com&lt;/a&gt;. The good folks at &lt;a href="//prts.edu"&gt;Puritan Reformed Theological Seminary&lt;/a&gt; who own the site wanted to replace its previous content with a Bible reading tool. While there‚Äôs still a lot to wrap up, the project is &lt;em&gt;nearing&lt;/em&gt; its conclusion, and I thought I‚Äôd note a few things I‚Äôve learned (in some cases, learned &lt;em&gt;again&lt;/em&gt;) along the way. I want to say up front, lest these be taken the wrong way: I‚Äôm extremely proud of the work I‚Äôve done, and the application I‚Äôve delivered &lt;em&gt;does&lt;/em&gt; work to the specifications I was hired to meet. More than that, it does it well. But, of course, it could do it &lt;em&gt;better&lt;/em&gt;. The following thoughts are therefore not, ‚ÄúHow I failed‚Äù but rather ‚ÄúHow I will do this &lt;em&gt;even better&lt;/em&gt; next time around.‚Äù&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Single page apps are great, but not always the right choice.&lt;/em&gt; I made the decision, based on my expectations and understandings of what I would need, to develop the site as a single-page web application. This was a mistake. Not the worst mistake ever: it has its upsides, including performance &lt;em&gt;once the app spins up&lt;/em&gt;, but for the kind of content I have here, I would take a different tack today. Better in this case to deliver static content and &lt;em&gt;update&lt;/em&gt; it dynamically as appropriate than to try to load all the content dynamically every time.&lt;/p&gt;
&lt;p&gt;At a technical level, that would probably mean supplementing standard HTML with &lt;a href="//backbonejs.org"&gt;Backbone&lt;/a&gt; instead of developing it as a single-page app in &lt;a href="//angularjs.org"&gt;Angular&lt;/a&gt;. For the backend, while I did it in Node.js and that would work fine, I‚Äôd probably do a straight Django app (especially with a few of the goals I learned about &lt;em&gt;after&lt;/em&gt; the project was well along in development).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Progressive enhancement or graceful degradation are hard in web applications, but they still matter.&lt;/em&gt; In the past, I‚Äôve always taken a hard line on making sure things either degrade gracefully or are simply enhanced by JavaScript content. In the architecture decisions I made for this app, I failed to take that into account (largely because I thought it would just &lt;em&gt;need&lt;/em&gt; to work as a web app, but see above). I regret that enormously at this point; it would be much better in this particular case to have content available even if the additional functionality doesn‚Äôt work. Even if you &lt;em&gt;are&lt;/em&gt; doing something where you are building an &lt;em&gt;app&lt;/em&gt;, finding ways to make it work on poor connections, older browsers, etc. matters. I‚Äôm still thinking a &lt;em&gt;lot&lt;/em&gt; about the best way to do this in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;More popular doesn‚Äôt mean better.&lt;/em&gt; Angular has a ton of traction and uptake, and that was deceptive early on. I won‚Äôt so easily be fooled in the future. Angular is so very popular in part because Google can put serious money behind its development‚Äîand its marketing. But it‚Äôs &lt;em&gt;not&lt;/em&gt; the best for many applications; if you‚Äôre not in the business of developing your own custom framework, it‚Äôs not even &lt;em&gt;close&lt;/em&gt; to the best. Use Ember or Knockout or any number of other full-stack frameworks rather than a meta-framework.&lt;/p&gt;
&lt;p&gt;How to avoid making that mistake? Well, for my part since then, I‚Äôve learned to look not just as the &lt;em&gt;quantity&lt;/em&gt; of material in a given community, but its &lt;em&gt;quality&lt;/em&gt;. For example, &lt;a href="//emberjs.com"&gt;Ember&lt;/a&gt; has &lt;em&gt;incredible&lt;/em&gt; documentation (far better than Angular‚Äôs), and they also have a much clearer vision and a more dependable approach to development (strict semantic versioning, etc.). Had I taken the time to read &lt;em&gt;both&lt;/em&gt; sets of docs more carefully and think through the consequences of their designs more thoroughly, I could have recognized this before starting. Next time, I will do just that.&lt;/p&gt;
&lt;p&gt;I will also look at the way the community behaves. The Ember community is &lt;em&gt;far&lt;/em&gt; friendlier for newcomers from what I‚Äôve seen than the Angular community‚Äîno slam meant on the Angular crowd, but the Ember folks are just doing that really well. That matters, too. (I can‚Äôt speak for other communities, of course; these are just the groups I‚Äôve watched the most.)&lt;/p&gt;
&lt;p&gt;All in all, Ember would have been the better fit between these two (even though, as noted above, it also wouldn‚Äôt have been the &lt;em&gt;best&lt;/em&gt; fit).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Unit tests really are the best.&lt;/em&gt; I did a vast majority of this project with unit tests‚Äîthe first time I‚Äôve ever been able to do that for a whole project. In other projects, I‚Äôve been able to do it for parts, but never this much. It saved my bacon a &lt;em&gt;lot&lt;/em&gt;. Where I got in a hurry and felt like I didn‚Äôt have time to write the tests, I (inevitably and predictably!) ended up spending a lot of time chasing down hard-to-isolate bugs‚Äîtime I could have avoided by writing well-tested (and therefore better-factored) code in the first place. Lesson learned &lt;em&gt;very&lt;/em&gt; thoroughly. Server- and client-side unit tests are &lt;em&gt;really&lt;/em&gt; good. They‚Äôre also sometimes &lt;em&gt;hard&lt;/em&gt;; getting mocks set up correctly for dealing with databases, etc. can take a while. That difficulty pays for itself, though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Unit tests &lt;strong&gt;really&lt;/strong&gt; don‚Äôt replace API documentation.&lt;/em&gt; I have seen people advocate test-driven-development as a way of obviating the need to do major documentation of an API. This is, in a word, ridiculous. Having to read unit tests if you want to remember how you structured an API call is a pain in the neck. Don‚Äôt believe it. Design your API and document it, &lt;em&gt;then&lt;/em&gt; do test-driven development against that contract.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Sometimes ‚Äògood enough‚Äô is enough.&lt;/em&gt; There is always more to be done, and inevitably you can see a thousand things that could be improved. But ‚Äògood‚Äô shipping code is far more valuable than ‚Äòperfect‚Äô code that never ships. You should never ship &lt;em&gt;bad&lt;/em&gt; code, but sometimes you do have to recognize ‚Äògood enough‚Äô and push it out the door.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Full-stack development is fun, but it‚Äôs also really hard.&lt;/em&gt; I wrote every scrap of code in HolyBible.com proper (though of course it relies on a lot of third-party code). It was very, very difficult to manage that all by myself; it‚Äôs a lot to hold in one‚Äôs head. (One of the reasons I chose Node was because keeping my implementation and testing all in one language helped reduce that load somewhat.) Would I do it again? Sure. But very much chastened about the difficulties involved. It has been enormously rewarding, and I &lt;em&gt;like&lt;/em&gt; being a full-stack developer. But it‚Äôs a lot of work, and now I know more clearly just how much.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I could say a great deal more about the technical side of things especially, but my biggest takeaway here is that a lot of the hardest and most important work in developing software has nothing to do with the code itself. Architecture and approach shape &lt;em&gt;far&lt;/em&gt; more than the implementation details (even if those details still matter an awful lot). And popularity is not at all the same as either &lt;em&gt;quality&lt;/em&gt; or (especially) &lt;em&gt;suitability for a given task&lt;/em&gt;. In the future, I will be better equipped for the necessary kinds of evaluation, and will hopefully make still better decisions accordingly.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 12 Apr 2015 13:49:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2015-04-12:2015/lessons-learned.html</guid><category>software development</category><category>javascript</category><category>angularjs</category></item><item><title>Unsurprisingly, In Flux</title><link>http://www.chriskrycho.com/2015/unsurprisingly-in-flux.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;This started as a &lt;a href="https://alpha.app.net/chriskrycho/post/57102562"&gt;series of posts&lt;/a&gt; on App.net. I &lt;a href="http://www.chriskrycho.com/2014/a-few-theses-on-blogging.html"&gt;resolved&lt;/a&gt; a while ago that if I was tempted to do that, I should just write a blog post instead. I failed at that resolution, but at a friend‚Äôs &lt;a href="https://alpha.app.net/jws/post/57108281"&gt;suggestion&lt;/a&gt;, am adapting it into a blog post anyway. You can see the posts that prompted it &lt;a href="https://alpha.app.net/keita/post/57096585"&gt;here&lt;/a&gt; and &lt;a href="https://alpha.app.net/jws/post/57096838"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The state of JavaScript frameworks today is a scale, really, from not-at-all-monolithic to totally-monolithic, in roughly this order: Backbone ‚Äì React &amp;amp; Angular ‚Äì Ember ‚Äì Meteor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backbone and related library Underscore are really collections of common JS tools and patterns you can use to write apps, but they‚Äôre not &lt;em&gt;frameworks&lt;/em&gt;, per se. You‚Äôll write all your own boilerplate there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React and Angular supply much &lt;em&gt;more&lt;/em&gt; of the functionality, but Angular is a ‚Äúmeta-framework‚Äù that aims to do &lt;em&gt;some&lt;/em&gt; boilerplate but let you construct your own custom app framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is very powerful, but it‚Äôs kind of like Git: wires are exposed; you have to understand a &lt;em&gt;lot&lt;/em&gt; about the internals to get it to do what you want. Its routing functionality is pretty limited out of the box, too‚Äîso much so that there‚Äôs a near-standard third-party router.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React, as I understand it, supplies a paradigm and associated tools oriented primarily at view state management, though with capabilities via extensions for routing, etc. These tools are &lt;em&gt;extremely&lt;/em&gt; powerful for performance in particular. It‚Äôs not a full framework, and the docs expressly note that you can &lt;em&gt;just&lt;/em&gt; use React for the view layer with other tools if you want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In any case, Angular and React do &lt;em&gt;different&lt;/em&gt; things from each other, but both do substantially more than Backbone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember is a full framework, strongly emphasizing shared conventions (with a lot of common developers from Rails). It‚Äôs perhaps less adaptable than React or Angular, but is much more full-featured; you have very little boilerplate to do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meteor is like Ember, but does server-side Node as well as client-side stuff, with the goal being to minimize code duplication, sharing assets as much as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of all of those, Ember has easily (easily!) the best-explained roadmap, most articulate leadership, and best development path. They are also aggressively adopting the best features of other frameworks wherever it makes sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is currently in flux, as Google has announced Angular 2.0 will be basically a completely different framework; there will be &lt;em&gt;no&lt;/em&gt; direct migration path for Angular 1.x apps to Angular 2.0+. Total rewrite required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember uses a steady 6-week release schedule with very careful regression testing and semantic versioning, with clear deprecation notices and upgrade paths, and is therefore both rapidly iterating &lt;em&gt;and&lt;/em&gt; relatively stable for use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you just need a set of tools for enhance functionality on otherwise relatively static pages, Backbone+Underscore is a great combo. If you already have a bunch of things in place but want a dedicated view layer, React is good.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you‚Äôre writing a new, full-on web &lt;em&gt;application&lt;/em&gt; (SPA, or organized in whatever other way), I think Ember is the very clear winner at this point. I have good confidence in their leadership and they‚Äôre firing on all cylinders.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Angular, &lt;a href="https://alpha.app.net/mikehoss"&gt;@mikehoss&lt;/a&gt; &lt;a href="https://alpha.app.net/mikehoss/post/57105656"&gt;posted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record they are doing that to make it more mobile-friendly. The Ang1 has abysmal performance on mobile. Besides a time machine, this maybe the best option. And Mi≈°ko is a bit of a jerk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can‚Äôt speak to his comment about Mi≈°ko (Mi≈°ko Hevery, one of the leads on AngularJS), but I agree about Angular itself: the rewrite needs to happen. Angular 1.x is a mess‚Äîas are its docs. It‚Äôs just not a good time to be using 1.x for any new projects.&lt;/p&gt;
&lt;p&gt;I‚Äôll add to these points that I‚Äôve used Angular for the last 9 months on HolyBible.com development. As I noted: the documentation is pretty rough, and in a lot of cases you really do have to understand what the framework is doing and how before you can get it to do the things you want. This is, in one sense, exactly the &lt;em&gt;opposite&lt;/em&gt; of what I‚Äôm looking for in a framework‚Äîbut it makes sense given Angular‚Äôs goal of being a meta-framework.&lt;/p&gt;
&lt;p&gt;Rather like Git, though, which was originally going to be infrastructure for version control systems which would have their own interface, but eventually just had a ‚Äúgood enough‚Äù interface that we‚Äôre all now stuck with, Angular is being used &lt;em&gt;as&lt;/em&gt; a framework, not just as a &lt;em&gt;meta-framework&lt;/em&gt;, and it‚Äôs unsurprisingly not great for that.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class="editorial"&gt;Take this for what it‚Äôs worth: not the final word (by a long stretch) on JavaScript frameworks, but rather the perspective of one guy who notably &lt;em&gt;hasn‚Äôt used all of the frameworks&lt;/em&gt;, but has spent some time looking at them. Moreover, I haven‚Äôt particularly edited this; it‚Äôs more a summary in the kind of short-form posts that I originally created than a detailed analysis. The only things I‚Äôve done are expand some of the notes on Angular and React, and add the footnote on React.&lt;/i&gt;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; don‚Äôt know a ton about React, but I do think a lot of what I do know about it is cool from a programming perspective. From a designer perspective, however, it‚Äôs a bit of a pain: React‚Äôs ‚ÄúJSX‚Äù domain-specific language is &lt;em&gt;much&lt;/em&gt; less friendly to developers than standard HTML, and therefore than either Ember or Angular, both of which implement their templating via HTML templating languages. There‚Äôs a substantil tradeoff there: React‚Äôs model is interesting not only academically but in practice because of the performance results it produces. It‚Äôs worth note, though, that others have recognized this and are adopting it to varying degrees; notably, Ember is incorporating the idea of minimizing changes to the DOM by keeping track of state and updating only differences, rather than refreshing the whole tree, in the new rendering engine (HTMLBars) they‚Äôre rolling out over the past several and future several releases.&lt;a href="#fnref1"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 28 Aug 2015 19:50:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2015-04-08:2015/unsurprisingly-in-flux.html</guid><category>software development</category><category>javascript</category><category>angularjs</category><category>emberjs</category><category>react</category></item></channel></rss>