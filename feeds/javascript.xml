<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - javascript</title><link>http://www.chriskrycho.com/</link><description></description><lastBuildDate>Wed, 15 Feb 2017 08:32:00 -0500</lastBuildDate><item><title></title><link>http://www.chriskrycho.com/2017/02-15-0832.html</link><description>&lt;p&gt;One of the biggest changes from learning Rust/Elm/F♯/etc. in my JavaScript is that I now think &lt;em&gt;constantly&lt;/em&gt; about what can fail.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 15 Feb 2017 08:32:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-02-15:/2017/02-15-0832.html</guid><category>programming languages</category><category>javascript</category><category>functional programming</category><category>rust</category><category>elm</category><category>fsharp</category></item><item><title>TypeScript keyof Follow-Up</title><link>http://www.chriskrycho.com/2017/typescript-keyof-follow-up.html</link><description>&lt;p&gt;I recently wrote up some neat things you can do with &lt;a href="http://www.chriskrycho.com/2016/keyof-and-mapped-types-in-typescript-21.html"&gt;&lt;code&gt;keyof&lt;/code&gt; and mapped types&lt;/a&gt; in TypeScript 2.1. In playing further with those bits, I ran into some interesting variations on the approach I outlined there, so here we are.&lt;/p&gt;
&lt;p&gt;In the previous post, I concluded with an example …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 03 Jan 2017 20:35:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-01-03:/2017/typescript-keyof-follow-up.html</guid><category>programming languages</category><category>software development</category><category>typescript</category><category>javascript</category></item><item><title>The Itch</title><link>http://www.chriskrycho.com/2016/the-itch.html</link><description>Learning functional programming has been simultaneously wildly new and deeply familiar. It's the answer to questions I've been asking for most of a decade.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 19 Dec 2016 21:45:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-12-19:/2016/the-itch.html</guid><category>software development</category><category>functional programming</category><category>Rust</category><category>JavaScript</category></item><item><title>keyof and Mapped Types In TypeScript 2.1</title><link>http://www.chriskrycho.com/2016/keyof-and-mapped-types-in-typescript-21.html</link><description>&lt;p&gt;In the last few months, I’ve been playing with both &lt;a href="https://flowtype.org"&gt;Flow&lt;/a&gt; and &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; as tools for increasing the quality and reliability of the JavaScript I write at Olo. Both of these are syntax that sits on top of normal JavaScript to add type analysis—basically, a form of &lt;a href="https://en.wikipedia.org/wiki/Gradual_typing"&gt;gradual …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 17 Dec 2016 23:25:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-12-17:/2016/keyof-and-mapped-types-in-typescript-21.html</guid><category>javascript</category><category>typescript</category><category>software development</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/12-16-1645.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;I originally posted this as a &lt;a href="https://twitter.com/chriskrycho/status/809892171063103488"&gt;tweetstorm&lt;/a&gt;, but I’m treating &lt;em&gt;this&lt;/em&gt; as the canonical and adding a tweet to the end of that “topic” linking back here. &lt;a href="http://indiewebcamp.com"&gt;Indie web&lt;/a&gt; forever.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript experiences which induce profound frustration in me:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I had gotten in an insane state where things just &lt;em&gt;stopped …&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 16 Dec 2016 16:45:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-12-16:/2016/12-16-1645.html</guid><category>javascript</category><category>software development</category><category>tweetstorm</category></item><item><title>What is Functional Programming?</title><link>http://www.chriskrycho.com/2016/what-is-functional-programming.html</link><description>Functional programming—though not a panacea—is a really great tool to have in our toolbelt. (And you don’t have to be a mathematician to use it.)
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 11 Nov 2016 22:30:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-11-11:/2016/what-is-functional-programming.html</guid><category>software development</category><category>functional programming</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/11-05-1524.html</link><description>&lt;p&gt;Pro tip: use &lt;code&gt;Map&lt;/code&gt; and not &lt;code&gt;Object&lt;/code&gt; for dictionaries/hash-tables in JavaScript. Performance difference is A LOT. (I haven’t measured, but for a simple example I was playing with (~12k items) it was at least a couple orders of magnitude.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Belay that: the problem was an allocation-speed issue …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 05 Nov 2016 15:24:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-11-05:/2016/11-05-1524.html</guid><category>software development</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/10-08-0922.html</link><description>&lt;p&gt;People, React is great—truly! But the fact that you only learned about the ideas it uses from React doesn’t make React itself the paradigm.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 08 Oct 2016 09:22:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-10-08:/2016/10-08-0922.html</guid><category>software development</category><category>javascript</category><category>reactjs</category></item><item><title></title><link>http://www.chriskrycho.com/2016/10-08-0740.html</link><description>&lt;p&gt;People, React is great—truly! But the fact that you only learned about the ideas it uses from React doesn’t make React itself the paradigm.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 08 Oct 2016 07:40:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-10-08:/2016/10-08-0740.html</guid><category>javascript</category><category>software development</category><category>reactjs</category></item><item><title>Rust vs. React Native—What?</title><link>http://www.chriskrycho.com/2016/rust-vs-react-native-what.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;I was recently discussing some thoughts I’ve had on building a top-notch application experience in a Slack team I belong to, and noted that I believe that a Rust core with native UIs is a &lt;em&gt;massively&lt;/em&gt; winning strategy. A friend in the group responded that he thinks “React + JS …&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 07 Oct 2016 08:20:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-10-07:/2016/rust-vs-react-native-what.html</guid><category>JavaScript</category><category>Rust</category><category>Swift</category><category>F Sharp</category><category>software development</category></item><item><title></title><link>http://www.chriskrycho.com/2016/08-17-0825.html</link><description>&lt;p&gt;I’m writing a talk on test-driven development with &lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt; for &lt;a href="http://www.olo.com"&gt;Olo&lt;/a&gt;’s in-house tech talks. How? By building a real feature and capturing the process!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 17 Aug 2016 08:25:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-08-17:/2016/08-17-0825.html</guid><category>software development</category><category>testing</category><category>javascript</category><category>emberjs</category></item><item><title></title><link>http://www.chriskrycho.com/2016/08-15-0628.html</link><description>&lt;p&gt;My &lt;a href="https://twitter.com/hashtag/firstsevenlanguages"&gt;#firstsevenlanguages&lt;/a&gt;—looking strictly at what I’d used &lt;em&gt;at all&lt;/em&gt;; ignoring HTML and CSS):&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Visual Basic&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Fortran&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In terms of what I learned well enough to use, though:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Fortran&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 15 Aug 2016 06:28:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-08-15:/2016/08-15-0628.html</guid><category>programming languages</category><category>visual basic</category><category>cplusplus</category><category>fortran</category><category>java</category><category>c</category><category>php</category><category>javascript</category><category>python</category></item><item><title></title><link>http://www.chriskrycho.com/2016/07-30-1048.html</link><description>&lt;p&gt;I’m quickly discovering a desire for actual, enforceable types as I’m trying to compose a series of functions. It’s &lt;em&gt;hard&lt;/em&gt; without them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 30 Jul 2016 10:48:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-07-30:/2016/07-30-1048.html</guid><category>software development</category><category>javascript</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/07-28-2040.html</link><description>&lt;p&gt;I’m so used to dealing with layout distinctly from &lt;em&gt;behavior&lt;/em&gt; with the HTML/CSS/JS separation that learning how to lay things out in macOS apps feels &lt;em&gt;weird&lt;/em&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 28 Jul 2016 20:40:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-07-28:/2016/07-28-2040.html</guid><category>javascript</category><category>swift</category><category>software development</category><category>html</category><category>css</category></item><item><title></title><link>http://www.chriskrycho.com/2016/07-16-1253.html</link><description>&lt;p&gt;I am trying to fix a bug in a Node.js back end I wrote 18 months ago. And I have never been so tempted in my life to rip out the entire Node back end and replace it with one written in Rust.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 16 Jul 2016 12:53:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-07-16:/2016/07-16-1253.html</guid><category>software development</category><category>javascript</category><category>rust</category></item><item><title></title><link>http://www.chriskrycho.com/2016/07-08-1536.html</link><description>&lt;p&gt;I haven’t gotten almost anything done today. I think I’m calling today my day off for this week and I’ll hammer at productive things later.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 08 Jul 2016 15:36:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-07-08:/2016/07-08-1536.html</guid><category>software development</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/07-06-0700.html</link><description>&lt;p&gt;Wow: a minimal (but extremely useful) &lt;a href="https://lodash.com"&gt;lodash&lt;/a&gt; install is only 4kb minified and gzipped. I… need to have this available to use everywhere now, please.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 06 Jul 2016 07:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-07-06:/2016/07-06-0700.html</guid><category>software development</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/06-30-1114.html</link><description>&lt;p&gt;I’d love—&lt;em&gt;love&lt;/em&gt;—to see an open standard for embedding browser engines (a la Chromium/Electron) emerge, so you can embed whichever you like.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 30 Jun 2016 11:14:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-30:/2016/06-30-1114.html</guid><category>software development</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/06-22-1510.html</link><description>&lt;p&gt;The build worked on &lt;code&gt;develop&lt;/code&gt; last night. We have made no commits. Now it fails.&lt;/p&gt;
&lt;p&gt;Current best guess: transitive dependencies. Thanks, npm.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 22 Jun 2016 15:10:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-22:/2016/06-22-1510.html</guid><category>software development</category><category>javascript</category></item><item><title>Y Combinators, how do they even work?</title><link>http://www.chriskrycho.com/2016/y-combinators-how-do-they-even-work.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;I was reading &lt;a href="http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/"&gt;a post&lt;/a&gt; by &lt;a href="http://matt.might.net"&gt;Matt Might&lt;/a&gt;, a computer science professor at the University of Utah, about Y Combinators, and I was having a hard time tracking with some of it just by reading. The way I normally solve this problem is to write it out—and, optimally, to …&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 19 Jun 2016 09:20:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-19:/2016/y-combinators-how-do-they-even-work.html</guid><category>javascript</category><category>software development</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/11-1729.html</link><description>&lt;p&gt;I spent the afternoon modernizing a large chunk of Node.js code in preparation for fixing a bug—and I’ve caught &lt;em&gt;multiple&lt;/em&gt; other bugs along the way. (Also, my comfort level with JavaScript and functional programming has taken a massive leap since I originally wrote this!)&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 11 Jun 2016 17:29:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-11:/2016/11-1729.html</guid><category>javascript</category><category>software development</category><category>nodejs</category></item><item><title>Testing Ember.js Mixins With a Container</title><link>http://www.chriskrycho.com/2016/testing-emberjs-mixins-with-a-container.html</link><description>&lt;p&gt;Today I was working on an Ember.js &lt;a href="http://emberjs.com/api/classes/Ember.Mixin.html#content"&gt;mixin&lt;/a&gt; for the new mobile web application we’re shipping at Olo, and I ran into an interesting problem when trying to test it.&lt;/p&gt;
&lt;p&gt;When you’re testing mixins, you’re generally not working with the normal Ember container.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In fact …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 09 Jun 2016 20:35:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-09:/2016/testing-emberjs-mixins-with-a-container.html</guid><category>emberjs</category><category>javascript</category><category>software development</category></item><item><title></title><link>http://www.chriskrycho.com/2016/09-1242.html</link><description>&lt;p&gt;JavaScript with semicolons written by hand is such a &lt;em&gt;sad&lt;/em&gt; language. Almost every line, it’s crying:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 09 Jun 2016 12:42:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-09:/2016/09-1242.html</guid><category>javascript</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-05-19-1928.html</link><description>&lt;p&gt;I needed to write a tiny server to test out some quirky single-page app stuff I’m doing for Olo right now. So I did it with Python and Flask.&lt;/p&gt;
&lt;p&gt;And you know what? Python is still—and forever, I suspect—so much better than JavaScript.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 19 May 2016 19:28:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-05-19:/2016/2016-05-19-1928.html</guid><category>software development</category><category>programming languages</category><category>python</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-05-16-1431.html</link><description>&lt;p&gt;Just bumped into another person who (quite reasonably) didn’t know that ES6 &lt;code&gt;class&lt;/code&gt;es are just syntactic sugar for prototypes. I like classes… but they’re more confusing than not, I think.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 16 May 2016 14:31:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-05-16:/2016/2016-05-16-1431.html</guid><category>software development</category><category>programming languages</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-25-0709.html</link><description>&lt;p&gt;I &lt;em&gt;hate&lt;/em&gt; npm’s non-deterministic installs. Reproducible builds are essential, not optional.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 25 Apr 2016 07:09:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-25:/2016/2016-04-25-0709.html</guid><category>software development</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-23-1006.html</link><description>&lt;p&gt;I’ve been working for a few weeks now on what has ended up being a much larger feature than I expected. &lt;a href="https://github.com/AlDanial/cloc/"&gt;CLOC&lt;/a&gt; tells me it’s a +1,320-lines-of-code change. But of those, 951 are &lt;em&gt;tests&lt;/em&gt;. As it should be when writing JavaScript.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 23 Apr 2016 10:06:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-23:/2016/2016-04-23-1006.html</guid><category>software development</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-21-2003.html</link><description>&lt;p&gt;Just finished a massive cleanup of about 4000 lines of an AngularJS codebase. It’s not &lt;em&gt;amazing&lt;/em&gt;, but it’s a heck of a lot easier to deal with now.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 21 Apr 2016 20:03:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-21:/2016/2016-04-21-2003.html</guid><category>software development</category><category>angularjs</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-19-1744.html</link><description>&lt;p&gt;I still love EmberJS—but if I have one complaint, it’s that it’s &lt;em&gt;slightly&lt;/em&gt; too heavy on convention-based magic. I want it to be a little more explicit, so that I can have a little more insight into what it’s going. Yes, even if that means a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 19 Apr 2016 17:44:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-19:/2016/2016-04-19-1744.html</guid><category>javascript</category><category>emberjs</category><category>software development</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-14-1454.html</link><description>&lt;p&gt;Things I want basically &lt;em&gt;all the time&lt;/em&gt; when writing JavaScript:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strong types&lt;/li&gt;
&lt;li&gt;enums with values (tagged unions)&lt;/li&gt;
&lt;li&gt;pattern-matching&lt;/li&gt;
&lt;li&gt;immutability (more easily than with &lt;code&gt;Object.freeze&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;actual constants (not just fixed bindings like &lt;code&gt;const&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically: an ML, I guess.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 14 Apr 2016 14:54:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-14:/2016/2016-04-14-1454.html</guid><category>javascript</category><category>programming languages</category><category>software development</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-14-1100.html</link><description>&lt;p&gt;After looking at &lt;a href="http://elm-lang.org"&gt;Elm&lt;/a&gt; a little, and discovering it doesn’t have &lt;a href="https://www.haskell.org"&gt;Haskell&lt;/a&gt;-style &lt;a href="http://learnyouahaskell.com/types-and-typeclasses#typeclasses-101"&gt;typeclasses&lt;/a&gt; (&lt;em&gt;a la&lt;/em&gt; &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;’s &lt;a href="https://doc.rust-lang.org/book/traits.html"&gt;traits&lt;/a&gt;), I was a bit disappointed. Then I discovered &lt;a href="http://www.purescript.org"&gt;PureScript&lt;/a&gt;, which &lt;em&gt;does&lt;/em&gt;. Intrigued all over again.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 14 Apr 2016 11:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-14:/2016/2016-04-14-1100.html</guid><category>programming languages</category><category>javascript</category><category>purescript</category><category>elm</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-11-0846.html</link><description>&lt;p&gt;Betting I’m not the only one who thinks it a little weird that the &lt;code&gt;Event.target&lt;/code&gt; in the DOM APIs is the &lt;em&gt;source&lt;/em&gt; of the event.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 11 Apr 2016 08:46:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-11:/2016/2016-04-11-0846.html</guid><category>software development</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-09-1019.html</link><description>&lt;p&gt;It is utterly infuriating how many parts of the DOM API are “array-like” but don’t have the basic &lt;code&gt;Array&lt;/code&gt; API actually attached. Want to iterate over a &lt;code&gt;HTMLCollection&lt;/code&gt;? You get to use a &lt;code&gt;for&lt;/code&gt; loop with an index! Lucky you! 😐&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 09 Apr 2016 10:19:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-09:/2016/2016-04-09-1019.html</guid><category>javascript</category><category>software development</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-07-0830.html</link><description>&lt;p&gt;The more time I spend with languages with pattern matching and expressive type systems, the more I feel frustrated by things I just can’t express in JavaScript. If I could write Ember in something &lt;a href="http://elm-lang.org"&gt;Elm&lt;/a&gt;… I think I’d be &lt;em&gt;giddy&lt;/em&gt;.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 07 Apr 2016 08:30:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-07:/2016/2016-04-07-0830.html</guid><category>software development</category><category>programming languages</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-06-1228.html</link><description>&lt;p&gt;&lt;em&gt;Why isn’t this updating?&lt;/em&gt; :looks around for five minutes: Oh. It’s because I’m just serving an old version, and don’t have it rebuilding as I make changes.&lt;/p&gt;
&lt;p&gt;Yeah…&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 06 Apr 2016 12:28:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-06:/2016/2016-04-06-1228.html</guid><category>javascript</category><category>software development</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-03-14-0849.html</link><description>&lt;p&gt;Apparently, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger"&gt;&lt;code&gt;debugger;&lt;/code&gt;&lt;/a&gt; is a thing. My life would have been &lt;em&gt;so&lt;/em&gt; much easier if I had known about this sooner than ten minutes ago.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 14 Mar 2016 08:49:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-03-14:/2016/2016-03-14-0849.html</guid><category>javascript</category><category>software development</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-03-09-1236.html</link><description>&lt;p&gt;Pro tip for tracking down oddities with &lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt; during testing: &lt;code&gt;ember test --serve --filter '&amp;lt;some pattern&amp;gt;'&lt;/code&gt; is &lt;em&gt;great&lt;/em&gt;. E.g. &lt;code&gt;ember t -s --filter 'Unit'&lt;/code&gt; for just unit tests.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 09 Mar 2016 12:36:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-03-09:/2016/2016-03-09-1236.html</guid><category>software development</category><category>javascript</category><category>emberjs</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-03-06-1221.html</link><description>&lt;p&gt;Seriously. All I want to do is transpile ES6 to ES5 and make it runnable in browser. And I need Browserify or Webpack for this? &lt;em&gt;sigh&lt;/em&gt;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 06 Mar 2016 12:21:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-03-06:/2016/2016-03-06-1221.html</guid><category>software development</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-03-06-1115.html</link><description>&lt;p&gt;Trying to do a little tweaking with the lightweight scripts I use on this site. Trying to automate things with Babel, browser imports, etc.&lt;/p&gt;
&lt;p&gt;This is still far, far worse than it should be in 2016. Here’s hoping it’s (substantially!) better a year from now.&amp;quot;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 06 Mar 2016 11:15:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-03-06:/2016/2016-03-06-1115.html</guid><category>javascript</category><category>software development</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-03-04-0851.html</link><description>&lt;p&gt;I ran into a &lt;a href="https://medium.com/javascript-scene/how-to-fix-the-es6-class-keyword-2d42bb3f4caf#.syiwijz9h"&gt;Medium post&lt;/a&gt; arguing against ES6’s &lt;code&gt;class&lt;/code&gt; implementation, and got linked to &lt;a href="http://martinfowler.com/bliki/CallSuper.html"&gt;this argument&lt;/a&gt; against &lt;code&gt;super()&lt;/code&gt;. &lt;em&gt;Strongly concur.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inheritance is fragile. Useful when appropriate, but fragile. Prefer composition.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 04 Mar 2016 08:51:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-03-04:/2016/2016-03-04-0851.html</guid><category>software development</category><category>javascript</category></item><item><title>The Future of JavaScript</title><link>http://www.chriskrycho.com/2016/the-future-of-javascript.html</link><description>JavaScript (ECMAScript) is in a state of substantial change. And nearly all of those changes make our software development safer and more ergonomic! A short talk covering some of the biggest changes.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 02 Mar 2016 12:30:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-03-02:/2016/the-future-of-javascript.html</guid><category>talks</category><category>software development</category><category>programming languages</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-02-25-0758.html</link><description>&lt;p&gt;I have an irrational-but-ridiculously-strong desire to build an Atom package that is a tiny JavaScript wrapper around a Rust implementation. Just because.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 25 Feb 2016 07:58:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-02-25:/2016/2016-02-25-0758.html</guid><category>software development</category><category>programming languages</category><category>rust</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-02-20-0823.html</link><description>&lt;p&gt;Of course, there’s another challenge with &lt;a href="http://www.chriskrycho.com/2016/2016-02-20-0814.html"&gt;picking back up&lt;/a&gt;: I’ve gotten spoiled by having &lt;a href="https://babeljs.io/docs/learn-es2015/"&gt;ES2015&lt;/a&gt; available and want to add it to this Angular project.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 20 Feb 2016 08:23:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-02-20:/2016/2016-02-20-0823.html</guid><category>software development</category><category>javascript</category></item><item><title>HTML5 Location, &lt;base&gt;, and SVG</title><link>http://www.chriskrycho.com/2015/html5-location-base-and-svg.html</link><description>Angular requires &lt;code&gt;&lt;base&gt;&lt;/code&gt; if you want to use HTML5's &lt;code&gt;location&lt;/code&gt;… but if you get it wrong, SVG things can and will break under you.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 20 Jun 2015 10:30:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-06-20:/2015/html5-location-base-and-svg.html</guid><category>software development</category><category>angularjs</category><category>javascript</category></item><item><title>How to Build a Single-Page App API Right</title><link>http://www.chriskrycho.com/2015/how-to-build-a-single-page-app-api-right.html</link><description>How to write a single-page app API so that you get usable data on the first load *and* have a nice interface for your single-page application built in Ember/Angular/Knockout/Backbone/etc.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 09 Jun 2015 22:16:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-06-09:/2015/how-to-build-a-single-page-app-api-right.html</guid><category>software development</category><category>javascript</category></item><item><title>Lessons Learned</title><link>http://www.chriskrycho.com/2015/lessons-learned.html</link><description>&lt;p&gt;Since mid July 2014, I have been working on a complete redesign and re-build of &lt;a href="//holybible.com"&gt;HolyBible.com&lt;/a&gt;. The good folks at &lt;a href="//prts.edu"&gt;Puritan Reformed Theological Seminary&lt;/a&gt; who own the site wanted to replace its previous content with a Bible reading tool. While there’s still a lot to wrap up, the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 12 Apr 2015 13:49:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-04-12:/2015/lessons-learned.html</guid><category>software development</category><category>javascript</category><category>angularjs</category></item><item><title>Unsurprisingly, In Flux</title><link>http://www.chriskrycho.com/2015/unsurprisingly-in-flux.html</link><description>The state of JavaScript frameworks today is a scale, really, from not-at-all-monolithic to totally-monolithic, in roughly this order: Backbone – React &amp; Angular – Ember – Meteor.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 08 Apr 2015 16:05:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-04-08:/2015/unsurprisingly-in-flux.html</guid><category>software development</category><category>javascript</category><category>angularjs</category><category>emberjs</category><category>react</category></item></channel></rss>