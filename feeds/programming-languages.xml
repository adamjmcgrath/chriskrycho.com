<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - programming languages</title><link>http://www.chriskrycho.com/</link><description></description><lastBuildDate>Tue, 17 Jan 2017 11:38:00 -0500</lastBuildDate><item><title></title><link>http://www.chriskrycho.com/2017/01-17-1138.html</link><description>&lt;p&gt;Just discovered that &lt;a href="https://webkit.org/downloads/"&gt;Safari Tech Preview&lt;/a&gt; has &lt;a href="http://webassembly.org"&gt;WebAssembly&lt;/a&gt; support. üëèüèº&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 17 Jan 2017 11:38:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-01-17:/2017/01-17-1138.html</guid><category>software development</category><category>programming languages</category></item><item><title>TypeScript keyof Follow-Up</title><link>http://www.chriskrycho.com/2017/typescript-keyof-follow-up.html</link><description>&lt;p&gt;I recently wrote up some neat things you can do with &lt;a href="http://www.chriskrycho.com/2016/keyof-and-mapped-types-in-typescript-21.html"&gt;&lt;code&gt;keyof&lt;/code&gt; and mapped types&lt;/a&gt; in TypeScript 2.1. In playing further with those bits, I ran into some interesting variations on the approach I outlined there, so here we are.&lt;/p&gt;
&lt;p&gt;In the previous post, I concluded with an example ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 03 Jan 2017 20:35:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-01-03:/2017/typescript-keyof-follow-up.html</guid><category>programming languages</category><category>software development</category><category>typescript</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2017/01-03-1845.html</link><description>&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_ahvzDzKdB0"&gt;Growing a Language, by Guy Steele&lt;/a&gt; is without competition the single best technical talk I have ever seen.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 03 Jan 2017 18:45:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-01-03:/2017/01-03-1845.html</guid><category>software development</category><category>programming languages</category><category>links</category></item><item><title></title><link>http://www.chriskrycho.com/2016/12-29-2130.html</link><description>&lt;p&gt;The thing &lt;a href="https://twitter.com/jamonholmgren"&gt;Jamon Holmgren&lt;/a&gt; and I did today (with a slight visual snazziness boost) in &lt;a href="http://elm-lang.org"&gt;Elm&lt;/a&gt; in GIF form:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://cloud.githubusercontent.com/assets/2403023/21559081/776ed304-ce13-11e6-8339-0120fee11041.gif" title="animation of A* path finding" alt="A* Path Finding in Elm" /&gt;&lt;figcaption&gt;A* Path Finding in Elm&lt;/figcaption&gt;
&lt;/figure&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 29 Dec 2016 21:30:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-12-29:/2016/12-29-2130.html</guid><category>programming languages</category><category>live-coding</category><category>elm</category></item><item><title></title><link>http://www.chriskrycho.com/2016/12-29-2126.html</link><description>&lt;p&gt;This is a great summary of what I enjoy about Rust: it just lets me get stuff done‚Äîquickly, usually elegantly, and it‚Äôs always speedy:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All the cool kids are writing &lt;a href="https://twitter.com/rustlang"&gt;@rustlang&lt;/a&gt; think pieces, so I wrote one too: Rust is about productivity: &lt;a href="https://t.co/OPwfWfpVic"&gt;https://t.co/OPwfWfpVic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;‚Äî nrc (@nick_r_cameron ‚Ä¶&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 29 Dec 2016 21:26:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-12-29:/2016/12-29-2126.html</guid><category>programming languages</category><category>rust</category></item><item><title></title><link>http://www.chriskrycho.com/2016/12-29-1751.html</link><description>&lt;p&gt;A thing I just learned: &lt;code&gt;cargo doc --open&lt;/code&gt;: full, local docs for every dependency your Rust crate has.&lt;/p&gt;
&lt;p&gt;Mind. blown.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 29 Dec 2016 17:51:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-12-29:/2016/12-29-1751.html</guid><category>software development</category><category>programming languages</category><category>rust</category></item><item><title></title><link>http://www.chriskrycho.com/2016/12-18-1614.html</link><description>&lt;p&gt;Spent a chunk of the afternoon figuring out how to implement Rust‚Äôs &lt;code&gt;Result&lt;/code&gt; type in TypeScript. Pretty cool!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 18 Dec 2016 16:14:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-12-18:/2016/12-18-1614.html</guid><category>programming languages</category><category>rust</category><category>typescript</category></item><item><title>keyof and Mapped Types In TypeScript 2.1</title><link>http://www.chriskrycho.com/2016/keyof-and-mapped-types-in-typescript-21.html</link><description>&lt;p&gt;In the last few months, I‚Äôve been playing with both &lt;a href="https://flowtype.org"&gt;Flow&lt;/a&gt; and &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; as tools for increasing the quality and reliability of the JavaScript I write at Olo. Both of these are syntax that sits on top of normal JavaScript to add type analysis‚Äîbasically, a form of &lt;a href="https://en.wikipedia.org/wiki/Gradual_typing"&gt;gradual ‚Ä¶&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 17 Dec 2016 23:25:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-12-17:/2016/keyof-and-mapped-types-in-typescript-21.html</guid><category>javascript</category><category>typescript</category><category>software development</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/12-02-1055.html</link><description>&lt;p&gt;The &lt;a href="http://atp.fm"&gt;ATP&lt;/a&gt; hosts &lt;a href="https://overcast.fm/+CdQYj9UA/0:41"&gt;on Scala&lt;/a&gt;: an act in three parts‚Äî&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Casey Liss: ‚ÄúWhat &lt;em&gt;are&lt;/em&gt; the kids doing these days? This stuff is &lt;em&gt;weird&lt;/em&gt;, man.‚Äù&lt;/li&gt;
&lt;li&gt;Marco Arment: ‚ÄúGET OFF MY LAWN!‚Äù :shakes stick: ‚ÄúFP is for weirdos and nerds!‚Äù&lt;/li&gt;
&lt;li&gt;John Siracusa: ‚Äú‚ÄòKids‚Äô? Come on. Perl has had all of this for ‚Ä¶&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 02 Dec 2016 10:55:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-12-02:/2016/12-02-1055.html</guid><category>functional programming</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/11-30-1739.html</link><description>&lt;p&gt;While watching a theology lecture for school, I may have also spent some time learning how to do &lt;a href="http://stackoverflow.com/questions/17591276/what-programming-languages-have-something-like-haskell-s-newtype"&gt;newtypes&lt;/a&gt; in Elm.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 30 Nov 2016 17:39:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-11-30:/2016/11-30-1739.html</guid><category>programming languages</category><category>elm</category></item><item><title>Using Rust for ‚ÄòScripting‚Äô</title><link>http://www.chriskrycho.com/2016/using-rust-for-scripting.html</link><description>Why I might use Rust instead of Python, with walkthroughs for building a simple "script"-like program and a guide for cross-compiling Rust code to Windows from macOS.
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 14 Nov 2016 22:00:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-11-14:/2016/using-rust-for-scripting.html</guid><category>rust</category><category>software development</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/10-30-0923.html</link><description>&lt;p&gt;I‚Äôll go a step further on &lt;a href="/2016/10-29-1552.html"&gt;yesterday‚Äôs comments&lt;/a&gt;: I would &lt;em&gt;love&lt;/em&gt; to use &lt;a href="https://facebook.github.io/reason/"&gt;Reason&lt;/a&gt; in a future project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 30 Oct 2016 09:23:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-10-30:/2016/10-30-0923.html</guid><category>software development</category><category>programming languages</category><category>ML</category></item><item><title></title><link>http://www.chriskrycho.com/2016/10-29-1552.html</link><description>&lt;p&gt;Using ML-style types to reason through things‚Äîeven &lt;em&gt;just&lt;/em&gt; as a reasoning tool, without language support‚Äîmakes such a huge difference.&lt;/p&gt;
&lt;p&gt;I‚Äôm rewriting a hairy, often-buggy section of HolyBible.com‚Äôs user logic, and using type definitions for reasoning was invaluable.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 29 Oct 2016 15:52:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-10-29:/2016/10-29-1552.html</guid><category>software development</category><category>programming languages</category><category>ML</category></item><item><title></title><link>http://www.chriskrycho.com/2016/08-15-0628.html</link><description>&lt;p&gt;My &lt;a href="https://twitter.com/hashtag/firstsevenlanguages"&gt;#firstsevenlanguages&lt;/a&gt;‚Äîlooking strictly at what I‚Äôd used &lt;em&gt;at all&lt;/em&gt;; ignoring HTML and CSS):&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Visual Basic&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Fortran&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In terms of what I learned well enough to use, though:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Fortran&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 15 Aug 2016 06:28:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-08-15:/2016/08-15-0628.html</guid><category>programming languages</category><category>visual basic</category><category>cplusplus</category><category>fortran</category><category>java</category><category>c</category><category>php</category><category>javascript</category><category>python</category></item><item><title></title><link>http://www.chriskrycho.com/2016/08-04-2317.html</link><description>&lt;p&gt;I signed a contract today for a neat little writing project broadly related to my ongoing &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;Rust and Swift&lt;/a&gt; series. Probably means a bit of a hiatus on the series itself, but there‚Äôs a lot of fun ahead. More on that as it develops.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 04 Aug 2016 23:17:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-08-04:/2016/08-04-2317.html</guid><category>writing</category><category>programming languages</category><category>rust</category><category>swift</category><category>rust-and-swift</category></item><item><title></title><link>http://www.chriskrycho.com/2016/07-30-1048.html</link><description>&lt;p&gt;I‚Äôm quickly discovering a desire for actual, enforceable types as I‚Äôm trying to compose a series of functions. It‚Äôs &lt;em&gt;hard&lt;/em&gt; without them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 30 Jul 2016 10:48:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-07-30:/2016/07-30-1048.html</guid><category>software development</category><category>javascript</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/07-26-0808.html</link><description>&lt;p&gt;The more time I spend looking at F&lt;sup&gt;‚ôØ&lt;/sup&gt;, the more I like almost everything about it. The only pain point‚Ä¶ is that Microsoft foolishly choose to PascalCaseAllTheThings. üôÑ&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 26 Jul 2016 08:08:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-07-26:/2016/07-26-0808.html</guid><category>programming languages</category><category>fsharp</category></item><item><title>Rust and Swift (xviii)</title><link>http://www.chriskrycho.com/2016/rust-and-swift-xviii.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I‚Äôd be happy to hear feedback! Note ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 24 Jul 2016 15:10:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-07-24:/2016/rust-and-swift-xviii.html</guid><category>rust</category><category>swift</category><category>rust-and-swift</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/07-16-1000.html</link><description>&lt;p&gt;I was looking at a bunch of the inbound changes to &lt;a href="https://github.com/dotnet/roslyn/issues/2136"&gt;C‚ôØ&lt;/a&gt;, and while they‚Äôre all quite nice‚Ä¶ I realized that playing with a bunch of &lt;a href="https://en.wikipedia.org/wiki/ML_(programming_language)"&gt;ML&lt;/a&gt;-descended languages has basically ruined me for C-descended languages.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 16 Jul 2016 10:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-07-16:/2016/07-16-1000.html</guid><category>programming languages</category><category>csharp</category></item><item><title></title><link>http://www.chriskrycho.com/2016/07-14-2131.html</link><description>&lt;p&gt;Things I did tonight:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep working on actually building a small app in Swift (not just playing with the language for little things, but starting to learn the macOS frameworks too).&lt;/li&gt;
&lt;li&gt;Start writing New Rustacean e015.&lt;/li&gt;
&lt;/ul&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 14 Jul 2016 21:31:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-07-14:/2016/07-14-2131.html</guid><category>learning</category><category>software development</category><category>programming languages</category><category>rust</category><category>swift</category></item><item><title>Rust and Swift (xvii)</title><link>http://www.chriskrycho.com/2016/rust-and-swift-xvii.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I‚Äôd be happy to hear feedback! Note ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 30 Jun 2016 23:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-30:/2016/rust-and-swift-xvii.html</guid><category>rust</category><category>swift</category><category>rust-and-swift</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/06-22-0747.html</link><description>&lt;p&gt;The first thing I do when I start playing with a new language/framework/etc. (like I just did with Elm) is download the &lt;a href="https://kapeli.com/dash"&gt;Dash&lt;/a&gt; docset for it. The time it saves is extraordinary.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 22 Jun 2016 07:47:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-22:/2016/06-22-0747.html</guid><category>software development</category><category>programming languages</category><category>elm</category></item><item><title></title><link>http://www.chriskrycho.com/2016/06-22-0744.html</link><description>&lt;p&gt;So I love the Rust compiler (and it‚Äôs improving all the time). But the &lt;a href="http://elm-lang.org"&gt;Elm&lt;/a&gt; compiler is a revelation. Just‚Ä¶ wow.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 22 Jun 2016 07:44:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-22:/2016/06-22-0744.html</guid><category>programming languages</category><category>elm</category><category>rust</category></item><item><title></title><link>http://www.chriskrycho.com/2016/06-21-2145.html</link><description>&lt;p&gt;Playing with Elm a little bit (&lt;a href="http://www.chriskrycho.com/2016/2016-04-14-1100.html"&gt;I know, I know&lt;/a&gt;) and bumped into the idea of &lt;a href="https://en.m.wikipedia.org/wiki/Structural_type_system"&gt;structural typing&lt;/a&gt;. Do want.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 21 Jun 2016 21:45:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-21:/2016/06-21-2145.html</guid><category>programming languages</category><category>elm</category></item><item><title>Y Combinators, how do they even work?</title><link>http://www.chriskrycho.com/2016/y-combinators-how-do-they-even-work.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;I was reading &lt;a href="http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/"&gt;a post&lt;/a&gt; by &lt;a href="http://matt.might.net"&gt;Matt Might&lt;/a&gt;, a computer science professor at the University of Utah, about Y Combinators, and I was having a hard time tracking with some of it just by reading. The way I normally solve this problem is to write it out‚Äîand, optimally, to ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 19 Jun 2016 09:20:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-19:/2016/y-combinators-how-do-they-even-work.html</guid><category>javascript</category><category>software development</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/10-2054.html</link><description>&lt;p&gt;We‚Äôre sitting here with a friend, talking about two‚Äôs complement representation of negative numbers in binary. We are &lt;em&gt;nerds&lt;/em&gt;, people.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 10 Jun 2016 20:54:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-10:/2016/10-2054.html</guid><category>programming languages</category><category>family</category></item><item><title></title><link>http://www.chriskrycho.com/2016/09-1242.html</link><description>&lt;p&gt;JavaScript with semicolons written by hand is such a &lt;em&gt;sad&lt;/em&gt; language. Almost every line, it‚Äôs crying:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 09 Jun 2016 12:42:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-09:/2016/09-1242.html</guid><category>javascript</category><category>programming languages</category></item><item><title>Rust and Swift (xvi)</title><link>http://www.chriskrycho.com/2016/rust-and-swift-xvi.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I‚Äôd be happy to hear feedback! Note ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 07 Jun 2016 23:30:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-07:/2016/rust-and-swift-xvi.html</guid><category>rust</category><category>swift</category><category>rust-and-swift</category><category>programming languages</category></item><item><title></title><link>http://www.chriskrycho.com/2016/03-2247.html</link><description>&lt;p&gt;I wrote a &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt; &lt;a href="https://github.com/rust-lang/rfcs"&gt;RFC&lt;/a&gt;! See it here: &lt;a href="https://github.com/rust-lang/rfcs/pull/1636"&gt;‚ÄúRequire all new features to be documented‚Äù&lt;/a&gt;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 03 Jun 2016 22:47:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-03:/2016/03-2247.html</guid><category>programming languages</category><category>rust</category></item><item><title></title><link>http://www.chriskrycho.com/2016/03-2056.html</link><description>&lt;p&gt;Here I am, at the end of the week off, and what am I doing? Writing a Rust &lt;a href="https://github.com/rust-lang/rfcs"&gt;RFC&lt;/a&gt;. Yep.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 03 Jun 2016 20:56:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-03:/2016/03-2056.html</guid><category>programming languages</category><category>rust</category></item><item><title>Rust and C++ function definitions</title><link>http://www.chriskrycho.com/2016/03-1801.html</link><description>&lt;p&gt;I just put my finger on one of the (many) reasons Rust reads better than C++: the visual consistency of its function definitions. Compare‚Äî&lt;/p&gt;
&lt;p&gt;Rust has:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn foo() -&amp;gt; i32 { /* implementation */ }
fn bar() -&amp;gt; f32 { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C++ has:&lt;/p&gt;
&lt;pre class="cpp"&gt;&lt;code&gt;int foo() { /* implementation */ }
double bar() { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That consistency adds up over many lines of ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 03 Jun 2016 18:01:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-03:/2016/03-1801.html</guid><category>programming languages</category><category>rust</category><category>cplusplus</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-05-31-0900.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;I originally posted this as a &lt;a href="https://twitter.com/chriskrycho/status/737629809241645056"&gt;tweetstorm&lt;/a&gt;, but I‚Äôm treating &lt;em&gt;this&lt;/em&gt; as the canonical and adding a tweet to the end of that ‚Äútopic‚Äù linking back here. &lt;a href="http://indiewebcamp.com"&gt;Indie web&lt;/a&gt; forever.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Seeing gradual typing come to both Ruby and Python at around the same time is fascinating.&lt;/li&gt;
&lt;li&gt;Seeing some responses ‚Ä¶&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 31 May 2016 09:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-05-31:/2016/2016-05-31-0900.html</guid><category>python</category><category>ruby</category><category>programming languages</category><category>listicles</category></item><item><title>Ember.js: "Introducing Subteams"</title><link>http://www.chriskrycho.com/2016/emberjs-introducing-subteams.html</link><description>&lt;p&gt;In which one tech I really like (&lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt;) steals a great idea from another tech I really like (&lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;).&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 24 May 2016 19:10:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-05-24:/2016/emberjs-introducing-subteams.html</guid><category>links</category><category>programming languages</category><category>emberjs</category><category>rust</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-05-19-1928.html</link><description>&lt;p&gt;I needed to write a tiny server to test out some quirky single-page app stuff I‚Äôm doing for Olo right now. So I did it with Python and Flask.&lt;/p&gt;
&lt;p&gt;And you know what? Python is still‚Äîand forever, I suspect‚Äîso much better than JavaScript.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 19 May 2016 19:28:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-05-19:/2016/2016-05-19-1928.html</guid><category>software development</category><category>programming languages</category><category>python</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-05-18-2241.html</link><description>&lt;p&gt;Finally at a spot where I have both the time and the mental energy to pick back up my &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;Rust and Swift&lt;/a&gt; series. Initializers, I‚Äôm coming for you.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 18 May 2016 22:41:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-05-18:/2016/2016-05-18-2241.html</guid><category>writing</category><category>programming languages</category><category>rust</category><category>swift</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-05-16-1431.html</link><description>&lt;p&gt;Just bumped into another person who (quite reasonably) didn‚Äôt know that ES6 &lt;code&gt;class&lt;/code&gt;es are just syntactic sugar for prototypes. I like classes‚Ä¶ but they‚Äôre more confusing than not, I think.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 16 May 2016 14:31:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-05-16:/2016/2016-05-16-1431.html</guid><category>software development</category><category>programming languages</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-05-10-1942.html</link><description>&lt;p&gt;Wrote the first draft of my &lt;a href="http://rustconf.com"&gt;RustConf 2016&lt;/a&gt; proposal. Because I don‚Äôt skip chances to chat about Rust. Not ever. You know that by now.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 10 May 2016 19:42:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-05-10:/2016/2016-05-10-1942.html</guid><category>talks</category><category>programming languages</category><category>Rust</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-28-0824.html</link><description>&lt;p&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-04-28-0755.html"&gt;Also&lt;/a&gt;, I keep forgetting how incredible &lt;a href="https://play.rust-lang.org" class="uri"&gt;https://play.rust-lang.org&lt;/a&gt; is. Built-in ability to view not only the result of the code, but also the new mid-level intermediate representation (MIR), the LLVM IR, and the assembly? Amazing.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 28 Apr 2016 08:24:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-28:/2016/2016-04-28-0824.html</guid><category>programming languages</category><category>rust</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-28-0755.html</link><description>&lt;p&gt;&lt;a href="http://blog.rust-lang.org/2016/04/19/MIR.html"&gt;This blog post&lt;/a&gt; on recent compiler work in Rust is incredible: great work, and great technical writing. üíô Rust.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 28 Apr 2016 07:55:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-28:/2016/2016-04-28-0755.html</guid><category>programming languages</category><category>rust</category><category>links</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-23-0835.html</link><description>&lt;p&gt;And then I discovered that &lt;a href="http://www.purescript.org"&gt;PureScript&lt;/a&gt; &lt;a href="https://github.com/bodil/pulp"&gt;uses Bower&lt;/a&gt; for its package management tool.&lt;/p&gt;
&lt;p&gt;NOPE.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 23 Apr 2016 08:35:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-23:/2016/2016-04-23-0835.html</guid><category>programming languages</category><category>purescript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-14-1454.html</link><description>&lt;p&gt;Things I want basically &lt;em&gt;all the time&lt;/em&gt; when writing JavaScript:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strong types&lt;/li&gt;
&lt;li&gt;enums with values (tagged unions)&lt;/li&gt;
&lt;li&gt;pattern-matching&lt;/li&gt;
&lt;li&gt;immutability (more easily than with &lt;code&gt;Object.freeze&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;actual constants (not just fixed bindings like &lt;code&gt;const&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically: an ML, I guess.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 14 Apr 2016 14:54:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-14:/2016/2016-04-14-1454.html</guid><category>javascript</category><category>programming languages</category><category>software development</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-14-1100.html</link><description>&lt;p&gt;After looking at &lt;a href="http://elm-lang.org"&gt;Elm&lt;/a&gt; a little, and discovering it doesn‚Äôt have &lt;a href="https://www.haskell.org"&gt;Haskell&lt;/a&gt;-style &lt;a href="http://learnyouahaskell.com/types-and-typeclasses#typeclasses-101"&gt;typeclasses&lt;/a&gt; (&lt;em&gt;a la&lt;/em&gt; &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;‚Äôs &lt;a href="https://doc.rust-lang.org/book/traits.html"&gt;traits&lt;/a&gt;), I was a bit disappointed. Then I discovered &lt;a href="http://www.purescript.org"&gt;PureScript&lt;/a&gt;, which &lt;em&gt;does&lt;/em&gt;. Intrigued all over again.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 14 Apr 2016 11:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-14:/2016/2016-04-14-1100.html</guid><category>programming languages</category><category>javascript</category><category>purescript</category><category>elm</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-07-0845.html</link><description>&lt;p&gt;I üíô the Rust team. So much.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rust/pull/32756" title="Overhaul borrowck error messages and compiler error formatting generally"&gt;This is just fantastic.&lt;/a&gt;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 07 Apr 2016 08:45:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-07:/2016/2016-04-07-0845.html</guid><category>programming languages</category><category>rust</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-04-07-0830.html</link><description>&lt;p&gt;The more time I spend with languages with pattern matching and expressive type systems, the more I feel frustrated by things I just can‚Äôt express in JavaScript. If I could write Ember in something &lt;a href="http://elm-lang.org"&gt;Elm&lt;/a&gt;‚Ä¶ I think I‚Äôd be &lt;em&gt;giddy&lt;/em&gt;.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 07 Apr 2016 08:30:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-04-07:/2016/2016-04-07-0830.html</guid><category>software development</category><category>programming languages</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-03-15-0805.html</link><description>&lt;p&gt;I was reading some C++ yesterday, and I can‚Äôt put my finger on what it is about the language, but I just find it unbearably &lt;em&gt;ugly&lt;/em&gt;. Rust‚Äôs syntax isn‚Äôt that different, but I don‚Äôt have the same visceral reaction. I wonder why that is?&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 15 Mar 2016 08:05:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-03-15:/2016/2016-03-15-0805.html</guid><category>programming languages</category><category>cplusplus</category><category>rust</category></item><item><title>Rust and Swift (xv)</title><link>http://www.chriskrycho.com/2016/rust-and-swift-xv.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I‚Äôd be happy to hear feedback! Note ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 12 Mar 2016 14:45:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-03-12:/2016/rust-and-swift-xv.html</guid><category>rust</category><category>swift</category><category>rust-and-swift</category><category>programming languages</category></item><item><title>Rust and Swift (xiv)</title><link>http://www.chriskrycho.com/2016/rust-and-swift-xiv.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I‚Äôd be happy to hear feedback! Note ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 10 Mar 2016 21:25:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-03-10:/2016/rust-and-swift-xiv.html</guid><category>rust</category><category>swift</category><category>rust-and-swift</category><category>programming languages</category></item><item><title>The Future of JavaScript</title><link>http://www.chriskrycho.com/2016/the-future-of-javascript.html</link><description>JavaScript (ECMAScript) is in a state of substantial change. And nearly all of those changes make our software development safer and more ergonomic! A short talk covering some of the biggest changes.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 02 Mar 2016 12:30:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-03-02:/2016/the-future-of-javascript.html</guid><category>talks</category><category>software development</category><category>programming languages</category><category>javascript</category></item><item><title>Rust and Swift (xiii)</title><link>http://www.chriskrycho.com/2016/rust-and-swift-xiii.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I‚Äôd be happy to hear feedback! Note ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 28 Feb 2016 11:15:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-02-28:/2016/rust-and-swift-xiii.html</guid><category>programming languages</category><category>rust</category><category>swift</category><category>rust-and-swift</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-02-27-2005.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;I posted these as a series of tweets.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Fired up and played the demo for &lt;a href="https://www.elitedangerous.com"&gt;Elite Dangerous&lt;/a&gt; on my Parallels VM. Made me want to buy it. But of course, I‚Äôd prefer to play it natively.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Of course, it‚Äôs available for Mac. But my (more than a decade ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 27 Feb 2016 20:05:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-02-27:/2016/2016-02-27-2005.html</guid><category>software development</category><category>programming languages</category><category>rust</category><category>gaming</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-02-25-0758.html</link><description>&lt;p&gt;I have an irrational-but-ridiculously-strong desire to build an Atom package that is a tiny JavaScript wrapper around a Rust implementation. Just because.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 25 Feb 2016 07:58:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-02-25:/2016/2016-02-25-0758.html</guid><category>software development</category><category>programming languages</category><category>rust</category><category>javascript</category></item><item><title></title><link>http://www.chriskrycho.com/2016/2016-02-07-1600.html</link><description>&lt;p&gt;Spent the last little bit reading about Rust‚Äôs type system for the next episode of &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt;. Heady stuff.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 07 Feb 2016 16:00:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-02-07:/2016/2016-02-07-1600.html</guid><category>podcasting</category><category>programming languages</category><category>rust</category></item><item><title>‚ÄúI Don't Know When I'd Use That‚Äù</title><link>http://www.chriskrycho.com/2016/i-dont-know-when-id-use-that.html</link><description>&lt;p&gt;I was reading an interesting Stack Overflow &lt;a href="http://stackoverflow.com/questions/21170493/when-are-higher-kinded-types-useful"&gt;discussion&lt;/a&gt; of the value of &lt;a href="http://stackoverflow.com/questions/6246719/what-is-a-higher-kinded-type-in-scala"&gt;higher-kinded types&lt;/a&gt; (hereafter &lt;abbr&gt;HKTs&lt;/abbr&gt;), and noted someone repeatedly commenting, ‚ÄúBut when would you use this in a &lt;em&gt;real app&lt;/em&gt;?‚Äù To put it the way another &lt;a href="https://m4rw3r.github.io/rust-and-monad-trait/"&gt;blog post&lt;/a&gt; about &lt;abbr&gt;HKTs&lt;/abbr&gt; (in Rust), they are ‚Äúa feature people do not ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 17 Jan 2016 10:00:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-01-17:/2016/i-dont-know-when-id-use-that.html</guid><category>software development</category><category>programming languages</category><category>rust</category><category>haskell</category></item><item><title>Rust and Swift (xi)</title><link>http://www.chriskrycho.com/2016/rust-and-swift-xi.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I‚Äôd be happy to hear feedback! Note ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 10 Jan 2016 10:00:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-01-10:/2016/rust-and-swift-xi.html</guid><category>software development</category><category>rust</category><category>swift</category><category>rust-and-swift</category><category>programming-languages</category></item><item><title></title><link>http://www.chriskrycho.com/2015/2015-10-17-1521.html</link><description>&lt;p&gt;This is interesting: I‚Äôve read some F‚ôØ before, but it reads a &lt;em&gt;lot&lt;/em&gt; more obviously to me now that I‚Äôve read a lot of Rust recently. Why? Because for all that they‚Äôre very different languages, both are ML descendants. It shows.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 17 Oct 2015 15:21:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-10-17:/2015/2015-10-17-1521.html</guid><category>programming languages</category><category>rust</category><category>fsharp</category></item><item><title>Rust and Swift (v)</title><link>http://www.chriskrycho.com/2015/rust-and-swift-v.html</link><description>I have been learning Rust and Swift in parallel. I wouldn‚Äôt normally recommend this course of action, but I‚Äôm finding it enormously profitable. You might, too, under the right circumstances.</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 12 Sep 2015 13:45:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-09-12:/2015/rust-and-swift-v.html</guid><category>software development</category><category>rust</category><category>swift</category><category>rust-and-swift</category><category>programming languages</category></item><item><title>If-expressions in Rust</title><link>http://www.chriskrycho.com/2015/if-expressions-in-rust.html</link><description>&lt;p&gt;I love the fact that all &lt;code&gt;if&lt;/code&gt; statements in Rust are expressions. It gives you a great deal of expressitivity in the language.&lt;/p&gt;
&lt;p&gt;Let‚Äôs contrast with Python (which I love, for the record). In Python, you can do something like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;some_condition = True
if some_condition:
    a_value = &amp;quot;Yeah!&amp;quot;
else:
    a_value ‚Ä¶&lt;/code&gt;&lt;/pre&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 12 Sep 2015 11:05:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-09-12:/2015/if-expressions-in-rust.html</guid><category>software development</category><category>programming languages</category><category>rust</category><category>python</category></item><item><title></title><link>http://www.chriskrycho.com/2015/2015-09-11-1250.html</link><description>&lt;p&gt;Since Rust allows &lt;a href="https://doc.rust-lang.org/book/unsafe.html"&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; code, it‚Äôs easy to wonder how necessary it is. The answer: in general, &lt;a href="https://github.com/iron/iron#overview" title="&amp;#39;Iron&amp;#39; Rust web framework"&gt;not at all&lt;/a&gt;.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 11 Sep 2015 12:50:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-09-11:/2015/2015-09-11-1250.html</guid><category>programming languages</category><category>rust</category></item><item><title>Rust and Swift (iv)</title><link>http://www.chriskrycho.com/2015/rust-and-swift-iv.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I‚Äôd be happy to hear feedback! Note, too ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 10 Sep 2015 21:05:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-09-10:/2015/rust-and-swift-iv.html</guid><category>programming languages</category><category>rust</category><category>swift</category><category>rust-and-swift</category></item><item><title>Rust and Swift (iii)</title><link>http://www.chriskrycho.com/2015/rust-and-swift-iii.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I‚Äôd be happy to hear feedback! Note, too ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 07 Sep 2015 11:55:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-09-07:/2015/rust-and-swift-iii.html</guid><category>programming languages</category><category>rust</category><category>swift</category><category>rust-and-swift</category></item><item><title>Rust and Swift (ii)</title><link>http://www.chriskrycho.com/2015/rust-and-swift-ii.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I‚Äôd be happy to hear feedback! Note, too ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 06 Sep 2015 10:20:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-09-06:/2015/rust-and-swift-ii.html</guid><category>rust</category><category>swift</category><category>rust-and-swift</category><category>programming languages</category></item><item><title>Rust and Swift (i)</title><link>http://www.chriskrycho.com/2015/rust-and-swift-i.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;I started writing these responses in a Slack channel of developers I participate in as I worked through the &lt;a href="https://developer.apple.com/swift/"&gt;Swift&lt;/a&gt; &lt;a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/"&gt;book&lt;/a&gt;. I realized after a bit that it would make a better blog post than chat room content, so here we are. This is all entirely off-the-cuff: me just thinking ‚Ä¶&lt;/i&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 04 Sep 2015 22:59:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-09-04:/2015/rust-and-swift-i.html</guid><category>listicles</category><category>programming languages</category><category>rust</category><category>swift</category><category>rust-and-swift</category></item><item><title></title><link>http://www.chriskrycho.com/2015/2015-09-02-0807.html</link><description>&lt;p&gt;I‚Äôm writing a bunch of C that &lt;em&gt;needs&lt;/em&gt; to handle error returns. I‚Äôm really wishing I had Rust‚Äôs &lt;code&gt;#[must_use]&lt;/code&gt; annotation right now. For that matter, I just want Rust‚Äôs &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; type available.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 02 Sep 2015 08:07:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-09-02:/2015/2015-09-02-0807.html</guid><category>programming languages</category><category>rust</category></item><item><title></title><link>http://www.chriskrycho.com/2015/2015/08/09%2022:16.html</link><description>&lt;p&gt;Tonight, Jaimie said that she thought Rust had turned me into a bit of a fanboy. Don‚Äôt tell anyone, but I think she‚Äôs basically right‚Ä¶&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 09 Aug 2015 22:16:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-08-09:/2015/2015/08/09 22:16.html</guid><category>programming languages</category><category>rust</category></item><item><title></title><link>http://www.chriskrycho.com/2015/2015-08-08-1811.html</link><description>&lt;p&gt;I can think of no more effective an argument for &lt;a href="http://www.rust-lang.org/"&gt;Rust&lt;/a&gt; and its &lt;a href="http://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html"&gt;memory safety guarantees&lt;/a&gt; than the time I spent this weekend hunting down bugs caused by buffer overruns in decades-old C code.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 08 Aug 2015 18:11:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-08-08:/2015/2015-08-08-1811.html</guid><category>software development</category><category>programming languages</category><category>rust</category></item><item><title>High- and Low-Level Programming Languages</title><link>http://www.chriskrycho.com/2015/high-and-low-level-programming-languages.html</link><description>&lt;p&gt;It occurred to me while listening to &lt;a href="https://edwinb.wordpress.com"&gt;Edwin Brady&lt;/a&gt; talk about &lt;a href="http://www.idris-lang.org"&gt;Idris&lt;/a&gt; on the &lt;a href="http://typetheorypodcast.com"&gt;Type Theory Podcast&lt;/a&gt;,&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; having just spent a few weeks starting to learn &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;: ‚Äúlow-level‚Äù has at least two meanings in software. One is whether something has manual memory management or is garbage collected, reference counted ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 07 Aug 2015 20:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-08-07:/2015/high-and-low-level-programming-languages.html</guid><category>programming languages</category><category>rust</category><category>python</category><category>ruby</category><category>c</category><category>cplusplus</category></item><item><title></title><link>http://www.chriskrycho.com/2015/2015-08-06-1733.html</link><description>&lt;p&gt;‚òë Finished reading the &lt;a href="http://rustbyexample.com"&gt;Rust by Example&lt;/a&gt; book. ‚òë Submitted a couple &lt;a href="https://github.com/rust-lang/rust-by-example/pull/628"&gt;pull requests&lt;/a&gt;. ‚òë Concluded that I &lt;em&gt;really&lt;/em&gt; like this language.&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 06 Aug 2015 17:33:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-08-06:/2015/2015-08-06-1733.html</guid><category>programming languages</category><category>rust</category></item></channel></rss>