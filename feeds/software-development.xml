<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Krycho</title><link>http://www.chriskrycho.com/</link><description></description><atom:link href="http://www.chriskrycho.com/feeds/software-development.xml" rel="self"></atom:link><lastBuildDate>Tue, 29 Apr 2014 19:30:00 -0400</lastBuildDate><item><title>A LittleÂ Crazy</title><link>http://www.chriskrycho.com/2014/a-little-crazy.html</link><description>&lt;p&gt;the Markdown parser and &lt;span class="caps"&gt;HTML&lt;/span&gt; templating engine required to go with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m going to do something a little crazy, I&amp;#8217;ve decided. I&amp;#8217;m going to go ahead
and do like I wrote &lt;a href="http://www.chriskrycho.com/2014/doing-it-myself.html"&gt;a bit back&lt;/a&gt;, and make &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;
actually a thing over the course of the rest of the year. Not so crazy. What is
a bit nuts is the way I&amp;#8217;ve decided to go about that process. In short: as close
to the hardest way possible as I can&amp;nbsp;conceive.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Over the last couple weeks, I&amp;#8217;ve been spending a fair bit of time toying with
&lt;a href="http://iolanguage.org"&gt;Io&lt;/a&gt;. It&amp;#8217;s a neat little language, very different in its approach to a &lt;em&gt;lot&lt;/em&gt;
of things than the languages I&amp;#8217;ve used previously. My programming language
history is very focused on the &amp;#8220;normal&amp;#8221; languages. The vast majority of real-
world code I&amp;#8217;ve written has been in one of C, &lt;span class="caps"&gt;PHP&lt;/span&gt;, or Python. I&amp;#8217;ve done a good
bit of Javascript along the way, more Fortran than anyone my age has any
business having done, and a little each of Java and Ruby. Like I said: the
normal ones. With the exception of Javascript, all of those are either standard
imperative, object-oriented, or mixed imperative and object-oriented languages.
Python and Ruby both let you mix in a fair bit of functional-style programming,
and Javascript does a &lt;em&gt;lot&lt;/em&gt; of that and tosses in prototypal inheritance to&amp;nbsp;boot.&lt;/p&gt;
&lt;p&gt;But still: they&amp;#8217;re all pretty mainstream, &amp;#8220;normal&amp;#8221; languages. Io isn&amp;#8217;t like that
at all. For one thing, it&amp;#8217;s hardly popular in any sense at all. Well-known among
the hackers&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I know, perhaps, but not popular by any measure. It&amp;#8217;s small. And
it&amp;#8217;s very &lt;em&gt;alien&lt;/em&gt; in some ways. It&amp;#8217;s &lt;a href="http://en.wikipedia.org/wiki/Prototype-based_programming"&gt;prototypal inheritance&lt;/a&gt;, not normal
inheritance. Courtesy of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain"&gt;Javascript&lt;/a&gt;, I have a &lt;em&gt;little&lt;/em&gt; familiarity
with that, but it&amp;#8217;s definitely still not my default way of thinking about
inheritance. Python&amp;#8217;s inheritance model (the one I use most frequently) is
&lt;em&gt;essentially&lt;/em&gt; the same as that in C++, Java, &lt;span class="caps"&gt;PHP&lt;/span&gt;, and so on&amp;#8212;it&amp;#8217;s normal class-
driven inheritance. Io goes off and does full-blown prototypal inheritance;
even just the little I&amp;#8217;ve played with it has been&amp;nbsp;fun.&lt;/p&gt;
&lt;p&gt;Io also does a bunch of other things a &lt;em&gt;lot&lt;/em&gt; different from the other languages
I&amp;#8217;ve used. First, there are no keywords or&amp;#8212;formally speaking&amp;#8212;even operators
in the language. Every action (including ones like &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;) is simply a
message. Every value is an object (so &lt;code&gt;1.0&lt;/code&gt; is just as fully an object as an
arbitrarily-defiend &lt;code&gt;Person&lt;/code&gt;). The combination means that writing &lt;code&gt;1 + 2&lt;/code&gt; is
actually just interpreted as the object &lt;code&gt;1&lt;/code&gt; receiving the &lt;code&gt;+&lt;/code&gt; message carrying
as its &amp;#8220;argument&amp;#8221; the &lt;code&gt;2&lt;/code&gt; object (really just the message contents). This is
&lt;em&gt;completely&lt;/em&gt; different at a deep paradigm level from the normal object-oriented
approach with object methods, even in a language like Python where all elements
are objects (including functions). The net result isn&amp;#8217;t necessarily particularly
different from calling methods on objects, but it is a &lt;em&gt;little&lt;/em&gt; different, with
have some interesting consequences. Notably (though trivially&amp;#8212;or at least, so
it seems to me at this point), you can pass a message to the null object without
it being an error. More importantly, the paradigm shift is&amp;nbsp;illuminating.&lt;/p&gt;
&lt;p&gt;Io also has far more capabilities in terms of concurrency than any of the other
languagues with which I&amp;#8217;m familiar, because it actively implements the &lt;a href="http://en.wikipedia.org/wiki/Actor_model"&gt;Actor
Model&lt;/a&gt;, which means its implementation of messaging instead of object
method calls can behave in concurrent ways. (I&amp;#8217;d say more if I understood it
better. I don&amp;#8217;t yet, which is one of the reasons I want to study the language.
Concurrency is very powerful, but it&amp;#8217;s also fairly foreign to me.) It&amp;#8217;s also
like Lisp in that its code can be inspected and modified at runtime. I&amp;#8217;ve wanted
to learn a Lisp for several years for this kind of mental challenge, but the
syntax has always just annoyed me too much ever to get there. Io will give me a
lot of its benefits with a much more pleasant syntax. It has coroutines, which
are new to me, and also helpful for concurrency.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The long and short of it is that the language has a ton of features not present
in the languages I have used, and&amp;#8212;more importantly&amp;#8212;is &lt;em&gt;paradigmatically&lt;/em&gt;
different from them. Just getting familiar with it by writing a goodly amount
of code in it would be a good way to learn in practice a bunch of computer science concepts
I never had a chance to learn formally.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;By now, as long as I&amp;#8217;ve rambled about Io, you&amp;#8217;ve probably figured out where I
was going in that first paragraph. I&amp;#8217;ve decided to stretch my brain a bit and
write Step Stool in Io. There are bunches of static site generators out there in
Python already, many of them quite mature. (This site is running on &lt;a href="https://github.com/getpelican"&gt;one of
them&lt;/a&gt; as of the time I write this post&amp;#8212;it&amp;#8217;s quite solid, even its
quirks and limitations occasionally annoy me.) The point of Step Stool has
always been twofold, though. First, I&amp;#8217;ve wanted to get to a spot where I was
really running my own software to manage my site, letting me do whatever I want
with it and guaranteeing I always understand it well enough to make those kinds
of changes. Second, I&amp;#8217;ve just wanted to &lt;em&gt;learn&lt;/em&gt; a whole bunch along the way.
Third, it&amp;#8217;s right there in the website link: &lt;a href="http://step-stool.io"&gt;step-stool.io&lt;/a&gt;! How could I pass
up such an&amp;nbsp;opportunity?&lt;/p&gt;
&lt;p&gt;It is that second goal that has pushed me to do this crazy project this crazy
way. It&amp;#8217;s crazier than just teaching myself a language in order to do the
static site generator itself, too, because there are a few other pieces missing
that I&amp;#8217;ll need to write to make this work&amp;#8230; like a Markdown implementation and
an &lt;span class="caps"&gt;HTML&lt;/span&gt; templating language. I&amp;#8217;ve never written anything remotely like either
before, so I&amp;#8217;m going to take the chance to learn a &lt;em&gt;lot&lt;/em&gt; of new things. For the
Markdown implementation, rather than relying on regular expression parsing
(like most Markdowns do), I&amp;#8217;m going to use a Parsing Expression Grammar.
That will certainly be more efficient and reliable, but&amp;#8212;more importantly&amp;#8212;it
is also outside my experience. I have yet to start thinking through how to
tackle the &lt;span class="caps"&gt;HTML&lt;/span&gt; templating language implementation (though I know I am going to
make it an Io implementation of &lt;a href="http://slim-lang.com"&gt;Slim&lt;/a&gt;, which I quite&amp;nbsp;like).&lt;/p&gt;
&lt;p&gt;In any case, I&amp;#8217;m going to be taking a good bit longer to get Step Stool
finished. That is all right: I am going to learn a ton along the way, and I am
quite sure I will have a blast doing it. And that is &lt;em&gt;exactly&lt;/em&gt; what these kinds
of projects are&amp;nbsp;for.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll post updates as I go, with the things I&amp;#8217;m learning along the way.
Hopefully they&amp;#8217;ll be interesting (or at least&amp;nbsp;entertaining).&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Hackers in the original sense of the world. Not &amp;#8220;crackers&amp;#8221;, but people
who like hacking on code, figuring things out the hard way.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Python 3.5 is actually adding coroutines, and I&amp;#8217;m excited about that.
I&amp;#8217;ll feel much more comfortable with them there having used them in Io, I&amp;#8217;m
sure!&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;I got here backwards, as it were&amp;#8212;by way of an undergraduate degree in
physics. I don&amp;#8217;t regret that for a second: I got a much broader education
than I could have managed while getting an engineering degree, and most
importantly learned &lt;em&gt;how to learn&lt;/em&gt;: easily the most important skill anyone
gains from any engineering degree.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 29 Apr 2014 19:30:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-04-29:2014/a-little-crazy.html</guid><category>software development</category></item><item><title>Learning QML, PartÂ 1</title><link>http://www.chriskrycho.com/2014/learning-qml-part-1.html</link><description>&lt;p&gt;For part of my work with Quest Consultants, I&amp;#8217;ve been picking up Qt&amp;#8217;s &lt;span class="caps"&gt;QML&lt;/span&gt;
toolkit to use in building out the &lt;span class="caps"&gt;UI&lt;/span&gt;. The declarative syntax and ability to
define one&amp;#8217;s own model in non-C++- or Python-specific ways is quite nice. That
said, the learning process has had more than a few bumps along the way. I
decided to go ahead and write those up as I go, both for my own reference and
in the hope that it may prove useful to others as I&amp;nbsp;go.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;QML&lt;/span&gt; is a &lt;em&gt;Javascript-like&lt;/em&gt; language for &lt;em&gt;declarative programming&lt;/em&gt; of a user
interface. So it&amp;#8217;s a Javascript-based language that sort of behaves like &lt;span class="caps"&gt;HTML&lt;/span&gt;.
In fact, it behaves like Javascript in terms of how you define, access, and
update properties, and you can embed full-featured (mostly) Javascript functions
and objects in&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;But when you have nested &lt;span class="caps"&gt;QML&lt;/span&gt; Types, you end up with them behaving more like
&lt;span class="caps"&gt;HTML&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The weirdest bit, and the thing that I&amp;#8217;m having the hardest time adjusting to,
is that you can only edit properties of root Types when you&amp;#8217;re working with an
instance of that Type. And those Types are defined by &lt;em&gt;documents&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, to give the simplest possible example, let&amp;#8217;s say I defined a new type called
&lt;code&gt;Monkey&lt;/code&gt;, in the &lt;code&gt;Monkey.qml&lt;/code&gt; file, like&amp;nbsp;this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Monkey.qml
import QtQuick 1.1

Item {
    id: monkey_root
    property int monkey_id: -1
    property string monkey_name: "I don't have a name!"

    Item {
        id: monkey_foot
        property string monkey_foot_desc: "The monkey has a foot!"
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can use that in another file. If they&amp;#8217;re in the same directory, it&amp;#8217;s
automatically imported, so I can just do something like&amp;nbsp;this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//main.qml
import QtQuick 1.1

// Rectangle is exactly what it sounds like. Here we can display things.
Rectangle {
    id: the_basic_shape
    height: 400
    width: 400
    color: green

    Monkey {
        id: monkey_instance
        monkey_id = 42
        monkey_name = "George"  // he's kind of a curious little guy
    }

    Text {
        text: monkey_instance.monkey_name
        color: "red"
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That creates a (really ugly) rectangle that prints the &lt;code&gt;Monkey&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s name in red
text on a green background. It&amp;#8217;s impossible to access directly the &lt;code&gt;monkey_foot&lt;/code&gt;
element, though, which means that composing more complex objects in reusable
ways is difficult. In fact, I haven&amp;#8217;t come up with a particularly good way to do
it yet. At least, I should say that I haven&amp;#8217;t come up with a good way to create
high-level reusable components yet. I can see pretty easily how to create
low-level reusable components, but once you start putting them together in any
&lt;em&gt;specific&lt;/em&gt; way, you can&amp;#8217;t recompose them in other&amp;nbsp;ways.&lt;/p&gt;
&lt;p&gt;From what I&amp;#8217;ve gotten my head around so far, this ends up being less flexible
than either &lt;span class="caps"&gt;HTML&lt;/span&gt; templating languages (which are, or at least can be, completely
declarative) or normal Javascript (which is obviously &lt;em&gt;not&lt;/em&gt; declarative). Mind
you, it&amp;#8217;s all sorts of &lt;em&gt;interesting&lt;/em&gt;, and I have a pretty decent idea what I&amp;#8217;m
going to do to implement our &lt;span class="caps"&gt;UI&lt;/span&gt; with it, but it&amp;#8217;s taken me most of the day to
get a good handle on that, and my head still feels a bit funny whenever I&amp;#8217;m
trying to see how best to create composable&amp;nbsp;components.&lt;/p&gt;
&lt;p&gt;Note, too, that this is the &lt;em&gt;only&lt;/em&gt; way to create a new basic type of object in
&lt;span class="caps"&gt;QML&lt;/span&gt;: it has to be the root level object in a &lt;span class="caps"&gt;QML&lt;/span&gt; document. I would &lt;em&gt;really&lt;/em&gt; like
to be able to access internal declarations&amp;#8212;to have named internal
types/objects. Unfortunately, &lt;span class="caps"&gt;QML&lt;/span&gt; doesn&amp;#8217;t let you do this. I suspect this has to
do with how the &lt;span class="caps"&gt;QML&lt;/span&gt; type system works: it actually binds these types to C++
objects behind the scenes. This is a non-trivially helpful decision in terms of
the performance of the application, but it certainly makes my brain a little bit&amp;nbsp;twitchy.&lt;/p&gt;
&lt;p&gt;There are two basic consequences of this structure. First, any types you need to
be able to use in other &lt;span class="caps"&gt;QML&lt;/span&gt; objects have to be defined in their own &lt;span class="caps"&gt;QML&lt;/span&gt;
documents. Second, it is (as near as I can see so far, at least) difficult to
create good generic &lt;span class="caps"&gt;QML&lt;/span&gt; types of more complex structures that you can then use
to implement specific variations. For example: if you want to create accordions,
you can create a fair number of the low-level elements in generic ways that you
can reuse, but once you get to the relationships between the actual model,
delegate, and view elements, you will need to create them in custom forms for
each distinct&amp;nbsp;approach.&lt;/p&gt;
&lt;p&gt;This is more like creating &lt;span class="caps"&gt;HTML&lt;/span&gt; documents than Javascript, which makes sense,
&lt;em&gt;if&lt;/em&gt; you remember that &lt;span class="caps"&gt;QML&lt;/span&gt; is Javascript-based but &lt;em&gt;declarative&lt;/em&gt;. You just have
to remember that while you can define some reusable components, the full-fledged
elements are like full &lt;span class="caps"&gt;HTML&lt;/span&gt; pages with a templating system: you can include
elements, but not override their internal contents. In &lt;span class="caps"&gt;QML&lt;/span&gt;, you can override
&lt;em&gt;some&lt;/em&gt; of their contents, which is nice&amp;#8212;but that is not the primary way to go
about&amp;nbsp;it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 11 Apr 2014 15:30:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-04-11:2014/learning-qml-part-1.html</guid><category>software development</category></item><item><title>FeelsÂ Right</title><link>http://www.chriskrycho.com/2014/feels-right.html</link><description>&lt;p&gt;I had spent most of the last week and a half working on getting
&lt;a href="http://www.firebirdsql.org"&gt;FirebirdSQL&lt;/a&gt; configured and ready to use for a project I&amp;#8217;m working on with
&lt;a href="http://www.questconsult.com"&gt;Quest Consultants&lt;/a&gt;. It was slow going. The tool is decent, but the
documentation is spotty and it felt like everything was just a bit of a slog&amp;#8212;to
get it working correctly, to get it playing nicely with other pieces of the
development puzzle, to get it working across platforms.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; Then, because I had
done something a &lt;em&gt;little&lt;/em&gt; bit silly in my eagerness to get up and going last
week and written code without a testable configuration, I hit a wall today. The
queries weren&amp;#8217;t working. I had made a &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception"&gt;bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I spent a substantial part of the day chasing down that bug, and then a
conversation with user &lt;em&gt;agronholm&lt;/em&gt; on the &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/"&gt;SQLAlchemy&lt;/a&gt; &lt;span class="caps"&gt;IRC&lt;/span&gt; channel
(&lt;a href="irc://irc.freenode.net/sqlalchemy"&gt;freenode/#sqlalchemy&lt;/a&gt;) got me thinking. The Firebird team describes
one of their options as an &amp;#8220;embedded&amp;#8221; server, but &lt;em&gt;agronholm&lt;/em&gt; pointed out that
what they really mean is &lt;em&gt;portable&lt;/em&gt;. It&amp;#8217;s running a standalone server and
client, but it&amp;#8217;s not part of the same thread/process (like SQLite is). Then
&lt;em&gt;agronholm&lt;/em&gt; very helpfully asked&amp;#8212;my having mentioned my preference for
&lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; earlier&amp;#8212;&amp;#8221;Does Postgres not have a portable version?&amp;#8221;
Two minutes later, we had both found &lt;a href="http://sourceforge.net/projects/postgresqlportable/"&gt;PostgreSQL Portable&lt;/a&gt;, and I&amp;nbsp;rejoiced.&lt;/p&gt;
&lt;p&gt;It took me less than half an hour to get it downloaded and set up and to confirm
that it would work the way we need for this particular piece of software.
(Firebird had taken me a good three hours, what with digging through badly
organized and not terribly clear documentation.) It took me less than half an
hour more to get PostgreSQL to the same point that I&amp;#8217;d finally gotten Firebird
to after multiple hours working with it. And I was so &lt;em&gt;very&lt;/em&gt; happy. What had
been an especially frustrating work day now had me quietly smiling to myself
constantly for the last two and a half hours as I &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception/22872598#22872598"&gt;finished&lt;/a&gt; tracking
down the bug that had set me on this path in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;Several years ago, when I first started doing web development, I got my feet wet
in database work with MySQL&amp;#8212;probably the single most common starting point for
anyone going that route, courtesy of the ubiquity of the standard Linux-Apache-
MySQL-&lt;span class="caps"&gt;PHP&lt;/span&gt; stack.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; A year after that, I picked up some work that was already
using PostgreSQL and fell in love almost immediately.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; Something just felt
&lt;em&gt;better&lt;/em&gt; about running &lt;code&gt;psql&lt;/code&gt; than running &lt;code&gt;mysql&lt;/code&gt; on the command line.
Postgres&amp;#8217; implementation of the &lt;span class="caps"&gt;SQL&lt;/span&gt; standard felt more natural. Even the tiniest
little details like the way tables display when you query them in &lt;code&gt;psql&lt;/code&gt; was
nicer. In less than a week, I was sold and haven&amp;#8217;t looked back. While I&amp;#8217;ve used
MySQL out of convenience on shared hosting from time to time, PostgreSQL is
unquestionably my preferred database&amp;nbsp;target.&lt;/p&gt;
&lt;p&gt;Today&amp;#8217;s experience brought that all home again. That grin on my face all
afternoon felt a bit silly, but it highlights the difference that really good
software design makes. I am not just talking about how it looks here&amp;#8212;though,
to be sure, PostgreSQL is prettier than FirebirdSQL&amp;#8212;but how it works.
PostgreSQL feels responsive, its command set makes a lot of sense and is easy to
use, and it is &lt;em&gt;extremely&lt;/em&gt; well documented. In fact, I would go so far as to say
that it is the best documented open source software I have ever used, as well as
among the very most robust. (The only other open source software I find to be as
incredibly rock-solid and reliable as PostgreSQL is the Linux kernel. I am by no
means an expert on either, or on open source software in general, but the Linux
kernel is an unarguably amazing piece of work. So is PostgreSQL.) All those tiny
little details add&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a good reminder for me as I write software that yes, the things I care
about&amp;#8212;the small matters that would be so easy to overlook when customers
express no interest in them&amp;#8212;really do matter. People may not know that things
like typography make a difference in their experience, but those subtle, often
imperceptible things matter. They may not consciously notice the differences in
your interface design (even a command line interface), but it will change their
experience of the software. Do it poorly, or even in a just-good-enough-to-get-
by fashion, and you&amp;#8217;ll annoy or simply bore them. Do it well, and you might just
delight them&amp;#8212;even if they can&amp;#8217;t tell you&amp;nbsp;why.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;To make my point a little more visible, I thought it might be useful to post
samples of &lt;span class="caps"&gt;SQL&lt;/span&gt; to accomplish the same task in the two different database&amp;nbsp;dialects.&lt;/p&gt;
&lt;h3 id="firebirdsql4"&gt;FirebirdSQL:&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id INT NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);
CREATE SEQUENCE project_id_sequence;
SET TERM + ;
CREATE TRIGGER project_id_sequence_update
  ACTIVE BEFORE INSERT OR UPDATE POSITION 0
  ON projects
AS
BEGIN
  IF ((new.id IS NULL) OR (new.id = 0))
    THEN new.id = NEXT VALUE FOR project_id_sequence;
END+
SET TERM ; +
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="postgresql"&gt;PostgreSQL&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id SERIAL NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not just that the PostgreSQL example is shorter and clearer&amp;#8212;it is that
it is shorter and clearer because its designers and developers have taken the
time to make sure that the shorter, cleaner way works well, and have documented
it so you can know how to use that shorter cleaner way without too much&amp;nbsp;difficulty.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I do most of my development on a Mac, but do all the testing on the target
platform (Windows) in a &lt;span class="caps"&gt;VM&lt;/span&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;At this point, I would only use one of those by default if I were building
a web app: Linux. I&amp;#8217;d use &lt;a href="http://wiki.nginx.org/Main"&gt;nginx&lt;/a&gt; instead of Apache,
&lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; instead of MySQL, and &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt; (though
&lt;a href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;, Javascript via &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/vstudio/hh341490"&gt;C# and the .&lt;span class="caps"&gt;NET&lt;/span&gt; stack&lt;/a&gt;,
or just about anything &lt;em&gt;but&lt;/em&gt; &lt;span class="caps"&gt;PHP&lt;/span&gt; would do fine).&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;em&gt;Almost&lt;/em&gt; immediately because at that point configuration on &lt;span class="caps"&gt;OS&lt;/span&gt; X was a bit
of a pain. That is &lt;a href="http://postgresapp.com" title="Postgres.app"&gt;no longer the case&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;To be perfectly fair to Firebird, it is improving. The upcoming 3.0 series
release will make these two a lot more similar than they are at present, and
clean up a number of other issues. What it won&amp;#8217;t do is get the &lt;em&gt;feel&lt;/em&gt; of
using Firebird more like that of using Postgres, or make the installation
procedure smoother or easier, or make the documentation more complete.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 04 Apr 2014 21:30:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-04-04:2014/feels-right.html</guid><category>software development</category><category>design</category></item><item><title>FirebirdSQL and IntelliJ IDEAÂ (etc.)</title><link>http://www.chriskrycho.com/2014/firebirdsql-and-intellij-idea-etc.html</link><description>&lt;p&gt;Setting up IntelliJ &lt;span class="caps"&gt;IDEA&lt;/span&gt;&amp;#8217;s built-in database tools to work with FirebirdSQL
requires a particular setup configuration, which I&amp;#8217;m documenting here for public&amp;nbsp;consumption.&lt;/p&gt;
&lt;p&gt;These setup tools &lt;em&gt;should&lt;/em&gt; be applicable to any of JetBrains&amp;#8217; other Java-based
IDEs which include database support (e.g. PyCharm, RubyMine, WebStorm, etc.).
&lt;em&gt;Note:&lt;/em&gt; the following apply to IntelliJ &lt;span class="caps"&gt;IDEA&lt;/span&gt; 12 and the associated platforms,
but &lt;em&gt;not&lt;/em&gt; to the &lt;span class="caps"&gt;IDEA&lt;/span&gt; 13 platform, which made substantial changes to how
databases are configured. The underlying details are consistent, but the
interface has changed. I have tested on PyCharm 3.1 to confirm&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;This was all done on &lt;span class="caps"&gt;OS&lt;/span&gt; X 10.9, so I also make no guarantees that this works on
other platforms, though the likelihood that it behaves the same on Linux is
fairly good. I will update the post if and when I have confirmed that it&amp;nbsp;does.&lt;/p&gt;
&lt;p&gt;Steps to configuring a database correctly for use with &lt;span class="caps"&gt;IDEA&lt;/span&gt;/etc. Note that
steps 1&amp;#8211;3 are fairly obvious; the real point of interest is in steps 4 and 5,
which took me the longest time to figure&amp;nbsp;out.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the latest version of the Firebird &lt;a href="http://www.firebirdsql.org/en/jdbc-driver/"&gt;Java drivers&lt;/a&gt; for your
    operating system and your Java version. (You can check your Java version by
    running &lt;code&gt;java -version&lt;/code&gt; at the command line.) Extract the downloaded zip
    file. The extracted folder should include a file named
    &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt; (&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is currently&amp;nbsp;2.2.4).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;span class="caps"&gt;IDEA&lt;/span&gt;, in the database view, add a new data source: in the Database view
    (accessible via a menu button on the right side of the screen), right click
    and choose &lt;strong&gt;New -&amp;gt; Data Source&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;strong&gt;&lt;span class="caps"&gt;JDBC&lt;/span&gt; driver files&lt;/strong&gt;, browse to the location where you extracted the
    Jaybird driver files and select &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;strong&gt;&lt;span class="caps"&gt;JDBC&lt;/span&gt; driver class&lt;/strong&gt;, choose &lt;code&gt;org.firebirdsql.jdbc.FBDriver&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;strong&gt;Database &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/strong&gt;, specify &lt;code&gt;jdbc:firebirdsql://localhost:3050/&lt;/code&gt;
    followed by &lt;em&gt;either&lt;/em&gt; the full path to the database in question or a
    corresponding alias.&lt;sup id="fnref:alias"&gt;&lt;a class="footnote-ref" href="#fn:alias" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; A full path might look like this on&amp;nbsp;Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/C:/my_project/the_database.db
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With an alias, you would instead&amp;nbsp;have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/the_alias
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then specify valid values for the &lt;strong&gt;User&lt;/strong&gt; and &lt;strong&gt;Password&lt;/strong&gt; fields from
your existing configuration of the&amp;nbsp;database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the &lt;strong&gt;Test Connection&lt;/strong&gt; button and make sure the configuration&amp;nbsp;works.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That should do it. Note that the driver choice and path configuration both
matter. On &lt;span class="caps"&gt;OS&lt;/span&gt; X, I found that only the &lt;code&gt;FBDriver&lt;/code&gt; with this (and one other,
older-style and therefore not recommended) path setup worked&amp;nbsp;successfully.&lt;/p&gt;
&lt;p&gt;Observations, corrections, additional information, and miscellaneous comments
welcomed on &lt;a href="https://alpha.app.net/chriskrycho"&gt;App.net&lt;/a&gt; or &lt;a href="https://www.twitter.com/chriskrycho"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:alias"&gt;
&lt;p&gt;I strongly recommend configuring an alias in the aliases.conf file in
the Firebird home directory (usually set as &lt;code&gt;$FIREBIRD_HOME&lt;/code&gt; during
installation on *nix systems). This lets you move the database around at
will, update just the configuration file, and not have to update any
references to the database file whatsoever.&amp;#160;&lt;a class="footnote-backref" href="#fnref:alias" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 28 Mar 2014 09:00:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-03-28:2014/firebirdsql-and-intellij-idea-etc.html</guid><category>Software Development</category></item><item><title>The End ofÂ Surfing</title><link>http://www.chriskrycho.com/2014/the-end-of-surfing.html</link><description>&lt;p&gt;Sometime in the last few months it occurred to me that I no longer &amp;#8220;surf&amp;#8221; the
internet. I read, to be sure, and every once in a long while I even go on a
spree where I follow links from one site to another (or just in a long trail on
Wikipedia). In general, however, I no longer surf. I suspect I am not alone in
this: if we took a straw poll I would venture that most of my friends offline
and acquaintances online alike spend rather less time in &amp;#8220;browsing&amp;#8221; mode than
they do reading Facebook or Twitter or Instagram. Motion from link to link has
been replaced by individual hops out onto Buzzfeed or a viral cat picture
website.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The obvious explanation for all of this is already there in what I&amp;#8217;ve written:
Facebook and Twitter and all the rest of the social media web. To be sure, the
advent of social media and the increasing degree to which social media have
captured user attention on the web are a significant factor in the end of the
old surfing/browsing behavior. This is a dream come true for those social media
giants which have found ways to deliver ads to their many millions of users and
thereby turn enormous&amp;nbsp;profits.&lt;/p&gt;
&lt;p&gt;At the same time, I think there is an oft-overlooked factor in the shifting
nature of the web over the last decade: the browser. In fact, if there is any
single cause behind the death of old-fashioned surfing, I would point to Firefox
1.0: the browser which popularized tabbed browsing to increasingly large
sections of the internet-using public.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; The open-source browser steadily ate
away at Internet Explorer&amp;#8217;s then absurd levels of dominance, until Internet
Explorer 8 included of tabs itself. By the time that Chrome came on the scene,
tabbed browsing had long since become a&amp;nbsp;given.&lt;/p&gt;
&lt;p&gt;So why do I think that &lt;em&gt;tabbed browsing&lt;/em&gt; of all things contributed to the end of
&amp;#8220;browsing&amp;#8221; and &amp;#8220;surfing&amp;#8221; as our dominant mode of reading the internet? Simply
put: it broke linearity. Previously,&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; one&amp;#8217;s experience of the web was single-
stranded, leaping from one point to another in a line that however contorted was
always connected by the forward and backward buttons on the browser. The moment
tabbed browsing came on the scene, that line was broken. Following a link might
mean it opened in a new tab instead of moving the whole view forward to&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Surfing as I remember it in the late &amp;rsquo;90s and early &amp;rsquo;00s was
inherently the experience of getting lost along that timeline, finding myself
dozens of links along the chain and wondering how I had ended up there, and then
being able to trace my way back. With tabs, that traceability was gone. With it
went the inherent tension that we faced with every link: to follow, or not? To
get sucked down into &lt;em&gt;this&lt;/em&gt; vortex or &lt;em&gt;that&lt;/em&gt;? Because in all likelihood, we
knew, we were not going to be coming back to this page. With tabs, though, I
could open both of those pages without ever leaving this one. I could start new
journeys without ending the old. But there was a hidden cost: that newly opened
tab had no history. It was a clean slate; before that newly opened link there
was only a blank page. If I closed the original from which I had opened it,
there was no going back.&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; If I closed this new tabs, there was no going
forward to them. The line was&amp;nbsp;broken.&lt;/p&gt;
&lt;p&gt;From there it was only a short step to the idea of a single site being the
center from which one ventured out to other points on the web before returning:
the Facebooks and Twitters of the world. In some sense, Facebook&amp;#8217;s entire model
is predicated on the idea that it is natural to open a new tab with that juicy
Buzzfeed content while keeping Facebook itself open in a background tab. Would
it work in that old linear model? Sort of. Would it feel natural?&amp;nbsp;Never.&lt;/p&gt;
&lt;p&gt;All of this because of tabs. Invention&amp;#8217;s most significant results are rarely
those the minds behind it expect. When we are designing things&amp;#8212;whether a piece
of furniture or a piece of the web&amp;#8212;we have to remember that design decisions
all have repercussions that we may not see. Technology is never neutral.
Particular innovations may or may not be &lt;em&gt;morally&lt;/em&gt; significant, but they always
produce changes in people&amp;#8217;s behavior. Design has&amp;nbsp;consequences.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;For the record, lots of that hopping from link to link was on Buzzfeed-
like and viral-cat-picture-like sites, too. I am not concerned with the
&lt;em&gt;kind&lt;/em&gt; of content being read here, so much as the way it is being read.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Note that I am not crediting Firefox 1.0 with &lt;em&gt;creating&lt;/em&gt; the tabbed
browser&amp;#8212;only with popularizing it. That distinction matters.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Excepting having multiple browser windows open, which I am sure people
did&amp;#8212;but to a much lesser extent.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Yes, yes, browser history and re-open closed tab commands. But the
&lt;em&gt;experience&lt;/em&gt; of those is different, and that&amp;#8217;s what we&amp;#8217;re talking about
here.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 26 Mar 2014 20:00:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-03-26:2014/the-end-of-surfing.html</guid><category>design</category><category>software development</category></item><item><title>Doing ItÂ Myself</title><link>http://www.chriskrycho.com/2014/doing-it-myself.html</link><description>&lt;p&gt;Last summer, I started work on a project I named &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;&amp;#8212;aiming to
make a static site generator that would tick of all the little boxes marking my
desires for a website generator. In due time, the project got put on hold, as I
started up classes again and needed to focus more on my family than on fun side&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;Come the beginning of 2014, I was ready to bit WordPress farewell once and for
all, though. While &lt;a href="https://ghost.org"&gt;Ghost&lt;/a&gt; looks interesting, since I do all my writing
in Markdown files, there is something tempting about the canonical version of
the documents being the version on my computer (and thus also on my iPad and
iPhone and anywhere I have Dropbox and/or Git access). I did not have time at
the beginning of the year to finish writing Step Stool, and I knew as much,&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;
so instead I moved to &lt;a href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt; as a stop-gap. There were lots of good
reasons to pick Pelican: it has an active development community, fairly thorough
documentation,&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; and it&amp;#8217;s in Python and uses Jinja2 templates&amp;#8212;the same basic
approach I had taken with Step Stool, and the same&amp;nbsp;toolset.&lt;/p&gt;
&lt;p&gt;Unfortunately, while I have been glad to be away from WordPress, my experience
with Pelican so far has only reinforced my desire to get Step Stool done. There
are &lt;em&gt;lots&lt;/em&gt; of little things that it does in ways that just annoy me. Many of
them have to do with configuration and documentation. On the latter, while the
documentation is &lt;em&gt;fairly&lt;/em&gt; complete, there are quite a few holes and gaps. (Yes,
yes, open source software and anyone can add to the docs. That&amp;#8217;s great&amp;#8212;it
really is&amp;#8212;but if I&amp;#8217;m going to use someone else&amp;#8217;s solution, it had better &lt;em&gt;just
work&lt;/em&gt;. Otherwise, I&amp;#8217;d rather spend my time getting my own&amp;nbsp;going.)&lt;/p&gt;
&lt;p&gt;For example, if you want to see how the pagination actually works, good luck
figuring it out from the documentation. You&amp;#8217;ll need to go looking at the way the
sample themes (yes, both of them) are implemented to start getting a feel for
it. Along the same lines, many of the objects that get handed to the templates
are not fully documented, so it is difficult to know what one can or cannot do.
I do not particularly want to spend my time adding debug print statements to my
templates just to figure out what options I have&amp;nbsp;available.&lt;/p&gt;
&lt;p&gt;The same kinds of things hold true for configuration options. Moreover, the
configuration is done through a Python module. While that makes the module
easier to integrate on the code side of things, it makes its actual content much
less transparent than one might hope. Python is not really well optimized for
writing configuration files&amp;#8212;nor is any normal programming language.
Configuration is inherently declarative, rather than&amp;nbsp;imperative.&lt;/p&gt;
&lt;p&gt;This is not to say that Pelican is bad software. It is not. It is, however, a
fairly typical example of open source software implemented by committee. It has
holes (some of them serious), bumps, and quirks. Here is the reality: so will
Step Stool, though they will be the quirks that come from an individual
developer&amp;#8217;s approach rather than a group&amp;#8217;s. But the one thing I can guarantee,
and the reason I am increasingly motivated to get back to working on Step Stool.
And yes, I do have a couple other projects on my plate as well&amp;#8212;contributions
to the Smartypants and Typogrify modules, my own &lt;a href="https://bitbucket.org/chriskrycho/spacewell"&gt;Spacewell typography project&lt;/a&gt;,
and quite possibly a &lt;a href="https://bitbucket.org/chriskrycho/markdown-poetry/"&gt;Markdown Poetry extension &lt;/a&gt;. But I would like
very much to just get back to doing this myself. There is freedom in rolling my
own solution to things. I will not always have time to do these kinds of things; 
I figure I should do them when I&amp;nbsp;can.&lt;/p&gt;
&lt;p&gt;So here&amp;#8217;s to &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;, and&amp;#8212;more importantly&amp;#8212;to writing your own
software just to scratch that&amp;nbsp;itch.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I spent quite a bit of time tweaking my friend Vernon King&amp;#8217;s &lt;a href="http://www.vernonking.org"&gt;Jekyll-powered site&lt;/a&gt;, I got Winning Slowly off the ground,
including designing the site from scratch and implementing it (also in Pelican),
and I did some substantial redesign work on this site. That was more than enough
for my three week break&amp;#8212;as evidenced by the fact that I didn&amp;#8217;t get to the sort
of 1.0 version of this site until just a week or so ago.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Emphasis on &amp;#8220;fairly.&amp;#8221; More on &lt;em&gt;that&lt;/em&gt; in a moment as well.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 21 Mar 2014 22:14:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-03-21:2014/doing-it-myself.html</guid><category>software development</category></item></channel></rss>