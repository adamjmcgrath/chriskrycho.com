<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Krycho</title><link>http://www.chriskrycho.com/</link><description></description><atom:link href="http://www.chriskrycho.com/feeds/software-development.xml" rel="self"></atom:link><lastBuildDate>Fri, 09 Jan 2015 18:00:00 -0500</lastBuildDate><item><title>The Joy of Good Tools</title><link>http://www.chriskrycho.com/2015/joy-good-tools.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;Note: This started out as a &lt;a href="https://alpha.app.net/chriskrycho/post/47820144"&gt;series of posts on App.net&lt;/a&gt;,
but as I realized that it was growing a bit, I decided to &lt;a href="/2014/a-few-theses-on-blogging.html"&gt;take my own advice&lt;/a&gt;
and turn it into a short blog post. (The first four paragraphs of this post are
the same as the posts that spawned it.) And then, as so often happens with my
writing, it rather took on a life of its own. So much for&amp;nbsp;short.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;After wrestling with Bitbucket issues again all day, I think I’ve finally hit
the breaking point. Time to go ahead and drop the money on GitHub and migrate my
private repos there. (Yes, GitLab is neat, but tool integrations matter,&amp;nbsp;too.)&lt;/p&gt;
&lt;p&gt;I think I’m also probably going to spring for a small subscription to Pivotal
Tracker. It’s cheaper to do GitHub+PivotalTracker at my scale than to host
GitLab and run YouTrack on a &lt;span class="caps"&gt;VPS&lt;/span&gt;. And that’s &lt;em&gt;not&lt;/em&gt; counting my&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The big thing with Pivotal is that I &lt;em&gt;need&lt;/em&gt; the ability to estimate more
effectively even than something like Trello affords (and I don’t want to spend
time wrangling with Chrome plugins), and it gives me that. Totally worth the
cost in saved&amp;nbsp;pain.&lt;/p&gt;
&lt;p&gt;And as for GitHub as compared to the free GitLab… well, honestly, the
F/&lt;span class="caps"&gt;OSS&lt;/span&gt;-copycat model bothers me on a lot of levels. The fact that their strategy
is “copy GitHub as closely as possible, and charge for it” is not my idea of
&amp;#8220;winning&amp;nbsp;slowly&amp;#8221;.&lt;/p&gt;
&lt;p&gt;(&amp;#8220;Winning slowly&amp;#8221; is more than just the name of my &lt;a href="//www.winningslowly.org"&gt;podcast&lt;/a&gt;. In fact, it&amp;#8217;s the
opposite: we named the podcast that because it&amp;#8217;s one of the core commitments in
our&amp;nbsp;lives.)&lt;/p&gt;
&lt;p&gt;So I&amp;#8217;m going to pay for Pivotal and GitHub. My time is worth something, and the
quality of the tools I use matters, too. Ongoing irritation and frustration adds
up over time. Good tools can make us happier. Bad tools can make work more
frustrating than it needs to be. Given just how frustrating work can be anyway,
the last thing in the world I want to do is unnecessarily spend my time being
even more frustrated by my tools. And you know what? $7/month for each of those
tools is absolutely worth more than the frustration of wrestling with tools that
do the job less&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m actually really excited by this. Pivotal Tracker will help me avoid making
the painful mistake of underestimation in the future, by helping me see how long
things actually take and giving me a way to plan out major projects with that
data immediately available. GitHub will be simultaenously more functional and
much lovelier than Bitbucket&amp;#8212;no strategy tax holding it back!&amp;#8212;and will be
much nicer to&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;At the end of the day, it comes down to this: I&amp;#8217;m happy to pay for good tools
that make my work more&amp;nbsp;enjoyable.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;To my surprise and amusement, this leads me to a closely related point I had
been writing up in a separate blog post: the value of tools that &lt;em&gt;delight&lt;/em&gt;. It
is not merely that bad tools make work unpleasant. Good tools can make work a
&lt;em&gt;joy&lt;/em&gt;. Indeed, because my vocations is such a significant part of my life, few
things bring me as much simple pleasure as a tool that does its job well, is
pleasant to use, and is beautiful, all at&amp;nbsp;once.&lt;/p&gt;
&lt;p&gt;The latest example of this for me is &lt;a href="//www.neat.io/bee/index.html"&gt;Bee&lt;/a&gt;, a tool designed to make working with
issue trackers like &lt;span class="caps"&gt;JIRA&lt;/span&gt;, GitHub Issues, and FogBugz easier and more pleasant. I
use &lt;span class="caps"&gt;JIRA&lt;/span&gt; for one of my long-term contracts&amp;#8212;I actually set it up for the
company&amp;#8212;and I have a love-hate relationship with it. &lt;span class="caps"&gt;JIRA&lt;/span&gt;&amp;#8217;s power is great,
but the web interface is slow and cluttered.&lt;sup id="fnref:atlassian"&gt;&lt;a class="footnote-ref" href="#fn:atlassian" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I have used other desktop tools with &lt;span class="caps"&gt;JIRA&lt;/span&gt; before, and they were even worse than
the web interface. I stumbled across Bee the other day (I cannot even remember
how!), decided to try it out, and fell in love. It is simple, fast, and
&lt;em&gt;elegant&lt;/em&gt;. That is a killer combination. I have been using it daily for over a
week, and strange though it might be to say of a desktop client for issue
trackers, I get genuine pleasure out of using it. (Yes, I know: that is a bit&amp;nbsp;strange.)&lt;/p&gt;
&lt;p&gt;I have the same experience with a number of other tools I use&amp;#8212;&lt;a href="//www.git-tower.com"&gt;Tower&lt;/a&gt;,
&lt;a href="//bywordapp.com"&gt;Byword&lt;/a&gt;, and &lt;a href="//www.jetbrains.com/idea/"&gt;IntelliJ &lt;span class="caps"&gt;IDEA&lt;/span&gt;&lt;/a&gt; to name just a few. This very post is written in
Byword, and I&amp;#8217;m &lt;em&gt;happy&lt;/em&gt; about it. I wish I felt that way about every tool I&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;And this goes beyond software. I have had the same experience driving a car. The
Mazda3 I drove in and after college was a delight. The &lt;span class="caps"&gt;MUV&lt;/span&gt;&lt;sup id="fnref:muv"&gt;&lt;a class="footnote-ref" href="#fn:muv" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; we drive right
now is sufficient. The Chevy Malibu we rented for driving to and from Texas in
December was &lt;em&gt;irritating&lt;/em&gt;, with an inordinate number of small failures to
consider how the thing would actually be used. I would buy another Mazda3 in a
heartbeat; I would contentedly take another Lexus &lt;span class="caps"&gt;RX300&lt;/span&gt;-alike; I would avoid a
Chevy Malibu like the&amp;nbsp;plague.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Every&lt;/em&gt; category of tool is like&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;The difference between a poor or mediocre tool and a good tool can make the
difference between frustration and satisfaction. The difference between a good
tool and a &lt;em&gt;great&lt;/em&gt; tool can make the difference between satisfaction and
delight. That inspires me: it makes me want to make things so that they do more
than &lt;em&gt;suffice&lt;/em&gt;&amp;#8212;so that they &lt;em&gt;excel&lt;/em&gt;, so that they delight and energize their
audience. Whether that is someone using a web application I write or someone
listening to a piece of music I composed, I want them to experience more than
good-enough. I want them to feel&amp;nbsp;joy.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There is something profound here, I think, something that goes even deeper than
just the experience of being happy enough with a good tool to pay money to use
it. I think human beings are meant for that profound joy&amp;#8212;meant for it in every
breath. That these kinds of delights are rare, and so often marred even at their
best by little failures, is a mark of the imperfection&amp;#8212;and, in human terms at
least, the &lt;em&gt;imperfectibility&lt;/em&gt;&amp;#8212;of the world in which we live.  But the fact
that such moments will be rare until the eschaton neither undoes nor diminishes
the imperative to strive after them&amp;#8212;especially for those of us who, as
Christians, affirm the goodness and the &lt;em&gt;telos&lt;/em&gt; of the created world. Quite the
contrary. We have a responsibility and a charge as subcreators always to be able
to say of the work we have done, &amp;#8220;It is&amp;nbsp;good.&amp;#8221;&lt;/p&gt;
&lt;p&gt;I am not there yet. I hope very much, though, that the work I do this year will
be&amp;#8212;for at least one person&amp;#8212;a little sip from that deep well of delight.
Whether I succeed or no, at least the bar is set where it ought to&amp;nbsp;be.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:atlassian"&gt;
&lt;p&gt;Atlassian&amp;#8217;s designers seem to be shooting for the kind of &amp;#8220;flat&amp;#8221;
minimalism that is in right now&amp;#8230; and missing the mark entirely. &lt;em&gt;All&lt;/em&gt; of
their tools are a cluttered mess in the &lt;span class="caps"&gt;UI&lt;/span&gt;/X department.&amp;#160;&lt;a class="footnote-backref" href="#fnref:atlassian" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:muv"&gt;
&lt;p&gt;A &amp;#8220;Mom Utility Vehicle&amp;#8221;, my wry term for &amp;#8220;&lt;span class="caps"&gt;SUV&lt;/span&gt;&amp;#8221;-type vehicles sitting on 
standard car chasses.&amp;#160;&lt;a class="footnote-backref" href="#fnref:muv" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 09 Jan 2015 18:00:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2015-01-09:2015/joy-good-tools.html</guid><category>software development</category><category>design</category><category>joy</category></item><item><title>Growing Up Together</title><link>http://www.chriskrycho.com/2014/growing-up-together.html</link><description>&lt;p&gt;A few years ago, you might have caught me in a grumpy moment grousing about
JavaScript. I distinctly did &lt;em&gt;not&lt;/em&gt; like writing it. Every time I sat down to
deal with it, I found myself in a tangled mess of plain JavaScript, jQuery, and
&lt;span class="caps"&gt;DOM&lt;/span&gt; manipulations that inevitably left me tearing my hair out.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I found it
difficult to write in the first place, and even harder to maintain in the long
run. I could not come up with good ways to organize it, especially because so
much of what I was doing was so thoroughly &lt;em&gt;ad hoc&lt;/em&gt; in nature. Cobble this
together over here; scrounge together those things over there; hope nothing
collides in the&amp;nbsp;middle.&lt;/p&gt;
&lt;p&gt;In the last four months, I have written several thousand lines of JavaScript,
and I have &lt;em&gt;loved&lt;/em&gt;&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;For my latest major project, relaunching &lt;a href="https://holybible.com"&gt;HolyBible.com&lt;/a&gt;, I wrote the front
end in &lt;a href="https://angularjs.org"&gt;AngularJS&lt;/a&gt; and the back end as an &lt;a href="http://expressjs.com"&gt;Express&lt;/a&gt; app (the most
popular &lt;a href="http://nodejs.org"&gt;NodeJS&lt;/a&gt; web framework). I&amp;#8217;ve written gobs of tests in
&lt;a href="http://jasmine.github.io"&gt;Jasmine&lt;/a&gt; (using &lt;a href="https://github.com/mhevery/jasmine-node"&gt;jasmine-node&lt;/a&gt; for server-side tests) and drawn on
tons of other open-source&amp;nbsp;packages.&lt;/p&gt;
&lt;p&gt;And I have &lt;em&gt;loved&lt;/em&gt;&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;A small example: a moment ago, looking up the link for Jasmine, I noted that the
latest version released today. My response was, &amp;#8220;Ooh&amp;#8212;cool!&amp;#8221;&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;What changed? Well, mostly I changed, but also JavaScript changed a bit. We both
grew up over the last four years. On the JavaScript side of things, a lot of
good design patterns and tools have come into play in that span. I&amp;#8217;m sure there
were plenty of good, disciplined web developers writing clear, careful, 
well-organized client-side JavaScript four years go. But in the interval, that
kind of JavaScript got a lot more prominent, in part because it has had help
from the rapid rise of server-side JavaScript in the form of Node.js and its
flourishing ecosystem of components and tools. Build tools like
&lt;a href="http://browserify.org"&gt;Browserify&lt;/a&gt; and development tools like &lt;a href="http://livereload.com"&gt;LiveReload&lt;/a&gt; and
&lt;a href="https://incident57.com/codekit/"&gt;Codekit&lt;/a&gt; have combined with best practices learned from those long years of
jQuery/&lt;span class="caps"&gt;DOM&lt;/span&gt;-manipulation hell so that these days, good JavaScript is a lot like
good programming in any other language: highly modular, carefully designed, and&amp;nbsp;well-organized.&lt;/p&gt;
&lt;p&gt;In the same period of time, I have matured enormously as a developer (just
enough to see how far I still have to go, of course). At the point where I most
hated JavaScript, I also really struggled to see the utility of callbacks.
Frankly, it took me the better part of a month just to get my head around 
it&amp;#8212;most of the tutorials out there just assumed you understood them already, 
and, well: I didn&amp;#8217;t. Functions as first-class members of a language was new to 
me at that point. Fast-forward through several years of full-time Python 
development, lots of time spent reading about software development and some 
harder computer science concepts, and my perspective on JavaScript has shifted
more than a little. Closures are beautiful, wonderful things now. Functions as
arguments to other functions are delightful and extremely expressive. Prototypal
inheritance&amp;#8212;trip me up though it sometimes still does&amp;#8212;is a fascinating
variation on the idea of inheritance and one that I think I like rather better
than classical inheritance.&lt;sup id="fnref:io"&gt;&lt;a class="footnote-ref" href="#fn:io" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;There are still things I don&amp;#8217;t love about JavaScript. Its syntax owes far too
much to the C family of languages to make me happy; I quite like the way that
CoffeeScript borrows from Python (white-space-delimited blocks, use of equality
words like &lt;code&gt;is&lt;/code&gt; and boolean rules like &lt;code&gt;and&lt;/code&gt; rather than &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
respectively, etc.). And I am looking forward to a number of features coming in
the next version of JavaScript&amp;#8212;especially generators and the &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;
keywords, which will allow for &lt;em&gt;much&lt;/em&gt; saner&amp;nbsp;patterns.&lt;/p&gt;
&lt;p&gt;But all of that is simply to say that I am now starting to know JavaScript
enough to know that its &lt;em&gt;real&lt;/em&gt; issues aren&amp;#8217;t the surface-level differences from
the other languages with which I&amp;#8217;m familiar. They&amp;#8217;re not even the warts I noted
here. They&amp;#8217;re things like the mix of classical and prototypal inheritance in the
way the language keywords and object instantiation work. But I don&amp;#8217;t mind those.
Every language has tradeoffs. Python&amp;#8217;s support for lambdas is pretty minimal,
despite the utility of anonymous functions, for example. But I &lt;em&gt;like&lt;/em&gt; the
tradeoffs JavaScript makes.&lt;sup id="fnref:coffee"&gt;&lt;a class="footnote-ref" href="#fn:coffee" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;In other words, I discovered the same thing so many other people have over the
last few years: JavaScript isn&amp;#8217;t just a good choice for utilitarian reasons.
Beneath that messy exterior is a gem of a language. I&amp;#8217;m having a lot of fun with&amp;nbsp;it.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Thus the early balding starting by my temples.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;My wife&amp;#8217;s bemused response: &amp;#8220;Is that &lt;em&gt;another&lt;/em&gt; language?&amp;#8221; Take that as you will.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:io"&gt;
&lt;p&gt;The couple weeks I got to spend &lt;a href="http://www.chriskrycho.com/2014/a-little-crazy.html"&gt;playing&lt;/a&gt; with &lt;a href="http://iolanguage.org"&gt;Io&lt;/a&gt; certainly helped! Io&amp;#8217;s prototypal inheritance is semantically &amp;#8220;purer&amp;#8221; than JavaScript&amp;#8217;s, which is quite an improvement in my view. JavaScript&amp;#8217;s &lt;code&gt;new&lt;/code&gt; keyword and the pseudo-classical object pattern it brings along can go rot in a bog.&amp;#160;&lt;a class="footnote-backref" href="#fnref:io" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:coffee"&gt;
&lt;p&gt;Truth be told, I like them even better from the perspective of CoffeeScript, which hides a lot of the rough edges of JavaScript and, as noted above, brings in quite a few things I like from Python. For my part, I intend to write as much CoffeeScript as possible going forward.&amp;#160;&lt;a class="footnote-backref" href="#fnref:coffee" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 15 Nov 2014 00:30:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2014-11-15:2014/growing-up-together.html</guid><category>software development</category></item><item><title>A Ridiculous Situation</title><link>http://www.chriskrycho.com/2014/a-ridiculous-situation.html</link><description>&lt;p&gt;One of the pieces of code I&amp;#8217;m maintaining has an &lt;em&gt;absurd&lt;/em&gt; situation in its build
structure&amp;#8212;honestly, I&amp;#8217;m not sure how it ever compiled. For simplicity&amp;#8217;s sake,
let us assume the four following&amp;nbsp;files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secondary.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writer.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calculator.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The project has many more files than this, of course, but these are the
important ones for demonstrating this particular piece of insanity (which shows
up &lt;em&gt;many&lt;/em&gt; places in the&amp;nbsp;codebase).&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m reproducing here some dummy code representing an &lt;em&gt;actual set of 
relationships in the codebase&lt;/em&gt;. The functions and module nameshave been changed;
the relationships between the pieces of code have not.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; When I started trying
to build the program that included what I am representing as &lt;code&gt;main.c&lt;/code&gt; below,
this is the basic structure I&amp;nbsp;found:&lt;/p&gt;
&lt;h3 id="maincpp"&gt;&lt;code&gt;main.cpp&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is the main module of the program. In the actual code in which I found this
particular morass, it was actually code generated by the &lt;span class="caps"&gt;UI&lt;/span&gt; builder in Visual
Studio 6&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; and then turned into an unholy mess by a developer whose idea of
good programming involved coupling the various parts of the code as tightly as
possible.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="c"&gt;#include &amp;quot;calculator.h&amp;quot;
#include &amp;quot;secondary.h&amp;quot;

int a=0, int b=0;

int addNumbers(a, b) {
    return a+b;
}

void doBadThingsWithGlobals(int * someNumber) {
    a = 6;
    *someOtherNumber = 5;
}

#include &amp;quot;writer.h&amp;quot;

void main() {
    a = 3;
    doBadThingsWithGlobals(&amp;amp;b);
    addNumbers(a, b);
    doStuffWithNumbers(a,b);
    subtractNumbers(b, a);
}

// More insanity follows...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, the main function and the &lt;code&gt;doBadThingsWithGlobals&lt;/code&gt; function are both
modifying global state, and yes, there is an include statement midway down
through the module. (Just wait till you see what it&amp;nbsp;does.)&lt;/p&gt;
&lt;h3 id="secondary"&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;secondary&amp;#8221;&lt;/h3&gt;
&lt;p&gt;Here is a secondary module which has been somewhat cleaned up. It has normal
relationships between header and source files, and includes all its dependency
headers at the top of the file. It has a header which defines the public &lt;span class="caps"&gt;API&lt;/span&gt; for
the module, and that even has inclusion guards on&amp;nbsp;it.&lt;/p&gt;
&lt;h4 id="secondaryh"&gt;&lt;code&gt;secondary.h&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class="c"&gt;#ifndef SECONDARY_H
#define SECONDARY_H

int doStuffWithNumbers();

#endif SECONDARY_H
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="secondaryc"&gt;&lt;code&gt;secondary.c&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;doStuffWithNumbers&lt;/code&gt; function here calls &lt;code&gt;addNumbers&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="c"&gt;#include &amp;quot;secondary.h&amp;quot;
#include &amp;quot;calculator.h&amp;quot;

int doStuffWithNumbers(int x, int y) {
    addNumbers(x, y);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;But wait!&lt;/em&gt; you say, &lt;em&gt;That function isn&amp;#8217;t defined here!&lt;/em&gt; Ah, and you would be
right, except that it doesn&amp;#8217;t refer to the &lt;code&gt;addNumbers&lt;/code&gt; function in &lt;code&gt;main.c&lt;/code&gt;. It
refers to a function implementation in &lt;code&gt;calculator.h&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="calculatorh"&gt;&lt;code&gt;calculator.h&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class="c"&gt;int addNumbers(int p, int q) {
    return p + q;
}

int subtractNumbers(int r, int s) {
    return r - s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Strangely, this &lt;code&gt;addNumbers&lt;/code&gt; function is identical to the one in &lt;code&gt;main.c&lt;/code&gt;. Even
&lt;em&gt;more&lt;/em&gt; strangely, it is defined&amp;#8212;not merely declared, actually defined&amp;#8212;in
the header file! Nor is this the only such function. Look at the details of
&lt;code&gt;writer.h&lt;/code&gt;, which was mysteriously included above in the middle of the main&amp;nbsp;module.&lt;/p&gt;
&lt;h3 id="writerh"&gt;&lt;code&gt;writer.h&lt;/code&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class="c"&gt;void writeStuff() {
    fprintf(stdout, &amp;quot;a: %d, b: %d&amp;quot;, a, b);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again, we have a full-fledged implementation in the header file. Why, you
ask? Presumably because the developer responsible for writing this code never
quite got his head around how C&amp;#8217;s build system works. The entirety of one of the
central components of this software&amp;#8212;an element that in any normal build would
be a common library&amp;#8212;was a single, approximately 2,000-line &lt;em&gt;header file&lt;/em&gt;. (Say
hello to &lt;code&gt;calculator.h&lt;/code&gt; up there; that&amp;#8217;s what I&amp;#8217;m abstracting away for this
example.)&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Worse: it is printing the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and no, I am not skipping some
part of &lt;code&gt;writer.h&lt;/code&gt;. It is getting those from &lt;code&gt;main.c&lt;/code&gt;, because it was included
after they were defined, and the build process essentially drops this header
inline into &lt;code&gt;main.c&lt;/code&gt; before it compilation.&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; So here we have a header file
with the implementation of a given piece of code, included in a specific
location and defined in such a way that if you change where it is included, it
will no longer function properly (since the variables will not have been&amp;nbsp;defined!)&lt;/p&gt;
&lt;p&gt;Worse, there are conflicting definitions for one of the functions used in
&lt;code&gt;main.c&lt;/code&gt;, and because of its dependency on &lt;em&gt;other&lt;/em&gt; functions in &lt;code&gt;calculator.h&lt;/code&gt;
(e.g. &lt;code&gt;subtractNumbers&lt;/code&gt; in this mock-up), it cannot be removed! Moreover, given
the many places &lt;code&gt;calculator.h&lt;/code&gt; is referenced throughout the code base, it is
non-trivial to refactor it.&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;If this sounds insane&amp;#8230; that&amp;#8217;s because it&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re curious how I dealt with it, well&amp;#8230; I renamed the &lt;code&gt;addNumbers()&lt;/code&gt; 
function in &lt;code&gt;main.c&lt;/code&gt; to &lt;code&gt;_addNumbers()&lt;/code&gt; and put a loud, angry &lt;code&gt;TODO&lt;/code&gt; on it for the
current release, because the only way to fix it is to refactor this whole giant&amp;nbsp;mess.&lt;/p&gt;
&lt;p&gt;The takeaway of the story, if there is one, is that people will do crazier,
weirder, worse things than you can possibly imagine when they don&amp;#8217;t understand
the tools they are using and just hack at them till they can make them work. The
moral of the story? I&amp;#8217;m not sure. Run away from crazy code like this? Be
prepared to spend your life&amp;nbsp;refactoring?&lt;/p&gt;
&lt;p&gt;How about: try desperately &lt;em&gt;not&lt;/em&gt; to leave this kind of thing for the person
following&amp;nbsp;you.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;That&amp;#8217;s actually not &lt;em&gt;wholly&lt;/em&gt; true, because these pieces of code are also
duplicated in numerous places throughout the codebase. We&amp;#8217;ve eliminated as
many as possible at present&amp;#8230; but not all of them, courtesy of the crazy
dependency chains that exist. Toss in a dependency on Visual Studio 6 for
some of those components, and, well&amp;#8230; suffice it to say that we&amp;#8217;re just
happy there are only two versions floating around instead of the seven that
were present when I started working with this codebase two and a half years
ago.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Yes, &lt;a href="http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_6.0_.281998.29"&gt;&lt;em&gt;that&lt;/em&gt;&lt;/a&gt; Visual Studio 6. The one from 1998. Yes, that&amp;#8217;s insane.
No, we haven&amp;#8217;t managed to get rid of it yet, though we&amp;#8217;re close. So close.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;I am not joking. Multi-thousand line functions constituting the entirety
of a program are not just &lt;em&gt;normal&lt;/em&gt;, they are pretty much the only way that
programmer ever wrote. When you see the code samples below, you will see
why: someone was lacking an understanding of C&amp;#8217;s build system.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Also, that&amp;#8217;s the piece of code of which I found seven different versions
in various places when I started. Seven!&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;I once ran into some code working on a different project for an entirely
different client where there had been a strict 1,000-line limit to C source
files, as part of an attempt to enforce some discipline in modularizing the
code. Instead of embracing modularity, the developers just got in the habit
of splitting the source file and adding &lt;code&gt;#include&lt;/code&gt; statements at the end of
each file so that they could just keep writing their non-modular code.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;I have tried. Twice. I&amp;#8217;m hoping that the third time &lt;em&gt;will&lt;/em&gt; be the charm.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 07 Nov 2014 21:00:00 -0500</pubDate><guid>tag:www.chriskrycho.com,2014-11-07:2014/a-ridiculous-situation.html</guid><category>software development</category></item><item><title>The Next Generation of Version Control</title><link>http://www.chriskrycho.com/2014/next-gen-vcs.html</link><description>&lt;p&gt;The current state of affairs in version control systems is a mess. To be sure,
software development is &lt;em&gt;far&lt;/em&gt; better with &lt;em&gt;any&lt;/em&gt; of the distributed version
control systems in play&amp;#8212;the three big ones being &lt;a href="http://git-scm.com"&gt;Git&lt;/a&gt;, &lt;a href="http://mercurial.selenic.com"&gt;Mercurial&lt;/a&gt;
(&lt;code&gt;hg&lt;/code&gt;), and &lt;a href="http://bazaar.canonical.com/en/"&gt;Bazaar&lt;/a&gt; (&lt;code&gt;bzr&lt;/code&gt;), with a few other names like &lt;a href="http://www.fossil-scm.org"&gt;Fossil&lt;/a&gt;
floating around the periphery&amp;#8212;than it ever was in a centralized version
control system. There are definitely a few downsides for people converting over
from some standard centralized version control systems, notably the increased
number of steps in play to accomplish the same tasks.&lt;sup id="fnref:dad"&gt;&lt;a class="footnote-ref" href="#fn:dad" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; But on the whole,
the advantages of being able to commit locally, have multiple complete copies of
the repository, and share work without touching a centralized server far
outweigh any downsides compared to the old centralized&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;That being so, my opening statement remains true, I think: &lt;em&gt;The current state of
affairs in version control is a mess.&lt;/em&gt; Here is what I mean: of those three major
players (Git, Hg, and Bazaar), each has significant downsides relative to the
others. Git is famously complex (even arcane), with a user interface design
philosphy closely matching the &lt;span class="caps"&gt;UI&lt;/span&gt; sensibilities of Linus Torvalds&amp;#8212;which is to
say, all the wires are exposed, and it is about as user-hostile as it could
be.&lt;sup id="fnref:hostile"&gt;&lt;a class="footnote-ref" href="#fn:hostile" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; It often outperforms Hg or Bazaar, but it has quirks, to say the
very least. Hg and Bazaar both have &lt;em&gt;much&lt;/em&gt; better designed user interfaces. They
also have saner defaults (especially before the arrival of Git 2.0), and they
have better branching models and approaches to history.&lt;sup id="fnref:history"&gt;&lt;a class="footnote-ref" href="#fn:history" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; They have
substantially better documentation&amp;#8212;perhaps especially so with Bazaar, but with
either one a user can understand how to use the tool &lt;em&gt;without having to
understand the mechanics of the tool&lt;/em&gt;. This is simply not the case with Git, and
while I &lt;em&gt;enjoy&lt;/em&gt; knowing the mechanics of Git because I find them interesting,
&lt;em&gt;having&lt;/em&gt; to understand the mechanics of a tool to be able to use it is a&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;But the other systems have their downsides relative, to Git, too. (I will focus
on Hg because I have never used Bazaar beyond playing with it, though I have
read a good bit of the documentation.) Mutable history in Git is valuable and
useful at times; I have rewritten whole sequences of commits when I realized I
committed the wrong things but hadn&amp;#8217;t yet pushed.&lt;sup id="fnref:mutable"&gt;&lt;a class="footnote-ref" href="#fn:mutable" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; Being able to commit
chunks instead of having to commit whole files at a go is good; I feel the lack
of this every time I use Hg.&lt;sup id="fnref:patch"&gt;&lt;a class="footnote-ref" href="#fn:patch" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; (Needing to understand the &lt;em&gt;file system&lt;/em&gt;
that Git invented to make sure you do not inadvertently destroy your repository
is&amp;#8230; not so good.) A staging area is nice,&lt;sup id="fnref:queues"&gt;&lt;a class="footnote-ref" href="#fn:queues" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt; (even if &lt;em&gt;having&lt;/em&gt; to stage
everything manually can be in the pain in the neck&lt;sup id="fnref:dash-a"&gt;&lt;a class="footnote-ref" href="#fn:dash-a" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;
&lt;p&gt;In short, then, there was no clear winner for this generation. Each of the tools
has significant upsides and downsides relative to the others. Git has become the
&lt;em&gt;de facto&lt;/em&gt; standard, but &lt;em&gt;not&lt;/em&gt; because of its own superiority over the
alternatives. Rather, it won because of other forces in the community. Mostly I
mean &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;, which is a &lt;em&gt;fantastic&lt;/em&gt; piece of software and easily the
most significant driving factor in the wider adoption of Git as a tool. The
competition (&lt;a href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt; and &lt;a href="https://launchpad.net"&gt;Launchpad&lt;/a&gt;) are nowhere near
the same level of sophistication or elegance, and they certainly have not
managed to foster the sorts of community that GitHub has. The result has been
wide adoption of Git, and a degree of Stockholm Syndrome among developers who
have adopted it and concluded that the way Git works is the way a distributed
version control system &lt;em&gt;should&lt;/em&gt;&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;It is not. Git is complicated to use and in need of tools for managing its
complexity; the same is true of Hg and Bazaar, though perhaps to a slightly
lesser extent because of their saner branching models. This is what has given
rise to the &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;plethora&lt;/a&gt; of &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;different&lt;/a&gt; formal
&lt;a href="https://about.gitlab.com/2014/09/29/gitlab-flow/"&gt;workflows&lt;/a&gt; representing various attempts to manage that complexity
(which have been &lt;a href="https://bitbucket.org/yujiewu/hgflow/wiki/Home"&gt;applied&lt;/a&gt; to other systems &lt;a href="https://andy.mehalick.com/2011/12/24/an-introduction-to-hgflow"&gt;as well&lt;/a&gt;).
Managing branching, linking that workflow to issues, and supplying associated
documentation for projects have also cropped up as closely associated tasks&amp;#8212;
thus the popularity of GitHub issues and Bitbucket wikis, not to mention
&lt;a href="http://www.fossil-scm.org"&gt;Fossil&amp;#8217;s&lt;/a&gt; integration of both into the &lt;span class="caps"&gt;DVCS&lt;/span&gt; tool itself. None of the
tools handle differences between file systems very elegantly (and indeed, it
took &lt;em&gt;years&lt;/em&gt; for Git even to be useable on Windows). All of them especially
struggle to manage symlinks and executable&amp;nbsp;flags.&lt;/p&gt;
&lt;p&gt;So there is an enormous opportunity for the &lt;em&gt;next&lt;/em&gt; generation of tools. Git, Hg,
and so on are huge steps forward for developers from &lt;span class="caps"&gt;CVS&lt;/span&gt;, Visual SourceSafe, or
&lt;span class="caps"&gt;SVN&lt;/span&gt;. But they still have major weaknesses, and there are many things that not
only can but should be better. In brief, I would love for the next-generation
version control system to&amp;nbsp;be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distributed (this is now a&amp;nbsp;non-negotiable);&lt;/li&gt;
&lt;li&gt;fast;&lt;/li&gt;
&lt;li&gt;well-documented&amp;#8212;&lt;em&gt;at least&lt;/em&gt; as well as Hg is, and preferably as well as
    Bazaar&amp;nbsp;is;&lt;/li&gt;
&lt;li&gt;well-designed, which is to say having a user interface that is actually a
    user-interface (like Hg&amp;#8217;s) and not an extremely leaky abstraction around the
    mechanics;&lt;sup id="fnref:leaky"&gt;&lt;a class="footnote-ref" href="#fn:leaky" rel="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;fast;&lt;/li&gt;
&lt;li&gt;file-system oriented, &lt;em&gt;not&lt;/em&gt; diff-oriented: this is one of Git&amp;#8217;s great
    strengths and the reason for a lot of its performance&amp;nbsp;advantages;&lt;/li&gt;
&lt;li&gt;extensible, with a good public &lt;span class="caps"&gt;API&lt;/span&gt; so that it is straightforward to add
    functionality like wikis, documentation, social interaction,  and issue
    tracking in a way that actually integrates the tool;&lt;sup id="fnref:integrates"&gt;&lt;a class="footnote-ref" href="#fn:integrates" rel="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;and last but not least, truly&amp;nbsp;cross-platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is a non-trivial task, but the first &lt;span class="caps"&gt;DVCS&lt;/span&gt; that manages to hit even a
sizeable majority of these desires will gain a lot of traction in a hurry. The
second generation of distributed version control has been good for us. The third
could be&amp;nbsp;magical.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:dad"&gt;
&lt;p&gt;A point that was highlighted for me in a conversation a few months ago
with my father, a programmer who has been using &lt;span class="caps"&gt;SVN&lt;/span&gt; for a &lt;em&gt;long&lt;/em&gt; time and
found the transition to Git distinctly less than wonderful.&amp;#160;&lt;a class="footnote-backref" href="#fnref:dad" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:hostile"&gt;
&lt;p&gt;Anyone who feels like arguing with me on this point should go spend
five minutes laughing at the &lt;a href="http://git-man-page-generator.lokaltog.net"&gt;fake man pages&lt;/a&gt; instead.&amp;#160;&lt;a class="footnote-backref" href="#fnref:hostile" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:history"&gt;
&lt;p&gt;Few things are as hotly debated as the relative merits of the
different systems&amp;#8217; branching models and approaches to history. At the least,
I can say that Hg and Bazaar&amp;#8217;s branching models are &lt;em&gt;more to my taste&lt;/em&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:history" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:mutable"&gt;
&lt;p&gt;Yes, there are extensions that let you do this with Hg, but they are
fragile at best in my experience, and substantially less capable than Git&amp;#8217;s.&amp;#160;&lt;a class="footnote-backref" href="#fnref:mutable" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:patch"&gt;
&lt;p&gt;Yes, I know about Hg&amp;#8217;s record extension. No, it is &lt;em&gt;not&lt;/em&gt; quite the
same, especially because given the way it is implemented major &lt;span class="caps"&gt;GUI&lt;/span&gt; tools
cannot support it without major chicanery.&amp;#160;&lt;a class="footnote-backref" href="#fnref:patch" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:queues"&gt;
&lt;p&gt;Yes, I know about Hg&amp;#8217;s queue extension, too. There is a reason it is
not turned on by default, and using it is substantially more arcane than
Git&amp;#8217;s staging are. Think about that for a minute.&amp;#160;&lt;a class="footnote-backref" href="#fnref:queues" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:dash-a"&gt;
&lt;p&gt;Yes, there is the &lt;code&gt;-a&lt;/code&gt; flag. No, I do not want to have to remember it
for every commit.&amp;#160;&lt;a class="footnote-backref" href="#fnref:dash-a" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:leaky"&gt;
&lt;p&gt;Let&amp;#8217;s be honest: if Git&amp;#8217;s abstraction were a boat, it would sink. It&amp;#8217;s
just that leaky.&amp;#160;&lt;a class="footnote-backref" href="#fnref:leaky" rev="footnote" title="Jump back to footnote 8 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:integrates"&gt;
&lt;p&gt;GitHub does all of this quite well&amp;#8230; but they have had to write
heaps and gobs of software &lt;em&gt;around&lt;/em&gt; Git to make it work.&amp;#160;&lt;a class="footnote-backref" href="#fnref:integrates" rev="footnote" title="Jump back to footnote 9 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 16 Oct 2014 21:45:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-10-16:2014/next-gen-vcs.html</guid><category>software development</category></item><item><title>Pushing Into C’s Corner Cases</title><link>http://www.chriskrycho.com/2014/pushing-into-cs-corner-cases.html</link><description>&lt;p&gt;I&amp;#8217;m working on a project that is all in C because of its long history and
legacy. We&amp;#8217;re slowly modernizing the codebase and writing all our new code in
Python (using NumPy, C extensions, and so on for performance where necessary).
Occasionally, I just want to bang my head against the wall because there are
things we can do so simply in any modern language that you just can&amp;#8217;t do in any
straightforward way in C. For example, I have file writers that all work
&lt;em&gt;exactly&lt;/em&gt; the same way, with the single exception that the format string and the
data that you put into it vary for each&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;In Python, this would be straightforward to handle with the class machinery: you
could simply specify the format string in each inheriting class and define the
data points to be supplied at the top of an overriding function, call the parent
function with &lt;code&gt;super()&lt;/code&gt; and be&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;To do something similar in pure C is nearly impossible. You can supply a format
string with each function (or module, or however you separate out the code), and
if you feel especially clever you could convert all your data types to strings
and pass them as a list to be printed by the standard function. The net result
would be &lt;em&gt;longer&lt;/em&gt; and &lt;em&gt;less maintainable&lt;/em&gt; than simply having a set of
essentially-duplicate functions,&amp;nbsp;though.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 12 Aug 2014 09:00:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-08-12:2014/pushing-into-cs-corner-cases.html</guid><category>software development</category></item><item><title>The Long Race</title><link>http://www.chriskrycho.com/2014/the-long-race.html</link><description>&lt;p&gt;It has been too long since I have written anything&amp;#8212;too long not for my
audience (small as it is), but for my soul. The last few weeks of class were of
course even busier than the rest of the semester, courtesy of a couple major
assignments I wrapped up and studying for and taking finals, all while doing my
normal work as a software developer on the side. Writing simply fell by the
wayside, alas. Even my devotions posts simply didn&amp;#8217;t happen. And that is all
right; there are seasons for all of these things, and it is not as if I didn&amp;#8217;t
write many thousands of words in late April and early May. They simply were not
&lt;em&gt;blogging&lt;/em&gt;&amp;nbsp;words.&lt;/p&gt;
&lt;p&gt;So here I am tonight, writing simply to unwind. I spent much of the day working
on various software projects&amp;#8212;a pattern I expect to carry throughout the
summer. In addition to my regular work for Quest Consultants Inc. back in
Norman, I am picking up various web design and development jobs over the
summer. God has been gracious in answering prayers for opportunities to pick up
extra contracting work, and I have several really excellent opportunities to
supplement my 20 hours a week for Quest with other work. That is nice not only
financially, but also intellectually. The change of pace between different
kinds of work helps me stay fresh on all of them. My own personal &lt;a href="http://www.chriskrycho.com/2014/a-little-crazy.html"&gt;side
projects&lt;/a&gt; are coming along slowly, but that is all right. Slow but steady
is the best way to go about those kinds of projects&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;That lesson is one I have learned more and more from my ongoing and
ever-increasing delight in running. So far in May I have run about 125 miles; I
expect to run over 150 miles this month in total (though of course all such
plans are always subject to revision, and never more so than when one&amp;#8217;s wife is
37 weeks pregnant). I am now running easy, aerobic miles ten to fifteen seconds
faster per mile than I could manage in my personal best half marathon time a
few years ago. I run so (relatively) quickly now not because of any particular
innate athleticism&amp;#8212;quite the contrary, as anyone who has known me since high
school can attest. I can run as far and fast as I do only because I have stuck
with it and used a &lt;a href="http://markallenonline.com/maoArticles.aspx?AID=2" title="Working Your Heart"&gt;smart training plan&lt;/a&gt;. And really, as in most
parts of life, it is that sticking-with-it that leads to getting somewhere. Of
course, sticking with it is no guarantee that things will work out. It is
usually a requisite step along the way, though&amp;#8212;a
necessary-though-insufficient condition. That is simply the way God built the&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;Little Ellie is quickly wrapping up her second year of life in this big world.
She is saying lots of words (at last!), whining until she has driven Jaimie a
bit crazy (in too-typical toddler fashion), and growing up in big ways and
small. We are having a great deal of fun watching her start to be more socially
aware and active, even if it is a little strange to have a daughter old enough
that she has friends whom she loves and who love her in turn. She has also
discovered a deep love of &lt;em&gt;Star Wars&lt;/em&gt;&amp;#8212;no surprise for a daughter of ours,
though the intensity of her delight in the movies, for a girl who is not yet
two years old, did surprise both Jaimie and me a bit. You should hear her try
to say &amp;#8220;Darth Vader&amp;#8221; or &amp;#8220;Dark Side&amp;#8221; or &amp;#8220;Star Wars.&amp;#8221; It is impossibly&amp;nbsp;adorable.&lt;/p&gt;
&lt;p&gt;Jaimie is, as noted above, some 37 weeks pregnant and quite ready to be done
carrying our second little gal on the inside. She is still plugging away slowly
at the &lt;a href="http://jaimiekrycho.com/shaking-epheria-pt-1/" title="Bloodlines: The Shaking of Epheria, Part I"&gt;second novella&lt;/a&gt; in her &lt;a href="http://www.amazon.com/Bloodlines-Epheria-The-Trilogy-ebook/dp/B00HY478QO/" title="Get Bloodlines of Epheria on Kindle!"&gt;Bloodlines&lt;/a&gt; fantasy trilogy.
She manages to keep Ellie entertained&amp;#8212;no small feat&amp;#8212;and does a remarkable
job taking care of things around the house so that I can focus on work and
school. Her struggle with &lt;a href="http://2012-2013.chriskrycho.com/theology/marriage-depression/" title="Marriage and Depression"&gt;depression&lt;/a&gt; has not diminished, but
God has given us grace to carry on and she and I have both learned to respond
in better, healthier, more helpful ways when the slumps&amp;nbsp;come.&lt;/p&gt;
&lt;p&gt;As for the future, we really have no idea what the next several yeras will
hold. I plan to finish my Master of Divinity&amp;#8212;Lord willing, around December
2016. In the meantime, we will keep raising our little girls, I will keep
writing software, and we will keep exploring and seeing what we want to do and
how best to pursue those desires in a way that honors God. Who knows what those
years will hold? God only, and certainly not&amp;nbsp;us.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 24 May 2014 00:07:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-05-24:2014/the-long-race.html</guid><category>software development</category><category>family</category><category>fitness</category></item><item><title>A Little Crazy</title><link>http://www.chriskrycho.com/2014/a-little-crazy.html</link><description>&lt;p&gt;I&amp;#8217;m going to do something a little crazy, I&amp;#8217;ve decided. I&amp;#8217;m going to go ahead
and do like I wrote &lt;a href="http://www.chriskrycho.com/2014/doing-it-myself.html"&gt;a bit back&lt;/a&gt;, and make &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;
actually a thing over the course of the rest of the year. Not so crazy. What is
a bit nuts is the way I&amp;#8217;ve decided to go about that process. In short: as close
to the hardest way possible as I can&amp;nbsp;conceive.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Over the last couple weeks, I&amp;#8217;ve been spending a fair bit of time toying with
&lt;a href="http://iolanguage.org"&gt;Io&lt;/a&gt;. It&amp;#8217;s a neat little language, very different in its approach to a &lt;em&gt;lot&lt;/em&gt;
of things than the languages I&amp;#8217;ve used previously. My programming language
history is very focused on the &amp;#8220;normal&amp;#8221; languages. The vast majority of real-
world code I&amp;#8217;ve written has been in one of C, &lt;span class="caps"&gt;PHP&lt;/span&gt;, or Python. I&amp;#8217;ve done a good
bit of Javascript along the way, more Fortran than anyone my age has any
business having done, and a little each of Java and Ruby. Like I said: the
normal ones. With the exception of Javascript, all of those are either standard
imperative, object-oriented, or mixed imperative and object-oriented languages.
Python and Ruby both let you mix in a fair bit of functional-style programming,
and Javascript does a &lt;em&gt;lot&lt;/em&gt; of that and tosses in prototypal inheritance to&amp;nbsp;boot.&lt;/p&gt;
&lt;p&gt;But still: they&amp;#8217;re all pretty mainstream, &amp;#8220;normal&amp;#8221; languages. Io isn&amp;#8217;t like that
at all. For one thing, it&amp;#8217;s hardly popular in any sense at all. Well-known among
the hackers&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; I know, perhaps, but not popular by any measure. It&amp;#8217;s small. And
it&amp;#8217;s very &lt;em&gt;alien&lt;/em&gt; in some ways. It&amp;#8217;s &lt;a href="http://en.wikipedia.org/wiki/Prototype-based_programming"&gt;prototypal inheritance&lt;/a&gt;, not normal
inheritance. Courtesy of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain"&gt;Javascript&lt;/a&gt;, I have a &lt;em&gt;little&lt;/em&gt; familiarity
with that, but it&amp;#8217;s definitely still not my default way of thinking about
inheritance. Python&amp;#8217;s inheritance model (the one I use most frequently) is
&lt;em&gt;essentially&lt;/em&gt; the same as that in C++, Java, &lt;span class="caps"&gt;PHP&lt;/span&gt;, and so on&amp;#8212;it&amp;#8217;s normal
class-driven inheritance. Io goes off and does full-blown prototypal
inheritance; even just the little I&amp;#8217;ve played with it has been&amp;nbsp;fun.&lt;/p&gt;
&lt;p&gt;Io also does a bunch of other things a &lt;em&gt;lot&lt;/em&gt; different from the other languages
I&amp;#8217;ve used. First, there are no keywords or&amp;#8212;formally speaking&amp;#8212;even operators
in the language. Every action (including ones like &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;) is simply a
message. Every value is an object (so &lt;code&gt;1.0&lt;/code&gt; is just as fully an object as an
arbitrarily-defined &lt;code&gt;Person&lt;/code&gt;). The combination means that writing &lt;code&gt;1 + 2&lt;/code&gt; is
actually just interpreted as the object &lt;code&gt;1&lt;/code&gt; receiving the &lt;code&gt;+&lt;/code&gt; message carrying
as its &amp;#8220;argument&amp;#8221; the &lt;code&gt;2&lt;/code&gt; object (really just the message contents). This is
&lt;em&gt;completely&lt;/em&gt; different at a deep paradigm level from the normal object-oriented
approach with object methods, even in a language like Python where all elements
are objects (including functions). The net result isn&amp;#8217;t necessarily particularly
different from calling methods on objects, but it is a &lt;em&gt;little&lt;/em&gt; different, with
have some interesting consequences. Notably (though trivially&amp;#8212;or at least, so
it seems to me at this point), you can pass a message to the null object without
it being an error. More importantly, the paradigm shift is&amp;nbsp;illuminating.&lt;/p&gt;
&lt;p&gt;Io also has far more capabilities in terms of concurrency than any of the other
languagues with which I&amp;#8217;m familiar, because it actively implements the &lt;a href="http://en.wikipedia.org/wiki/Actor_model"&gt;Actor
Model&lt;/a&gt;, which means its implementation of messaging instead of object
method calls can behave in concurrent ways. (I&amp;#8217;d say more if I understood it
better. I don&amp;#8217;t yet, which is one of the reasons I want to study the language.
Concurrency is very powerful, but it&amp;#8217;s also fairly foreign to me.) It&amp;#8217;s also
like Lisp in that its code can be inspected and modified at runtime. I&amp;#8217;ve wanted
to learn a Lisp for several years for this kind of mental challenge, but the
syntax has always just annoyed me too much ever to get there. Io will give me a
lot of its benefits with a much more pleasant syntax. It has coroutines, which
are new to me, and also helpful for concurrency.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The long and short of it is that the language has a ton of features not present
in the languages I have used, and&amp;#8212;more importantly&amp;#8212;is &lt;em&gt;paradigmatically&lt;/em&gt;
different from them. Just getting familiar with it by writing a goodly amount
of code in it would be a good way to learn in practice a bunch of computer science concepts
I never had a chance to learn formally.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;By now, as long as I&amp;#8217;ve rambled about Io, you&amp;#8217;ve probably figured out where I
was going in that first paragraph. I&amp;#8217;ve decided to stretch my brain a bit and
write Step Stool in Io. There are bunches of static site generators out there in
Python already, many of them quite mature. (This site is running on &lt;a href="https://github.com/getpelican"&gt;one of
them&lt;/a&gt; as of the time I write this post&amp;#8212;it&amp;#8217;s quite solid, even its
quirks and limitations occasionally annoy me.) The point of Step Stool has
always been twofold, though. First, I&amp;#8217;ve wanted to get to a spot where I was
really running my own software to manage my site, letting me do whatever I want
with it and guaranteeing I always understand it well enough to make those kinds
of changes. Second, I&amp;#8217;ve just wanted to &lt;em&gt;learn&lt;/em&gt; a whole bunch along the way.
Third, it&amp;#8217;s right there in the website link: &lt;a href="http://step-stool.io"&gt;step-stool.io&lt;/a&gt;! How could I pass
up such an&amp;nbsp;opportunity?&lt;/p&gt;
&lt;p&gt;It is that second goal that has pushed me to do this crazy project this crazy
way. It&amp;#8217;s crazier than just teaching myself a language in order to do the
static site generator itself, too, because there are a few other pieces missing
that I&amp;#8217;ll need to write to make this work&amp;#8230; like a Markdown implementation and
an &lt;span class="caps"&gt;HTML&lt;/span&gt; templating language. I&amp;#8217;ve never written anything remotely like either
before, so I&amp;#8217;m going to take the chance to learn a &lt;em&gt;lot&lt;/em&gt; of new things. For the
Markdown implementation, rather than relying on regular expression parsing
(like most Markdowns do), I&amp;#8217;m going to use a Parsing Expression Grammar.
That will certainly be more efficient and reliable, but&amp;#8212;more importantly&amp;#8212;it
is also outside my experience. I have yet to start thinking through how to
tackle the &lt;span class="caps"&gt;HTML&lt;/span&gt; templating language implementation (though I know I am going to
make it an Io implementation of &lt;a href="http://slim-lang.com"&gt;Slim&lt;/a&gt;, which I quite&amp;nbsp;like).&lt;/p&gt;
&lt;p&gt;In any case, I&amp;#8217;m going to be taking a good bit longer to get Step Stool
finished. That is all right: I am going to learn a ton along the way, and I am
quite sure I will have a blast doing it. And that is &lt;em&gt;exactly&lt;/em&gt; what these kinds
of projects are&amp;nbsp;for.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll post updates as I go, with the things I&amp;#8217;m learning along the way.
Hopefully they&amp;#8217;ll be interesting (or at least&amp;nbsp;entertaining).&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Hackers in the original sense of the world. Not &amp;#8220;crackers&amp;#8221;, but people
who like hacking on code, figuring things out the hard way.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Python 3.5 is actually adding coroutines, and I&amp;#8217;m excited about that.
I&amp;#8217;ll feel much more comfortable with them there having used them in Io, I&amp;#8217;m
sure!&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;I got here backwards, as it were&amp;#8212;by way of an undergraduate degree in
physics. I don&amp;#8217;t regret that for a second: I got a much broader education
than I could have managed while getting an engineering degree, and most
importantly learned &lt;em&gt;how to learn&lt;/em&gt;: easily the most important skill anyone
gains from any engineering degree.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 29 Apr 2014 19:30:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-04-29:2014/a-little-crazy.html</guid><category>software development</category></item><item><title>Learning QML, Part 1</title><link>http://www.chriskrycho.com/2014/learning-qml-part-1.html</link><description>&lt;p&gt;For part of my work with Quest Consultants, I&amp;#8217;ve been picking up Qt&amp;#8217;s &lt;span class="caps"&gt;QML&lt;/span&gt;
toolkit to use in building out the &lt;span class="caps"&gt;UI&lt;/span&gt;. The declarative syntax and ability to
define one&amp;#8217;s own model in non-C++- or Python-specific ways is quite nice. That
said, the learning process has had more than a few bumps along the way. I
decided to go ahead and write those up as I go, both for my own reference and
in the hope that it may prove useful to others as I&amp;nbsp;go.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;QML&lt;/span&gt; is a &lt;em&gt;Javascript-like&lt;/em&gt; language for &lt;em&gt;declarative programming&lt;/em&gt; of a user
interface. So it&amp;#8217;s a Javascript-based language that sort of behaves like &lt;span class="caps"&gt;HTML&lt;/span&gt;.
In fact, it behaves like Javascript in terms of how you define, access, and
update properties, and you can embed full-featured (mostly) Javascript functions
and objects in&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;But when you have nested &lt;span class="caps"&gt;QML&lt;/span&gt; Types, you end up with them behaving more like
&lt;span class="caps"&gt;HTML&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The weirdest bit, and the thing that I&amp;#8217;m having the hardest time adjusting to,
is that you can only edit properties of root Types when you&amp;#8217;re working with an
instance of that Type. And those Types are defined by &lt;em&gt;documents&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, to give the simplest possible example, let&amp;#8217;s say I defined a new type called
&lt;code&gt;Monkey&lt;/code&gt;, in the &lt;code&gt;Monkey.qml&lt;/code&gt; file, like&amp;nbsp;this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Monkey.qml
import QtQuick 1.1

Item {
    id: monkey_root
    property int monkey_id: -1
    property string monkey_name: "I don't have a name!"

    Item {
        id: monkey_foot
        property string monkey_foot_desc: "The monkey has a foot!"
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can use that in another file. If they&amp;#8217;re in the same directory, it&amp;#8217;s
automatically imported, so I can just do something like&amp;nbsp;this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//main.qml
import QtQuick 1.1

// Rectangle is exactly what it sounds like. Here we can display things.
Rectangle {
    id: the_basic_shape
    height: 400
    width: 400
    color: green

    Monkey {
        id: monkey_instance
        monkey_id = 42
        monkey_name = "George"  // he's kind of a curious little guy
    }

    Text {
        text: monkey_instance.monkey_name
        color: "red"
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That creates a (really ugly) rectangle that prints the &lt;code&gt;Monkey&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s name in red
text on a green background. It&amp;#8217;s impossible to access directly the &lt;code&gt;monkey_foot&lt;/code&gt;
element, though, which means that composing more complex objects in reusable
ways is difficult. In fact, I haven&amp;#8217;t come up with a particularly good way to do
it yet. At least, I should say that I haven&amp;#8217;t come up with a good way to create
high-level reusable components yet. I can see pretty easily how to create
low-level reusable components, but once you start putting them together in any
&lt;em&gt;specific&lt;/em&gt; way, you can&amp;#8217;t recompose them in other&amp;nbsp;ways.&lt;/p&gt;
&lt;p&gt;From what I&amp;#8217;ve gotten my head around so far, this ends up being less flexible
than either &lt;span class="caps"&gt;HTML&lt;/span&gt; templating languages (which are, or at least can be, completely
declarative) or normal Javascript (which is obviously &lt;em&gt;not&lt;/em&gt; declarative). Mind
you, it&amp;#8217;s all sorts of &lt;em&gt;interesting&lt;/em&gt;, and I have a pretty decent idea what I&amp;#8217;m
going to do to implement our &lt;span class="caps"&gt;UI&lt;/span&gt; with it, but it&amp;#8217;s taken me most of the day to
get a good handle on that, and my head still feels a bit funny whenever I&amp;#8217;m
trying to see how best to create composable&amp;nbsp;components.&lt;/p&gt;
&lt;p&gt;Note, too, that this is the &lt;em&gt;only&lt;/em&gt; way to create a new basic type of object in
&lt;span class="caps"&gt;QML&lt;/span&gt;: it has to be the root level object in a &lt;span class="caps"&gt;QML&lt;/span&gt; document. I would &lt;em&gt;really&lt;/em&gt; like
to be able to access internal declarations&amp;#8212;to have named internal
types/objects. Unfortunately, &lt;span class="caps"&gt;QML&lt;/span&gt; doesn&amp;#8217;t let you do this. I suspect this has to
do with how the &lt;span class="caps"&gt;QML&lt;/span&gt; type system works: it actually binds these types to C++
objects behind the scenes. This is a non-trivially helpful decision in terms of
the performance of the application, but it certainly makes my brain a little bit&amp;nbsp;twitchy.&lt;/p&gt;
&lt;p&gt;There are two basic consequences of this structure. First, any types you need to
be able to use in other &lt;span class="caps"&gt;QML&lt;/span&gt; objects have to be defined in their own &lt;span class="caps"&gt;QML&lt;/span&gt;
documents. Second, it is (as near as I can see so far, at least) difficult to
create good generic &lt;span class="caps"&gt;QML&lt;/span&gt; types of more complex structures that you can then use
to implement specific variations. For example: if you want to create accordions,
you can create a fair number of the low-level elements in generic ways that you
can reuse, but once you get to the relationships between the actual model,
delegate, and view elements, you will need to create them in custom forms for
each distinct&amp;nbsp;approach.&lt;/p&gt;
&lt;p&gt;This is more like creating &lt;span class="caps"&gt;HTML&lt;/span&gt; documents than Javascript, which makes sense,
&lt;em&gt;if&lt;/em&gt; you remember that &lt;span class="caps"&gt;QML&lt;/span&gt; is Javascript-based but &lt;em&gt;declarative&lt;/em&gt;. You just have
to remember that while you can define some reusable components, the full-fledged
elements are like full &lt;span class="caps"&gt;HTML&lt;/span&gt; pages with a templating system: you can include
elements, but not override their internal contents. In &lt;span class="caps"&gt;QML&lt;/span&gt;, you can override
&lt;em&gt;some&lt;/em&gt; of their contents, which is nice&amp;#8212;but that is not the primary way to go
about&amp;nbsp;it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 11 Apr 2014 15:30:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-04-11:2014/learning-qml-part-1.html</guid><category>software development</category></item><item><title>Feels Right</title><link>http://www.chriskrycho.com/2014/feels-right.html</link><description>&lt;p&gt;I had spent most of the last week and a half working on getting
&lt;a href="http://www.firebirdsql.org"&gt;FirebirdSQL&lt;/a&gt; configured and ready to use for a project I&amp;#8217;m working on with
&lt;a href="http://www.questconsult.com"&gt;Quest Consultants&lt;/a&gt;. It was slow going. The tool is decent, but the
documentation is spotty and it felt like everything was just a bit of a slog&amp;#8212;to
get it working correctly, to get it playing nicely with other pieces of the
development puzzle, to get it working across platforms.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; Then, because I had
done something a &lt;em&gt;little&lt;/em&gt; bit silly in my eagerness to get up and going last
week and written code without a testable configuration, I hit a wall today. The
queries weren&amp;#8217;t working. I had made a &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception"&gt;bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I spent a substantial part of the day chasing down that bug, and then a
conversation with user &lt;em&gt;agronholm&lt;/em&gt; on the &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/"&gt;SQLAlchemy&lt;/a&gt; &lt;span class="caps"&gt;IRC&lt;/span&gt; channel
(&lt;a href="irc://irc.freenode.net/sqlalchemy"&gt;freenode/#sqlalchemy&lt;/a&gt;) got me thinking. The Firebird team describes
one of their options as an &amp;#8220;embedded&amp;#8221; server, but &lt;em&gt;agronholm&lt;/em&gt; pointed out that
what they really mean is &lt;em&gt;portable&lt;/em&gt;. It&amp;#8217;s running a standalone server and
client, but it&amp;#8217;s not part of the same thread/process (like SQLite is). Then
&lt;em&gt;agronholm&lt;/em&gt; very helpfully asked&amp;#8212;my having mentioned my preference for
&lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; earlier&amp;#8212;&amp;#8221;Does Postgres not have a portable version?&amp;#8221;
Two minutes later, we had both found &lt;a href="http://sourceforge.net/projects/postgresqlportable/"&gt;PostgreSQL Portable&lt;/a&gt;, and I&amp;nbsp;rejoiced.&lt;/p&gt;
&lt;p&gt;It took me less than half an hour to get it downloaded and set up and to confirm
that it would work the way we need for this particular piece of software.
(Firebird had taken me a good three hours, what with digging through badly
organized and not terribly clear documentation.) It took me less than half an
hour more to get PostgreSQL to the same point that I&amp;#8217;d finally gotten Firebird
to after multiple hours working with it. And I was so &lt;em&gt;very&lt;/em&gt; happy. What had
been an especially frustrating work day now had me quietly smiling to myself
constantly for the last two and a half hours as I &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception/22872598#22872598"&gt;finished&lt;/a&gt; tracking
down the bug that had set me on this path in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;Several years ago, when I first started doing web development, I got my feet wet
in database work with MySQL&amp;#8212;probably the single most common starting point for
anyone going that route, courtesy of the ubiquity of the standard Linux-Apache-
MySQL-&lt;span class="caps"&gt;PHP&lt;/span&gt; stack.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; A year after that, I picked up some work that was already
using PostgreSQL and fell in love almost immediately.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; Something just felt
&lt;em&gt;better&lt;/em&gt; about running &lt;code&gt;psql&lt;/code&gt; than running &lt;code&gt;mysql&lt;/code&gt; on the command line.
Postgres&amp;#8217; implementation of the &lt;span class="caps"&gt;SQL&lt;/span&gt; standard felt more natural. Even the tiniest
little details like the way tables display when you query them in &lt;code&gt;psql&lt;/code&gt; was
nicer. In less than a week, I was sold and haven&amp;#8217;t looked back. While I&amp;#8217;ve used
MySQL out of convenience on shared hosting from time to time, PostgreSQL is
unquestionably my preferred database&amp;nbsp;target.&lt;/p&gt;
&lt;p&gt;Today&amp;#8217;s experience brought that all home again. That grin on my face all
afternoon felt a bit silly, but it highlights the difference that really good
software design makes. I am not just talking about how it looks here&amp;#8212;though,
to be sure, PostgreSQL is prettier than FirebirdSQL&amp;#8212;but how it works.
PostgreSQL feels responsive, its command set makes a lot of sense and is easy to
use, and it is &lt;em&gt;extremely&lt;/em&gt; well documented. In fact, I would go so far as to say
that it is the best documented open source software I have ever used, as well as
among the very most robust. (The only other open source software I find to be as
incredibly rock-solid and reliable as PostgreSQL is the Linux kernel. I am by no
means an expert on either, or on open source software in general, but the Linux
kernel is an unarguably amazing piece of work. So is PostgreSQL.) All those tiny
little details add&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a good reminder for me as I write software that yes, the things I care
about&amp;#8212;the small matters that would be so easy to overlook when customers
express no interest in them&amp;#8212;really do matter. People may not know that things
like typography make a difference in their experience, but those subtle, often
imperceptible things matter. They may not consciously notice the differences in
your interface design (even a command line interface), but it will change their
experience of the software. Do it poorly, or even in a just-good-enough-to-get-
by fashion, and you&amp;#8217;ll annoy or simply bore them. Do it well, and you might just
delight them&amp;#8212;even if they can&amp;#8217;t tell you&amp;nbsp;why.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;To make my point a little more visible, I thought it might be useful to post
samples of &lt;span class="caps"&gt;SQL&lt;/span&gt; to accomplish the same task in the two different database&amp;nbsp;dialects.&lt;/p&gt;
&lt;h3 id="firebirdsql4"&gt;FirebirdSQL:&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id INT NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);
CREATE SEQUENCE project_id_sequence;
SET TERM + ;
CREATE TRIGGER project_id_sequence_update
  ACTIVE BEFORE INSERT OR UPDATE POSITION 0
  ON projects
AS
BEGIN
  IF ((new.id IS NULL) OR (new.id = 0))
    THEN new.id = NEXT VALUE FOR project_id_sequence;
END+
SET TERM ; +
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="postgresql"&gt;PostgreSQL&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id SERIAL NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not just that the PostgreSQL example is shorter and clearer&amp;#8212;it is that
it is shorter and clearer because its designers and developers have taken the
time to make sure that the shorter, cleaner way works well, and have documented
it so you can know how to use that shorter cleaner way without too much&amp;nbsp;difficulty.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I do most of my development on a Mac, but do all the testing on the target
platform (Windows) in a &lt;span class="caps"&gt;VM&lt;/span&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;At this point, I would only use one of those by default if I were building
a web app: Linux. I&amp;#8217;d use &lt;a href="http://wiki.nginx.org/Main"&gt;nginx&lt;/a&gt; instead of Apache,
&lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; instead of MySQL, and &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt; (though
&lt;a href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;, Javascript via &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/vstudio/hh341490"&gt;C# and the .&lt;span class="caps"&gt;NET&lt;/span&gt; stack&lt;/a&gt;,
or just about anything &lt;em&gt;but&lt;/em&gt; &lt;span class="caps"&gt;PHP&lt;/span&gt; would do fine).&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;em&gt;Almost&lt;/em&gt; immediately because at that point configuration on &lt;span class="caps"&gt;OS&lt;/span&gt; X was a bit
of a pain. That is &lt;a href="http://postgresapp.com" title="Postgres.app"&gt;no longer the case&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;To be perfectly fair to Firebird, it is improving. The upcoming 3.0 series
release will make these two a lot more similar than they are at present, and
clean up a number of other issues. What it won&amp;#8217;t do is get the &lt;em&gt;feel&lt;/em&gt; of
using Firebird more like that of using Postgres, or make the installation
procedure smoother or easier, or make the documentation more complete.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 04 Apr 2014 21:30:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-04-04:2014/feels-right.html</guid><category>software development</category><category>design</category></item><item><title>FirebirdSQL and IntelliJ IDEA (etc.)</title><link>http://www.chriskrycho.com/2014/firebirdsql-and-intellij-idea-etc.html</link><description>&lt;p&gt;Setting up IntelliJ &lt;span class="caps"&gt;IDEA&lt;/span&gt;&amp;#8217;s built-in database tools to work with FirebirdSQL
requires a particular setup configuration, which I&amp;#8217;m documenting here for public&amp;nbsp;consumption.&lt;/p&gt;
&lt;p&gt;These setup tools &lt;em&gt;should&lt;/em&gt; be applicable to any of JetBrains&amp;#8217; other Java-based
IDEs which include database support (e.g. PyCharm, RubyMine, WebStorm, etc.).
&lt;em&gt;Note:&lt;/em&gt; the following apply to IntelliJ &lt;span class="caps"&gt;IDEA&lt;/span&gt; 12 and the associated platforms,
but &lt;em&gt;not&lt;/em&gt; to the &lt;span class="caps"&gt;IDEA&lt;/span&gt; 13 platform, which made substantial changes to how
databases are configured. The underlying details are consistent, but the
interface has changed. I have tested on PyCharm 3.1 to confirm&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;This was all done on &lt;span class="caps"&gt;OS&lt;/span&gt; X 10.9, so I also make no guarantees that this works on
other platforms, though the likelihood that it behaves the same on Linux is
fairly good. I will update the post if and when I have confirmed that it&amp;nbsp;does.&lt;/p&gt;
&lt;p&gt;Steps to configuring a database correctly for use with &lt;span class="caps"&gt;IDEA&lt;/span&gt;/etc. Note that
steps 1&amp;#8211;3 are fairly obvious; the real point of interest is in steps 4 and 5,
which took me the longest time to figure&amp;nbsp;out.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the latest version of the Firebird &lt;a href="http://www.firebirdsql.org/en/jdbc-driver/"&gt;Java drivers&lt;/a&gt; for your
    operating system and your Java version. (You can check your Java version by
    running &lt;code&gt;java -version&lt;/code&gt; at the command line.) Extract the downloaded zip
    file. The extracted folder should include a file named
    &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt; (&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is currently&amp;nbsp;2.2.4).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;span class="caps"&gt;IDEA&lt;/span&gt;, in the database view, add a new data source: in the Database view
    (accessible via a menu button on the right side of the screen), right click
    and choose &lt;strong&gt;New -&amp;gt; Data Source&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;strong&gt;&lt;span class="caps"&gt;JDBC&lt;/span&gt; driver files&lt;/strong&gt;, browse to the location where you extracted the
    Jaybird driver files and select &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;strong&gt;&lt;span class="caps"&gt;JDBC&lt;/span&gt; driver class&lt;/strong&gt;, choose &lt;code&gt;org.firebirdsql.jdbc.FBDriver&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under &lt;strong&gt;Database &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/strong&gt;, specify &lt;code&gt;jdbc:firebirdsql://localhost:3050/&lt;/code&gt;
    followed by &lt;em&gt;either&lt;/em&gt; the full path to the database in question or a
    corresponding alias.&lt;sup id="fnref:alias"&gt;&lt;a class="footnote-ref" href="#fn:alias" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; A full path might look like this on&amp;nbsp;Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/C:/my_project/the_database.db
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With an alias, you would instead&amp;nbsp;have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/the_alias
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then specify valid values for the &lt;strong&gt;User&lt;/strong&gt; and &lt;strong&gt;Password&lt;/strong&gt; fields from
your existing configuration of the&amp;nbsp;database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the &lt;strong&gt;Test Connection&lt;/strong&gt; button and make sure the configuration&amp;nbsp;works.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That should do it. Note that the driver choice and path configuration both
matter. On &lt;span class="caps"&gt;OS&lt;/span&gt; X, I found that only the &lt;code&gt;FBDriver&lt;/code&gt; with this (and one other,
older-style and therefore not recommended) path setup worked&amp;nbsp;successfully.&lt;/p&gt;
&lt;p&gt;Observations, corrections, additional information, and miscellaneous comments
welcomed on &lt;a href="https://alpha.app.net/chriskrycho"&gt;App.net&lt;/a&gt; or &lt;a href="https://www.twitter.com/chriskrycho"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:alias"&gt;
&lt;p&gt;I strongly recommend configuring an alias in the aliases.conf file in
the Firebird home directory (usually set as &lt;code&gt;$FIREBIRD_HOME&lt;/code&gt; during
installation on *nix systems). This lets you move the database around at
will, update just the configuration file, and not have to update any
references to the database file whatsoever.&amp;#160;&lt;a class="footnote-backref" href="#fnref:alias" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 28 Mar 2014 09:00:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-03-28:2014/firebirdsql-and-intellij-idea-etc.html</guid><category>Software Development</category></item><item><title>The End of Surfing</title><link>http://www.chriskrycho.com/2014/the-end-of-surfing.html</link><description>&lt;p&gt;Sometime in the last few months it occurred to me that I no longer &amp;#8220;surf&amp;#8221; the
internet. I read, to be sure, and every once in a long while I even go on a
spree where I follow links from one site to another (or just in a long trail on
Wikipedia). In general, however, I no longer surf. I suspect I am not alone in
this: if we took a straw poll I would venture that most of my friends offline
and acquaintances online alike spend rather less time in &amp;#8220;browsing&amp;#8221; mode than
they do reading Facebook or Twitter or Instagram. Motion from link to link has
been replaced by individual hops out onto Buzzfeed or a viral cat picture
website.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The obvious explanation for all of this is already there in what I&amp;#8217;ve written:
Facebook and Twitter and all the rest of the social media web. To be sure, the
advent of social media and the increasing degree to which social media have
captured user attention on the web are a significant factor in the end of the
old surfing/browsing behavior. This is a dream come true for those social media
giants which have found ways to deliver ads to their many millions of users and
thereby turn enormous&amp;nbsp;profits.&lt;/p&gt;
&lt;p&gt;At the same time, I think there is an oft-overlooked factor in the shifting
nature of the web over the last decade: the browser. In fact, if there is any
single cause behind the death of old-fashioned surfing, I would point to Firefox
1.0: the browser which popularized tabbed browsing to increasingly large
sections of the internet-using public.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; The open-source browser steadily ate
away at Internet Explorer&amp;#8217;s then absurd levels of dominance, until Internet
Explorer 8 included of tabs itself. By the time that Chrome came on the scene,
tabbed browsing had long since become a&amp;nbsp;given.&lt;/p&gt;
&lt;p&gt;So why do I think that &lt;em&gt;tabbed browsing&lt;/em&gt; of all things contributed to the end of
&amp;#8220;browsing&amp;#8221; and &amp;#8220;surfing&amp;#8221; as our dominant mode of reading the internet? Simply
put: it broke linearity. Previously,&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; one&amp;#8217;s experience of the web was single-
stranded, leaping from one point to another in a line that however contorted was
always connected by the forward and backward buttons on the browser. The moment
tabbed browsing came on the scene, that line was broken. Following a link might
mean it opened in a new tab instead of moving the whole view forward to&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Surfing as I remember it in the late &amp;rsquo;90s and early &amp;rsquo;00s was
inherently the experience of getting lost along that timeline, finding myself
dozens of links along the chain and wondering how I had ended up there, and then
being able to trace my way back. With tabs, that traceability was gone. With it
went the inherent tension that we faced with every link: to follow, or not? To
get sucked down into &lt;em&gt;this&lt;/em&gt; vortex or &lt;em&gt;that&lt;/em&gt;? Because in all likelihood, we
knew, we were not going to be coming back to this page. With tabs, though, I
could open both of those pages without ever leaving this one. I could start new
journeys without ending the old. But there was a hidden cost: that newly opened
tab had no history. It was a clean slate; before that newly opened link there
was only a blank page. If I closed the original from which I had opened it,
there was no going back.&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; If I closed this new tabs, there was no going
forward to them. The line was&amp;nbsp;broken.&lt;/p&gt;
&lt;p&gt;From there it was only a short step to the idea of a single site being the
center from which one ventured out to other points on the web before returning:
the Facebooks and Twitters of the world. In some sense, Facebook&amp;#8217;s entire model
is predicated on the idea that it is natural to open a new tab with that juicy
Buzzfeed content while keeping Facebook itself open in a background tab. Would
it work in that old linear model? Sort of. Would it feel natural?&amp;nbsp;Never.&lt;/p&gt;
&lt;p&gt;All of this because of tabs. Invention&amp;#8217;s most significant results are rarely
those the minds behind it expect. When we are designing things&amp;#8212;whether a piece
of furniture or a piece of the web&amp;#8212;we have to remember that design decisions
all have repercussions that we may not see. Technology is never neutral.
Particular innovations may or may not be &lt;em&gt;morally&lt;/em&gt; significant, but they always
produce changes in people&amp;#8217;s behavior. Design has&amp;nbsp;consequences.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;For the record, lots of that hopping from link to link was on Buzzfeed-
like and viral-cat-picture-like sites, too. I am not concerned with the
&lt;em&gt;kind&lt;/em&gt; of content being read here, so much as the way it is being read.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Note that I am not crediting Firefox 1.0 with &lt;em&gt;creating&lt;/em&gt; the tabbed
browser&amp;#8212;only with popularizing it. That distinction matters.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Excepting having multiple browser windows open, which I am sure people
did&amp;#8212;but to a much lesser extent.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Yes, yes, browser history and re-open closed tab commands. But the
&lt;em&gt;experience&lt;/em&gt; of those is different, and that&amp;#8217;s what we&amp;#8217;re talking about
here.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 26 Mar 2014 20:00:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-03-26:2014/the-end-of-surfing.html</guid><category>design</category><category>software development</category></item><item><title>Doing It Myself</title><link>http://www.chriskrycho.com/2014/doing-it-myself.html</link><description>&lt;p&gt;Last summer, I started work on a project I named &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;&amp;#8212;aiming to
make a static site generator that would tick of all the little boxes marking my
desires for a website generator. In due time, the project got put on hold, as I
started up classes again and needed to focus more on my family than on fun side&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;Come the beginning of 2014, I was ready to bit WordPress farewell once and for
all, though. While &lt;a href="https://ghost.org"&gt;Ghost&lt;/a&gt; looks interesting, since I do all my writing
in Markdown files, there is something tempting about the canonical version of
the documents being the version on my computer (and thus also on my iPad and
iPhone and anywhere I have Dropbox and/or Git access). I did not have time at
the beginning of the year to finish writing Step Stool, and I knew as much,&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;
so instead I moved to &lt;a href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt; as a stop-gap. There were lots of good
reasons to pick Pelican: it has an active development community, fairly thorough
documentation,&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; and it&amp;#8217;s in Python and uses Jinja2 templates&amp;#8212;the same basic
approach I had taken with Step Stool, and the same&amp;nbsp;toolset.&lt;/p&gt;
&lt;p&gt;Unfortunately, while I have been glad to be away from WordPress, my experience
with Pelican so far has only reinforced my desire to get Step Stool done. There
are &lt;em&gt;lots&lt;/em&gt; of little things that it does in ways that just annoy me. Many of
them have to do with configuration and documentation. On the latter, while the
documentation is &lt;em&gt;fairly&lt;/em&gt; complete, there are quite a few holes and gaps. (Yes,
yes, open source software and anyone can add to the docs. That&amp;#8217;s great&amp;#8212;it
really is&amp;#8212;but if I&amp;#8217;m going to use someone else&amp;#8217;s solution, it had better &lt;em&gt;just
work&lt;/em&gt;. Otherwise, I&amp;#8217;d rather spend my time getting my own&amp;nbsp;going.)&lt;/p&gt;
&lt;p&gt;For example, if you want to see how the pagination actually works, good luck
figuring it out from the documentation. You&amp;#8217;ll need to go looking at the way the
sample themes (yes, both of them) are implemented to start getting a feel for
it. Along the same lines, many of the objects that get handed to the templates
are not fully documented, so it is difficult to know what one can or cannot do.
I do not particularly want to spend my time adding debug print statements to my
templates just to figure out what options I have&amp;nbsp;available.&lt;/p&gt;
&lt;p&gt;The same kinds of things hold true for configuration options. Moreover, the
configuration is done through a Python module. While that makes the module
easier to integrate on the code side of things, it makes its actual content much
less transparent than one might hope. Python is not really well optimized for
writing configuration files&amp;#8212;nor is any normal programming language.
Configuration is inherently declarative, rather than&amp;nbsp;imperative.&lt;/p&gt;
&lt;p&gt;This is not to say that Pelican is bad software. It is not. It is, however, a
fairly typical example of open source software implemented by committee. It has
holes (some of them serious), bumps, and quirks. Here is the reality: so will
Step Stool, though they will be the quirks that come from an individual
developer&amp;#8217;s approach rather than a group&amp;#8217;s. But the one thing I can guarantee,
and the reason I am increasingly motivated to get back to working on Step Stool.
And yes, I do have a couple other projects on my plate as well&amp;#8212;contributions
to the Smartypants and Typogrify modules, my own &lt;a href="https://bitbucket.org/chriskrycho/spacewell"&gt;Spacewell typography project&lt;/a&gt;,
and quite possibly a &lt;a href="https://bitbucket.org/chriskrycho/markdown-poetry/"&gt;Markdown Poetry extension &lt;/a&gt;. But I would like
very much to just get back to doing this myself. There is freedom in rolling my
own solution to things. I will not always have time to do these kinds of things; 
I figure I should do them when I&amp;nbsp;can.&lt;/p&gt;
&lt;p&gt;So here&amp;#8217;s to &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;, and&amp;#8212;more importantly&amp;#8212;to writing your own
software just to scratch that&amp;nbsp;itch.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I spent quite a bit of time tweaking my friend Vernon King&amp;#8217;s &lt;a href="http://www.vernonking.org"&gt;Jekyll-powered site&lt;/a&gt;, I got Winning Slowly off the ground,
including designing the site from scratch and implementing it (also in Pelican),
and I did some substantial redesign work on this site. That was more than enough
for my three week break&amp;#8212;as evidenced by the fact that I didn&amp;#8217;t get to the sort
of 1.0 version of this site until just a week or so ago.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Emphasis on &amp;#8220;fairly.&amp;#8221; More on &lt;em&gt;that&lt;/em&gt; in a moment as well.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 21 Mar 2014 22:14:00 -0400</pubDate><guid>tag:www.chriskrycho.com,2014-03-21:2014/doing-it-myself.html</guid><category>software development</category></item></channel></rss>