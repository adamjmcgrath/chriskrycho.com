{"version":3,"sources":["../../scripts/smcp.js"],"names":[],"mappings":";;;;;;kBAae,YAAW;;;AAGxB,MAAI,QAAQ,SAAS,oBAAT,CAA8B,GAA9B,CAAR;;;AAHoB,MAMpB,aAAa,MAAM,MAAN,CAAa,UAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAkB;AAC9C,QAAI,cAAc,GAAG,eAAH,CAAmB,OAAnB,CAD4B;AAE9C,QAAI,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAf,CAF0C;;AAI9C,WAAO,aAAa,IAAb,CAAkB,UAAC,OAAD;aAAqB,QAAQ,WAAR;KAArB,CAAzB,CAJ8C;GAAlB,CAA1B;;;AANoB,YAcxB,CAAW,GAAX,CAAe,eAAf,EAdwB;CAAX;;;;;;;;;AANf,IAAI,kBAAkB,SAAlB,eAAkB,CAAC,CAAD,EAAO,EAAP;;AAqBrB","file":"smcp.js","sourcesContent":["/**\n * Apply a wrapping span with class `smcp` to the first five words in the\n * paragraph.\n *\n * @param  {Element} p The paragraph element on which to work.\n * @return {Element}   The paragraph with the span inserted.\n */\nlet smallCapitalize = (p) => {\n\n};\n\n\n\nexport default function() {\n  // Find all the relevant paragraphs: the first in an article, the first after\n  // an hrule, and the first after any header.\n  let allPs = document.getElementsByTagName('p');\n\n  // Check the item's previous siblings: we want h1, h2, hr, and null types.\n  let relevantPs = allPs.filter((el, idx, arr) => {\n    let previousTag = el.previousSibling.tagName;\n    let relevantTags = ['h1', 'h2', 'hr', null];\n\n    return relevantTags.some((current, ...etc) => cur === previousTag);\n  });\n\n  // Apply the capitalization function to each of the relevant paragraphs.\n  relevantPs.map(smallCapitalize);\n};\n"]}