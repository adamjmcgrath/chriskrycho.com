{"version":3,"sources":["../../scripts/spacewell.es6"],"names":[],"mappings":";;;;;;;AAEA,SAAS,SAAT,CAAmB,OAAnB,EAA4B;AAC1B,MAAI,CAAC,OAAD,EAAU;AACZ,YAAQ,KAAR,CAAc,6CAAd,EADY;AAEZ,WAFY;GAAd;;AAKA,MAAM,OAAO,qBAAP,CANoB;AAO1B,MAAM,SAAS,6BAAT,CAPoB;AAQ1B,MAAM,QAAQ,qBAAR,CARoB;AAS1B,MAAM,OAAO,IAAI,MAAJ,MAAc,OAAO,SAAS,KAA9B,EAAuC,GAAvC,CAAP,CAToB;;AAW1B,MAAM,0EAAN,CAX0B;;AAa1B,SAAO,QAAQ,OAAR,CAAgB,IAAhB,EAAsB,IAAtB,CAAP,CAb0B;CAA5B;;;;;AAoBA,SAAS,SAAT,CAAmB,OAAnB,EAA4B;AAC1B,MAAI,CAAC,OAAD,EAAU;AACZ,YAAQ,KAAR,CAAc,6CAAd,EADY;AAEZ,WAFY;GAAd;;AAKA,MAAM,OAAO,oCAAP,CANoB;AAO1B,MAAM,SAAS,SAAT;;;;AAPoB,MAWpB,UAAU,gDAAV,CAXoB;AAY1B,MAAM,UAAa,kCAA6B,MAA1C,CAZoB;AAa1B,MAAM,cAAc,QAAQ,OAAR,CAAgB,OAAhB,EAAyB,OAAzB,CAAd,CAboB;;AAe1B,MAAM,WAAW,2CAAX,CAfoB;AAgB1B,MAAM,WAAc,kCAA6B,MAA3C,CAhBoB;AAiB1B,MAAM,gBAAgB,YAAY,OAAZ,CAAoB,QAApB,EAA8B,QAA9B,CAAhB,CAjBoB;;AAmB1B,SAAO,aAAP,CAnB0B;CAA5B;;;;AAyBA,SAAS,SAAT,CAAmB,OAAnB,EAA4B;AAC1B,MAAI,CAAC,OAAD,EAAU;AACZ,YAAQ,KAAR,CAAc,6CAAd,EADY;AAEZ,WAFY;GAAd;;;;;;AAD0B,SAU1B,CAAQ,KAAR,CAAc,4CAAd,EAV0B;CAA5B;;;;;;;;;;AAsBA,SAAS,SAAT,CAAmB,SAAnB,EAA8B,OAA9B,EAAuC;;AAErC,MAAI,CAAC,SAAD,EAAY;AACd,YAAQ,KAAR,CAAc,2CAAd,EADc;AAEd,WAFc;GAAhB;;AAKA,MAAI,CAAC,UAAU,SAAV,EAAqB;AAAE,WAAF;GAA1B;;;;;;AAPqC,MAa/B,cAAc,EAAE,UAAU,IAAV,EAAgB,UAAU,IAAV,EAAgB,UAAU,IAAV,EAAhD,CAb+B;AAcrC,MAAM,SAAS,WAAW,WAAX,CAdsB;;AAgBrC,MAAM,YAAY;AAChB,gBAAY,SAAZ;AACA,gBAAY,SAAZ;AACA,gBAAY,SAAZ;GAHI,CAhB+B;;AAsBrC,MAAI,UAAU,UAAU,SAAV,CAtBuB;AAuBrC,OAAK,IAAM,GAAN,IAAa,MAAlB,EAA0B;AACxB,QAAI,OAAO,GAAP,CAAJ,EAAiB;AACf,gBAAU,UAAU,GAAV,EAAe,OAAf,CAAV,CADe;KAAjB;GADF;;AAMA,YAAU,SAAV,GAAsB,OAAtB,CA7BqC;CAAvC;;kBAiCe","file":"spacewell.js","sourcesContent":["// Wrap em dashes and their immediate neighbors in non-breaking span and\n// hair spaces.\nfunction _emDashes(content) {\n  if (!content) {\n    console.error(\"spacewell::emDashes(): no content supplied.\");\n    return;\n  }\n\n  const open = /([\\w\\d‘’“”\\)\\]\\>]+)/;\n  const dashes = /(—|&mdash;|&#8212;|&x2014;)/;\n  const close = /([\\w\\d‘’“”\\(\\[\\<]+)/;\n  const patt = new RegExp(`${open}${dashes}${close}`, 'g');\n\n  const repl = `<span style=\"white-space: nowrap\">$1&hairsp;$2&hairsp;$3</span>`;\n\n  return content.replace(patt, repl);\n}\n\n\n// Wrap en dashes and their immediate neighbors in non-breaking span and\n// thin spaces (for words, replacing normal spaces) or hair spaces (for\n// numbers).\nfunction _enDashes(content) {\n  if (!content) {\n    console.error(\"spacewell::enDashes(): no content supplied.\");\n    return;\n  }\n\n  const span = '<span style=\"white-space: nowrap\">';\n  const unspan = '</span>'\n\n  // Do numbers *first*. Include a variety of ways digits might be constructed\n  // including e.g. Bible verses, other punctuation, etc.\n  const numPatt = /([\\d:\\.]+) ?(–|&ndash;|&8211;|&x2013;) ?(\\d+)/g;\n  const numRepl = `${span}$1&hairsp;$2&hairsp;$3${unspan}`;\n  const numReplaced = content.replace(numPatt, numRepl);\n\n  const wordPatt = /(\\w+) ?(–|&ndash;|&8211;|&x2013;) ?(\\w+)/g;\n  const wordRepl = `${span}$1&thinsp;$2&thinsp;$3${unspan}`;\n  const wordsReplaced = numReplaced.replace(wordPatt, wordRepl);\n\n  return wordsReplaced;\n}\n\n\n// Take e.g. \"J. R. R. Tolkien\" or \"J.R.R. Tolkien\" and use thin spaces\n// between the initials.\nfunction _initials(content) {\n  if (!content) {\n    console.error(\"spacewell::initials(): no content supplied.\");\n    return;\n  }\n\n  // TODO: implement this in a way that doesn't mistake ends of\n  //     sentences. Basically, I *think* it should just be anytime\n  //     that the period follows a capital letter, but there may be\n  //     the occasional exception.\n  console.error(\"spacewell::initials() not yet implemented.\")\n}\n\n\n/**\n  Given a valid DOM element `container`, apply nice typographical spacing.\n  @param  {Node}     container         A document element to apply rules to.\n  @param  {Object}   options           Options for which spacing rules to use.\n  @param  {boolean}  options.emDashes  Wrap em dashes in hair spaces.\n  @param  {boolean}  options.enDashes  Wrap em dashes in thin spaces.\n  @param  {boolean}  options.initials  Separate initials with thin spaces.\n */\nfunction spacewell(container, options) {\n  // Actually run the function.\n  if (!container) {\n    console.error(\"spacewell: no container element supplied.\");\n    return;\n  }\n\n  if (!container.innerHTML) { return; }\n\n  // NOTE: keys are mapped to names of functions in the module.\n  // TODO: expand to support broader functionality, e.g. the kind of space to\n  //       use in wrapping a given element and exceptions (e.g. to turn off the\n  //       rule for given element types).\n  const defaultOpts = { emDashes: true, enDashes: true, initials: true };\n  const config = options || defaultOpts;\n\n  const functions = {\n    \"emDashes\": _emDashes,\n    \"enDashes\": _enDashes,\n    \"initials\": _initials\n  };\n\n  var content = container.innerHTML;\n  for (const opt in config) {\n    if (config[opt]) {\n      content = functions[opt](content);\n    }\n  }\n\n  container.innerHTML = content;\n}\n\n\nexport default spacewell;\n"]}